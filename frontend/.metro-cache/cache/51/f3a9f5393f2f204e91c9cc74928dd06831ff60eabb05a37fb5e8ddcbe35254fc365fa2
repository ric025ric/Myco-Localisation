{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Data mask pattern reference\n   * @type {Object}\n   */\n  exports.Patterns = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n  };\n\n  /**\n   * Weighted penalty scores for the undesirable features\n   * @type {Object}\n   */\n  const PenaltyScores = {\n    N1: 3,\n    N2: 3,\n    N3: 40,\n    N4: 10\n  };\n\n  /**\n   * Check if mask pattern value is valid\n   *\n   * @param  {Number}  mask    Mask pattern\n   * @return {Boolean}         true if valid, false otherwise\n   */\n  exports.isValid = function isValid(mask) {\n    return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;\n  };\n\n  /**\n   * Returns mask pattern from a value.\n   * If value is not valid, returns undefined\n   *\n   * @param  {Number|String} value        Mask pattern value\n   * @return {Number}                     Valid mask pattern or undefined\n   */\n  exports.from = function from(value) {\n    return exports.isValid(value) ? parseInt(value, 10) : undefined;\n  };\n\n  /**\n  * Find adjacent modules in row/column with the same color\n  * and assign a penalty value.\n  *\n  * Points: N1 + i\n  * i is the amount by which the number of adjacent modules of the same color exceeds 5\n  */\n  exports.getPenaltyN1 = function getPenaltyN1(data) {\n    const size = data.size;\n    let points = 0;\n    let sameCountCol = 0;\n    let sameCountRow = 0;\n    let lastCol = null;\n    let lastRow = null;\n    for (let row = 0; row < size; row++) {\n      sameCountCol = sameCountRow = 0;\n      lastCol = lastRow = null;\n      for (let col = 0; col < size; col++) {\n        let module = data.get(row, col);\n        if (module === lastCol) {\n          sameCountCol++;\n        } else {\n          if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n          lastCol = module;\n          sameCountCol = 1;\n        }\n        module = data.get(col, row);\n        if (module === lastRow) {\n          sameCountRow++;\n        } else {\n          if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n          lastRow = module;\n          sameCountRow = 1;\n        }\n      }\n      if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n      if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n    }\n    return points;\n  };\n\n  /**\n   * Find 2x2 blocks with the same color and assign a penalty value\n   *\n   * Points: N2 * (m - 1) * (n - 1)\n   */\n  exports.getPenaltyN2 = function getPenaltyN2(data) {\n    const size = data.size;\n    let points = 0;\n    for (let row = 0; row < size - 1; row++) {\n      for (let col = 0; col < size - 1; col++) {\n        const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n        if (last === 4 || last === 0) points++;\n      }\n    }\n    return points * PenaltyScores.N2;\n  };\n\n  /**\n   * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n   * preceded or followed by light area 4 modules wide\n   *\n   * Points: N3 * number of pattern found\n   */\n  exports.getPenaltyN3 = function getPenaltyN3(data) {\n    const size = data.size;\n    let points = 0;\n    let bitsCol = 0;\n    let bitsRow = 0;\n    for (let row = 0; row < size; row++) {\n      bitsCol = bitsRow = 0;\n      for (let col = 0; col < size; col++) {\n        bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n        if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n        bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n        if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n      }\n    }\n    return points * PenaltyScores.N3;\n  };\n\n  /**\n   * Calculate proportion of dark modules in entire symbol\n   *\n   * Points: N4 * k\n   *\n   * k is the rating of the deviation of the proportion of dark modules\n   * in the symbol from 50% in steps of 5%\n   */\n  exports.getPenaltyN4 = function getPenaltyN4(data) {\n    let darkCount = 0;\n    const modulesCount = data.data.length;\n    for (let i = 0; i < modulesCount; i++) darkCount += data.data[i];\n    const k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n    return k * PenaltyScores.N4;\n  };\n\n  /**\n   * Return mask value at given position\n   *\n   * @param  {Number} maskPattern Pattern reference value\n   * @param  {Number} i           Row\n   * @param  {Number} j           Column\n   * @return {Boolean}            Mask value\n   */\n  function getMaskAt(maskPattern, i, j) {\n    switch (maskPattern) {\n      case exports.Patterns.PATTERN000:\n        return (i + j) % 2 === 0;\n      case exports.Patterns.PATTERN001:\n        return i % 2 === 0;\n      case exports.Patterns.PATTERN010:\n        return j % 3 === 0;\n      case exports.Patterns.PATTERN011:\n        return (i + j) % 3 === 0;\n      case exports.Patterns.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n      case exports.Patterns.PATTERN101:\n        return i * j % 2 + i * j % 3 === 0;\n      case exports.Patterns.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 === 0;\n      case exports.Patterns.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 === 0;\n      default:\n        throw new Error('bad maskPattern:' + maskPattern);\n    }\n  }\n\n  /**\n   * Apply a mask pattern to a BitMatrix\n   *\n   * @param  {Number}    pattern Pattern reference number\n   * @param  {BitMatrix} data    BitMatrix data\n   */\n  exports.applyMask = function applyMask(pattern, data) {\n    const size = data.size;\n    for (let col = 0; col < size; col++) {\n      for (let row = 0; row < size; row++) {\n        if (data.isReserved(row, col)) continue;\n        data.xor(row, col, getMaskAt(pattern, row, col));\n      }\n    }\n  };\n\n  /**\n   * Returns the best mask pattern for data\n   *\n   * @param  {BitMatrix} data\n   * @return {Number} Mask pattern reference number\n   */\n  exports.getBestMask = function getBestMask(data, setupFormatFunc) {\n    const numPatterns = Object.keys(exports.Patterns).length;\n    let bestPattern = 0;\n    let lowerPenalty = Infinity;\n    for (let p = 0; p < numPatterns; p++) {\n      setupFormatFunc(p);\n      exports.applyMask(p, data);\n\n      // Calculate penalty\n      const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);\n\n      // Undo previously applied mask\n      exports.applyMask(p, data);\n      if (penalty < lowerPenalty) {\n        lowerPenalty = penalty;\n        bestPattern = p;\n      }\n    }\n    return bestPattern;\n  };\n});","lineCount":219,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,2,5,0,"exports"],[6,9,5,7],[6,10,5,8,"Patterns"],[6,18,5,16],[6,21,5,19],[7,4,6,2,"PATTERN000"],[7,14,6,12],[7,16,6,14],[7,17,6,15],[8,4,7,2,"PATTERN001"],[8,14,7,12],[8,16,7,14],[8,17,7,15],[9,4,8,2,"PATTERN010"],[9,14,8,12],[9,16,8,14],[9,17,8,15],[10,4,9,2,"PATTERN011"],[10,14,9,12],[10,16,9,14],[10,17,9,15],[11,4,10,2,"PATTERN100"],[11,14,10,12],[11,16,10,14],[11,17,10,15],[12,4,11,2,"PATTERN101"],[12,14,11,12],[12,16,11,14],[12,17,11,15],[13,4,12,2,"PATTERN110"],[13,14,12,12],[13,16,12,14],[13,17,12,15],[14,4,13,2,"PATTERN111"],[14,14,13,12],[14,16,13,14],[15,2,14,0],[15,3,14,1],[17,2,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,2,20,0],[21,8,20,6,"PenaltyScores"],[21,21,20,19],[21,24,20,22],[22,4,21,2,"N1"],[22,6,21,4],[22,8,21,6],[22,9,21,7],[23,4,22,2,"N2"],[23,6,22,4],[23,8,22,6],[23,9,22,7],[24,4,23,2,"N3"],[24,6,23,4],[24,8,23,6],[24,10,23,8],[25,4,24,2,"N4"],[25,6,24,4],[25,8,24,6],[26,2,25,0],[26,3,25,1],[28,2,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,2,33,0,"exports"],[34,9,33,7],[34,10,33,8,"isValid"],[34,17,33,15],[34,20,33,18],[34,29,33,27,"isValid"],[34,36,33,34,"isValid"],[34,37,33,36,"mask"],[34,41,33,40],[34,43,33,42],[35,4,34,2],[35,11,34,9,"mask"],[35,15,34,13],[35,19,34,17],[35,23,34,21],[35,27,34,25,"mask"],[35,31,34,29],[35,36,34,34],[35,38,34,36],[35,42,34,40],[35,43,34,41,"isNaN"],[35,48,34,46],[35,49,34,47,"mask"],[35,53,34,51],[35,54,34,52],[35,58,34,56,"mask"],[35,62,34,60],[35,66,34,64],[35,67,34,65],[35,71,34,69,"mask"],[35,75,34,73],[35,79,34,77],[35,80,34,78],[36,2,35,0],[36,3,35,1],[38,2,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,2,44,0,"exports"],[45,9,44,7],[45,10,44,8,"from"],[45,14,44,12],[45,17,44,15],[45,26,44,24,"from"],[45,30,44,28,"from"],[45,31,44,30,"value"],[45,36,44,35],[45,38,44,37],[46,4,45,2],[46,11,45,9,"exports"],[46,18,45,16],[46,19,45,17,"isValid"],[46,26,45,24],[46,27,45,25,"value"],[46,32,45,30],[46,33,45,31],[46,36,45,34,"parseInt"],[46,44,45,42],[46,45,45,43,"value"],[46,50,45,48],[46,52,45,50],[46,54,45,52],[46,55,45,53],[46,58,45,56,"undefined"],[46,67,45,65],[47,2,46,0],[47,3,46,1],[49,2,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,0,52,0],[54,0,53,0],[55,0,54,0],[56,2,55,0,"exports"],[56,9,55,7],[56,10,55,8,"getPenaltyN1"],[56,22,55,20],[56,25,55,23],[56,34,55,32,"getPenaltyN1"],[56,46,55,44,"getPenaltyN1"],[56,47,55,46,"data"],[56,51,55,50],[56,53,55,52],[57,4,56,2],[57,10,56,8,"size"],[57,14,56,12],[57,17,56,15,"data"],[57,21,56,19],[57,22,56,20,"size"],[57,26,56,24],[58,4,57,2],[58,8,57,6,"points"],[58,14,57,12],[58,17,57,15],[58,18,57,16],[59,4,58,2],[59,8,58,6,"sameCountCol"],[59,20,58,18],[59,23,58,21],[59,24,58,22],[60,4,59,2],[60,8,59,6,"sameCountRow"],[60,20,59,18],[60,23,59,21],[60,24,59,22],[61,4,60,2],[61,8,60,6,"lastCol"],[61,15,60,13],[61,18,60,16],[61,22,60,20],[62,4,61,2],[62,8,61,6,"lastRow"],[62,15,61,13],[62,18,61,16],[62,22,61,20],[63,4,63,2],[63,9,63,7],[63,13,63,11,"row"],[63,16,63,14],[63,19,63,17],[63,20,63,18],[63,22,63,20,"row"],[63,25,63,23],[63,28,63,26,"size"],[63,32,63,30],[63,34,63,32,"row"],[63,37,63,35],[63,39,63,37],[63,41,63,39],[64,6,64,4,"sameCountCol"],[64,18,64,16],[64,21,64,19,"sameCountRow"],[64,33,64,31],[64,36,64,34],[64,37,64,35],[65,6,65,4,"lastCol"],[65,13,65,11],[65,16,65,14,"lastRow"],[65,23,65,21],[65,26,65,24],[65,30,65,28],[66,6,67,4],[66,11,67,9],[66,15,67,13,"col"],[66,18,67,16],[66,21,67,19],[66,22,67,20],[66,24,67,22,"col"],[66,27,67,25],[66,30,67,28,"size"],[66,34,67,32],[66,36,67,34,"col"],[66,39,67,37],[66,41,67,39],[66,43,67,41],[67,8,68,6],[67,12,68,10,"module"],[67,18,68,16],[67,21,68,19,"data"],[67,25,68,23],[67,26,68,24,"get"],[67,29,68,27],[67,30,68,28,"row"],[67,33,68,31],[67,35,68,33,"col"],[67,38,68,36],[67,39,68,37],[68,8,69,6],[68,12,69,10,"module"],[68,18,69,16],[68,23,69,21,"lastCol"],[68,30,69,28],[68,32,69,30],[69,10,70,8,"sameCountCol"],[69,22,70,20],[69,24,70,22],[70,8,71,6],[70,9,71,7],[70,15,71,13],[71,10,72,8],[71,14,72,12,"sameCountCol"],[71,26,72,24],[71,30,72,28],[71,31,72,29],[71,33,72,31,"points"],[71,39,72,37],[71,43,72,41,"PenaltyScores"],[71,56,72,54],[71,57,72,55,"N1"],[71,59,72,57],[71,63,72,61,"sameCountCol"],[71,75,72,73],[71,78,72,76],[71,79,72,77],[71,80,72,78],[72,10,73,8,"lastCol"],[72,17,73,15],[72,20,73,18,"module"],[72,26,73,24],[73,10,74,8,"sameCountCol"],[73,22,74,20],[73,25,74,23],[73,26,74,24],[74,8,75,6],[75,8,77,6,"module"],[75,14,77,12],[75,17,77,15,"data"],[75,21,77,19],[75,22,77,20,"get"],[75,25,77,23],[75,26,77,24,"col"],[75,29,77,27],[75,31,77,29,"row"],[75,34,77,32],[75,35,77,33],[76,8,78,6],[76,12,78,10,"module"],[76,18,78,16],[76,23,78,21,"lastRow"],[76,30,78,28],[76,32,78,30],[77,10,79,8,"sameCountRow"],[77,22,79,20],[77,24,79,22],[78,8,80,6],[78,9,80,7],[78,15,80,13],[79,10,81,8],[79,14,81,12,"sameCountRow"],[79,26,81,24],[79,30,81,28],[79,31,81,29],[79,33,81,31,"points"],[79,39,81,37],[79,43,81,41,"PenaltyScores"],[79,56,81,54],[79,57,81,55,"N1"],[79,59,81,57],[79,63,81,61,"sameCountRow"],[79,75,81,73],[79,78,81,76],[79,79,81,77],[79,80,81,78],[80,10,82,8,"lastRow"],[80,17,82,15],[80,20,82,18,"module"],[80,26,82,24],[81,10,83,8,"sameCountRow"],[81,22,83,20],[81,25,83,23],[81,26,83,24],[82,8,84,6],[83,6,85,4],[84,6,87,4],[84,10,87,8,"sameCountCol"],[84,22,87,20],[84,26,87,24],[84,27,87,25],[84,29,87,27,"points"],[84,35,87,33],[84,39,87,37,"PenaltyScores"],[84,52,87,50],[84,53,87,51,"N1"],[84,55,87,53],[84,59,87,57,"sameCountCol"],[84,71,87,69],[84,74,87,72],[84,75,87,73],[84,76,87,74],[85,6,88,4],[85,10,88,8,"sameCountRow"],[85,22,88,20],[85,26,88,24],[85,27,88,25],[85,29,88,27,"points"],[85,35,88,33],[85,39,88,37,"PenaltyScores"],[85,52,88,50],[85,53,88,51,"N1"],[85,55,88,53],[85,59,88,57,"sameCountRow"],[85,71,88,69],[85,74,88,72],[85,75,88,73],[85,76,88,74],[86,4,89,2],[87,4,91,2],[87,11,91,9,"points"],[87,17,91,15],[88,2,92,0],[88,3,92,1],[90,2,94,0],[91,0,95,0],[92,0,96,0],[93,0,97,0],[94,0,98,0],[95,2,99,0,"exports"],[95,9,99,7],[95,10,99,8,"getPenaltyN2"],[95,22,99,20],[95,25,99,23],[95,34,99,32,"getPenaltyN2"],[95,46,99,44,"getPenaltyN2"],[95,47,99,46,"data"],[95,51,99,50],[95,53,99,52],[96,4,100,2],[96,10,100,8,"size"],[96,14,100,12],[96,17,100,15,"data"],[96,21,100,19],[96,22,100,20,"size"],[96,26,100,24],[97,4,101,2],[97,8,101,6,"points"],[97,14,101,12],[97,17,101,15],[97,18,101,16],[98,4,103,2],[98,9,103,7],[98,13,103,11,"row"],[98,16,103,14],[98,19,103,17],[98,20,103,18],[98,22,103,20,"row"],[98,25,103,23],[98,28,103,26,"size"],[98,32,103,30],[98,35,103,33],[98,36,103,34],[98,38,103,36,"row"],[98,41,103,39],[98,43,103,41],[98,45,103,43],[99,6,104,4],[99,11,104,9],[99,15,104,13,"col"],[99,18,104,16],[99,21,104,19],[99,22,104,20],[99,24,104,22,"col"],[99,27,104,25],[99,30,104,28,"size"],[99,34,104,32],[99,37,104,35],[99,38,104,36],[99,40,104,38,"col"],[99,43,104,41],[99,45,104,43],[99,47,104,45],[100,8,105,6],[100,14,105,12,"last"],[100,18,105,16],[100,21,105,19,"data"],[100,25,105,23],[100,26,105,24,"get"],[100,29,105,27],[100,30,105,28,"row"],[100,33,105,31],[100,35,105,33,"col"],[100,38,105,36],[100,39,105,37],[100,42,106,8,"data"],[100,46,106,12],[100,47,106,13,"get"],[100,50,106,16],[100,51,106,17,"row"],[100,54,106,20],[100,56,106,22,"col"],[100,59,106,25],[100,62,106,28],[100,63,106,29],[100,64,106,30],[100,67,107,8,"data"],[100,71,107,12],[100,72,107,13,"get"],[100,75,107,16],[100,76,107,17,"row"],[100,79,107,20],[100,82,107,23],[100,83,107,24],[100,85,107,26,"col"],[100,88,107,29],[100,89,107,30],[100,92,108,8,"data"],[100,96,108,12],[100,97,108,13,"get"],[100,100,108,16],[100,101,108,17,"row"],[100,104,108,20],[100,107,108,23],[100,108,108,24],[100,110,108,26,"col"],[100,113,108,29],[100,116,108,32],[100,117,108,33],[100,118,108,34],[101,8,110,6],[101,12,110,10,"last"],[101,16,110,14],[101,21,110,19],[101,22,110,20],[101,26,110,24,"last"],[101,30,110,28],[101,35,110,33],[101,36,110,34],[101,38,110,36,"points"],[101,44,110,42],[101,46,110,44],[102,6,111,4],[103,4,112,2],[104,4,114,2],[104,11,114,9,"points"],[104,17,114,15],[104,20,114,18,"PenaltyScores"],[104,33,114,31],[104,34,114,32,"N2"],[104,36,114,34],[105,2,115,0],[105,3,115,1],[107,2,117,0],[108,0,118,0],[109,0,119,0],[110,0,120,0],[111,0,121,0],[112,0,122,0],[113,2,123,0,"exports"],[113,9,123,7],[113,10,123,8,"getPenaltyN3"],[113,22,123,20],[113,25,123,23],[113,34,123,32,"getPenaltyN3"],[113,46,123,44,"getPenaltyN3"],[113,47,123,46,"data"],[113,51,123,50],[113,53,123,52],[114,4,124,2],[114,10,124,8,"size"],[114,14,124,12],[114,17,124,15,"data"],[114,21,124,19],[114,22,124,20,"size"],[114,26,124,24],[115,4,125,2],[115,8,125,6,"points"],[115,14,125,12],[115,17,125,15],[115,18,125,16],[116,4,126,2],[116,8,126,6,"bitsCol"],[116,15,126,13],[116,18,126,16],[116,19,126,17],[117,4,127,2],[117,8,127,6,"bitsRow"],[117,15,127,13],[117,18,127,16],[117,19,127,17],[118,4,129,2],[118,9,129,7],[118,13,129,11,"row"],[118,16,129,14],[118,19,129,17],[118,20,129,18],[118,22,129,20,"row"],[118,25,129,23],[118,28,129,26,"size"],[118,32,129,30],[118,34,129,32,"row"],[118,37,129,35],[118,39,129,37],[118,41,129,39],[119,6,130,4,"bitsCol"],[119,13,130,11],[119,16,130,14,"bitsRow"],[119,23,130,21],[119,26,130,24],[119,27,130,25],[120,6,131,4],[120,11,131,9],[120,15,131,13,"col"],[120,18,131,16],[120,21,131,19],[120,22,131,20],[120,24,131,22,"col"],[120,27,131,25],[120,30,131,28,"size"],[120,34,131,32],[120,36,131,34,"col"],[120,39,131,37],[120,41,131,39],[120,43,131,41],[121,8,132,6,"bitsCol"],[121,15,132,13],[121,18,132,18,"bitsCol"],[121,25,132,25],[121,29,132,29],[121,30,132,30],[121,33,132,34],[121,38,132,39],[121,41,132,43,"data"],[121,45,132,47],[121,46,132,48,"get"],[121,49,132,51],[121,50,132,52,"row"],[121,53,132,55],[121,55,132,57,"col"],[121,58,132,60],[121,59,132,61],[122,8,133,6],[122,12,133,10,"col"],[122,15,133,13],[122,19,133,17],[122,21,133,19],[122,26,133,24,"bitsCol"],[122,33,133,31],[122,38,133,36],[122,43,133,41],[122,47,133,45,"bitsCol"],[122,54,133,52],[122,59,133,57],[122,64,133,62],[122,65,133,63],[122,67,133,65,"points"],[122,73,133,71],[122,75,133,73],[123,8,135,6,"bitsRow"],[123,15,135,13],[123,18,135,18,"bitsRow"],[123,25,135,25],[123,29,135,29],[123,30,135,30],[123,33,135,34],[123,38,135,39],[123,41,135,43,"data"],[123,45,135,47],[123,46,135,48,"get"],[123,49,135,51],[123,50,135,52,"col"],[123,53,135,55],[123,55,135,57,"row"],[123,58,135,60],[123,59,135,61],[124,8,136,6],[124,12,136,10,"col"],[124,15,136,13],[124,19,136,17],[124,21,136,19],[124,26,136,24,"bitsRow"],[124,33,136,31],[124,38,136,36],[124,43,136,41],[124,47,136,45,"bitsRow"],[124,54,136,52],[124,59,136,57],[124,64,136,62],[124,65,136,63],[124,67,136,65,"points"],[124,73,136,71],[124,75,136,73],[125,6,137,4],[126,4,138,2],[127,4,140,2],[127,11,140,9,"points"],[127,17,140,15],[127,20,140,18,"PenaltyScores"],[127,33,140,31],[127,34,140,32,"N3"],[127,36,140,34],[128,2,141,0],[128,3,141,1],[130,2,143,0],[131,0,144,0],[132,0,145,0],[133,0,146,0],[134,0,147,0],[135,0,148,0],[136,0,149,0],[137,0,150,0],[138,2,151,0,"exports"],[138,9,151,7],[138,10,151,8,"getPenaltyN4"],[138,22,151,20],[138,25,151,23],[138,34,151,32,"getPenaltyN4"],[138,46,151,44,"getPenaltyN4"],[138,47,151,46,"data"],[138,51,151,50],[138,53,151,52],[139,4,152,2],[139,8,152,6,"darkCount"],[139,17,152,15],[139,20,152,18],[139,21,152,19],[140,4,153,2],[140,10,153,8,"modulesCount"],[140,22,153,20],[140,25,153,23,"data"],[140,29,153,27],[140,30,153,28,"data"],[140,34,153,32],[140,35,153,33,"length"],[140,41,153,39],[141,4,155,2],[141,9,155,7],[141,13,155,11,"i"],[141,14,155,12],[141,17,155,15],[141,18,155,16],[141,20,155,18,"i"],[141,21,155,19],[141,24,155,22,"modulesCount"],[141,36,155,34],[141,38,155,36,"i"],[141,39,155,37],[141,41,155,39],[141,43,155,41,"darkCount"],[141,52,155,50],[141,56,155,54,"data"],[141,60,155,58],[141,61,155,59,"data"],[141,65,155,63],[141,66,155,64,"i"],[141,67,155,65],[141,68,155,66],[142,4,157,2],[142,10,157,8,"k"],[142,11,157,9],[142,14,157,12,"Math"],[142,18,157,16],[142,19,157,17,"abs"],[142,22,157,20],[142,23,157,21,"Math"],[142,27,157,25],[142,28,157,26,"ceil"],[142,32,157,30],[142,33,157,32,"darkCount"],[142,42,157,41],[142,45,157,44],[142,48,157,47],[142,51,157,50,"modulesCount"],[142,63,157,62],[142,66,157,66],[142,67,157,67],[142,68,157,68],[142,71,157,71],[142,73,157,73],[142,74,157,74],[143,4,159,2],[143,11,159,9,"k"],[143,12,159,10],[143,15,159,13,"PenaltyScores"],[143,28,159,26],[143,29,159,27,"N4"],[143,31,159,29],[144,2,160,0],[144,3,160,1],[146,2,162,0],[147,0,163,0],[148,0,164,0],[149,0,165,0],[150,0,166,0],[151,0,167,0],[152,0,168,0],[153,0,169,0],[154,2,170,0],[154,11,170,9,"getMaskAt"],[154,20,170,18,"getMaskAt"],[154,21,170,20,"maskPattern"],[154,32,170,31],[154,34,170,33,"i"],[154,35,170,34],[154,37,170,36,"j"],[154,38,170,37],[154,40,170,39],[155,4,171,2],[155,12,171,10,"maskPattern"],[155,23,171,21],[156,6,172,4],[156,11,172,9,"exports"],[156,18,172,16],[156,19,172,17,"Patterns"],[156,27,172,25],[156,28,172,26,"PATTERN000"],[156,38,172,36],[157,8,172,38],[157,15,172,45],[157,16,172,46,"i"],[157,17,172,47],[157,20,172,50,"j"],[157,21,172,51],[157,25,172,55],[157,26,172,56],[157,31,172,61],[157,32,172,62],[158,6,173,4],[158,11,173,9,"exports"],[158,18,173,16],[158,19,173,17,"Patterns"],[158,27,173,25],[158,28,173,26,"PATTERN001"],[158,38,173,36],[159,8,173,38],[159,15,173,45,"i"],[159,16,173,46],[159,19,173,49],[159,20,173,50],[159,25,173,55],[159,26,173,56],[160,6,174,4],[160,11,174,9,"exports"],[160,18,174,16],[160,19,174,17,"Patterns"],[160,27,174,25],[160,28,174,26,"PATTERN010"],[160,38,174,36],[161,8,174,38],[161,15,174,45,"j"],[161,16,174,46],[161,19,174,49],[161,20,174,50],[161,25,174,55],[161,26,174,56],[162,6,175,4],[162,11,175,9,"exports"],[162,18,175,16],[162,19,175,17,"Patterns"],[162,27,175,25],[162,28,175,26,"PATTERN011"],[162,38,175,36],[163,8,175,38],[163,15,175,45],[163,16,175,46,"i"],[163,17,175,47],[163,20,175,50,"j"],[163,21,175,51],[163,25,175,55],[163,26,175,56],[163,31,175,61],[163,32,175,62],[164,6,176,4],[164,11,176,9,"exports"],[164,18,176,16],[164,19,176,17,"Patterns"],[164,27,176,25],[164,28,176,26,"PATTERN100"],[164,38,176,36],[165,8,176,38],[165,15,176,45],[165,16,176,46,"Math"],[165,20,176,50],[165,21,176,51,"floor"],[165,26,176,56],[165,27,176,57,"i"],[165,28,176,58],[165,31,176,61],[165,32,176,62],[165,33,176,63],[165,36,176,66,"Math"],[165,40,176,70],[165,41,176,71,"floor"],[165,46,176,76],[165,47,176,77,"j"],[165,48,176,78],[165,51,176,81],[165,52,176,82],[165,53,176,83],[165,57,176,87],[165,58,176,88],[165,63,176,93],[165,64,176,94],[166,6,177,4],[166,11,177,9,"exports"],[166,18,177,16],[166,19,177,17,"Patterns"],[166,27,177,25],[166,28,177,26,"PATTERN101"],[166,38,177,36],[167,8,177,38],[167,15,177,46,"i"],[167,16,177,47],[167,19,177,50,"j"],[167,20,177,51],[167,23,177,55],[167,24,177,56],[167,27,177,60,"i"],[167,28,177,61],[167,31,177,64,"j"],[167,32,177,65],[167,35,177,69],[167,36,177,70],[167,41,177,75],[167,42,177,76],[168,6,178,4],[168,11,178,9,"exports"],[168,18,178,16],[168,19,178,17,"Patterns"],[168,27,178,25],[168,28,178,26,"PATTERN110"],[168,38,178,36],[169,8,178,38],[169,15,178,45],[169,16,178,47,"i"],[169,17,178,48],[169,20,178,51,"j"],[169,21,178,52],[169,24,178,56],[169,25,178,57],[169,28,178,61,"i"],[169,29,178,62],[169,32,178,65,"j"],[169,33,178,66],[169,36,178,70],[169,37,178,71],[169,41,178,75],[169,42,178,76],[169,47,178,81],[169,48,178,82],[170,6,179,4],[170,11,179,9,"exports"],[170,18,179,16],[170,19,179,17,"Patterns"],[170,27,179,25],[170,28,179,26,"PATTERN111"],[170,38,179,36],[171,8,179,38],[171,15,179,45],[171,16,179,47,"i"],[171,17,179,48],[171,20,179,51,"j"],[171,21,179,52],[171,24,179,56],[171,25,179,57],[171,28,179,60],[171,29,179,61,"i"],[171,30,179,62],[171,33,179,65,"j"],[171,34,179,66],[171,38,179,70],[171,39,179,71],[171,43,179,75],[171,44,179,76],[171,49,179,81],[171,50,179,82],[172,6,181,4],[173,8,181,13],[173,14,181,19],[173,18,181,23,"Error"],[173,23,181,28],[173,24,181,29],[173,42,181,47],[173,45,181,50,"maskPattern"],[173,56,181,61],[173,57,181,62],[174,4,182,2],[175,2,183,0],[177,2,185,0],[178,0,186,0],[179,0,187,0],[180,0,188,0],[181,0,189,0],[182,0,190,0],[183,2,191,0,"exports"],[183,9,191,7],[183,10,191,8,"applyMask"],[183,19,191,17],[183,22,191,20],[183,31,191,29,"applyMask"],[183,40,191,38,"applyMask"],[183,41,191,40,"pattern"],[183,48,191,47],[183,50,191,49,"data"],[183,54,191,53],[183,56,191,55],[184,4,192,2],[184,10,192,8,"size"],[184,14,192,12],[184,17,192,15,"data"],[184,21,192,19],[184,22,192,20,"size"],[184,26,192,24],[185,4,194,2],[185,9,194,7],[185,13,194,11,"col"],[185,16,194,14],[185,19,194,17],[185,20,194,18],[185,22,194,20,"col"],[185,25,194,23],[185,28,194,26,"size"],[185,32,194,30],[185,34,194,32,"col"],[185,37,194,35],[185,39,194,37],[185,41,194,39],[186,6,195,4],[186,11,195,9],[186,15,195,13,"row"],[186,18,195,16],[186,21,195,19],[186,22,195,20],[186,24,195,22,"row"],[186,27,195,25],[186,30,195,28,"size"],[186,34,195,32],[186,36,195,34,"row"],[186,39,195,37],[186,41,195,39],[186,43,195,41],[187,8,196,6],[187,12,196,10,"data"],[187,16,196,14],[187,17,196,15,"isReserved"],[187,27,196,25],[187,28,196,26,"row"],[187,31,196,29],[187,33,196,31,"col"],[187,36,196,34],[187,37,196,35],[187,39,196,37],[188,8,197,6,"data"],[188,12,197,10],[188,13,197,11,"xor"],[188,16,197,14],[188,17,197,15,"row"],[188,20,197,18],[188,22,197,20,"col"],[188,25,197,23],[188,27,197,25,"getMaskAt"],[188,36,197,34],[188,37,197,35,"pattern"],[188,44,197,42],[188,46,197,44,"row"],[188,49,197,47],[188,51,197,49,"col"],[188,54,197,52],[188,55,197,53],[188,56,197,54],[189,6,198,4],[190,4,199,2],[191,2,200,0],[191,3,200,1],[193,2,202,0],[194,0,203,0],[195,0,204,0],[196,0,205,0],[197,0,206,0],[198,0,207,0],[199,2,208,0,"exports"],[199,9,208,7],[199,10,208,8,"getBestMask"],[199,21,208,19],[199,24,208,22],[199,33,208,31,"getBestMask"],[199,44,208,42,"getBestMask"],[199,45,208,44,"data"],[199,49,208,48],[199,51,208,50,"setupFormatFunc"],[199,66,208,65],[199,68,208,67],[200,4,209,2],[200,10,209,8,"numPatterns"],[200,21,209,19],[200,24,209,22,"Object"],[200,30,209,28],[200,31,209,29,"keys"],[200,35,209,33],[200,36,209,34,"exports"],[200,43,209,41],[200,44,209,42,"Patterns"],[200,52,209,50],[200,53,209,51],[200,54,209,52,"length"],[200,60,209,58],[201,4,210,2],[201,8,210,6,"bestPattern"],[201,19,210,17],[201,22,210,20],[201,23,210,21],[202,4,211,2],[202,8,211,6,"lowerPenalty"],[202,20,211,18],[202,23,211,21,"Infinity"],[202,31,211,29],[203,4,213,2],[203,9,213,7],[203,13,213,11,"p"],[203,14,213,12],[203,17,213,15],[203,18,213,16],[203,20,213,18,"p"],[203,21,213,19],[203,24,213,22,"numPatterns"],[203,35,213,33],[203,37,213,35,"p"],[203,38,213,36],[203,40,213,38],[203,42,213,40],[204,6,214,4,"setupFormatFunc"],[204,21,214,19],[204,22,214,20,"p"],[204,23,214,21],[204,24,214,22],[205,6,215,4,"exports"],[205,13,215,11],[205,14,215,12,"applyMask"],[205,23,215,21],[205,24,215,22,"p"],[205,25,215,23],[205,27,215,25,"data"],[205,31,215,29],[205,32,215,30],[207,6,217,4],[208,6,218,4],[208,12,218,10,"penalty"],[208,19,218,17],[208,22,219,6,"exports"],[208,29,219,13],[208,30,219,14,"getPenaltyN1"],[208,42,219,26],[208,43,219,27,"data"],[208,47,219,31],[208,48,219,32],[208,51,220,6,"exports"],[208,58,220,13],[208,59,220,14,"getPenaltyN2"],[208,71,220,26],[208,72,220,27,"data"],[208,76,220,31],[208,77,220,32],[208,80,221,6,"exports"],[208,87,221,13],[208,88,221,14,"getPenaltyN3"],[208,100,221,26],[208,101,221,27,"data"],[208,105,221,31],[208,106,221,32],[208,109,222,6,"exports"],[208,116,222,13],[208,117,222,14,"getPenaltyN4"],[208,129,222,26],[208,130,222,27,"data"],[208,134,222,31],[208,135,222,32],[210,6,224,4],[211,6,225,4,"exports"],[211,13,225,11],[211,14,225,12,"applyMask"],[211,23,225,21],[211,24,225,22,"p"],[211,25,225,23],[211,27,225,25,"data"],[211,31,225,29],[211,32,225,30],[212,6,227,4],[212,10,227,8,"penalty"],[212,17,227,15],[212,20,227,18,"lowerPenalty"],[212,32,227,30],[212,34,227,32],[213,8,228,6,"lowerPenalty"],[213,20,228,18],[213,23,228,21,"penalty"],[213,30,228,28],[214,8,229,6,"bestPattern"],[214,19,229,17],[214,22,229,20,"p"],[214,23,229,21],[215,6,230,4],[216,4,231,2],[217,4,233,2],[217,11,233,9,"bestPattern"],[217,22,233,20],[218,2,234,0],[218,3,234,1],[219,0,234,1],[219,3]],"functionMap":{"names":["<global>","isValid","from","getPenaltyN1","getPenaltyN2","getPenaltyN3","getPenaltyN4","getMaskAt","applyMask","getBestMask"],"mappings":"AAA;kBCgC;CDE;eES;CFE;uBGS;CHqC;uBIO;CJgB;uBKQ;CLkB;uBMU;CNS;AOU;CPa;oBQQ;CRS;sBSQ;CT0B"},"hasCjsExports":true},"type":"js/module"}]}