{"dependencies":[{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"8kHEUlKQMmxShjK4DMjntIDDVoM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"RVGridLayoutManagerImpl\", {\n    enumerable: true,\n    get: function () {\n      return RVGridLayoutManagerImpl;\n    }\n  });\n  var _LayoutManager = require(_dependencyMap[0], \"./LayoutManager\");\n  /**\n   * GridLayoutManager implementation that arranges items in a grid pattern.\n   * Items are placed in rows and columns, with support for items spanning multiple columns.\n   */\n  class RVGridLayoutManagerImpl extends _LayoutManager.RVLayoutManager {\n    constructor(params, previousLayoutManager) {\n      super(params, previousLayoutManager);\n      /** If there's a span change for grid layout, we need to recompute all the widths */\n      this.fullRelayoutRequired = false;\n      this.boundedSize = params.windowSize.width;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    updateLayoutParams(params) {\n      const prevNumColumns = this.maxColumns;\n      super.updateLayoutParams(params);\n      if (this.boundedSize !== params.windowSize.width || prevNumColumns !== params.maxColumns) {\n        this.boundedSize = params.windowSize.width;\n        if (this.layouts.length > 0) {\n          // update all widths\n          this.updateAllWidths();\n          this.recomputeLayouts(0, this.layouts.length - 1);\n          this.requiresRepaint = true;\n        }\n      }\n    }\n    /**\n     * Processes layout information for items, updating their dimensions.\n     * @param layoutInfo Array of layout information for items\n     * @param itemCount Total number of items in the list\n     */\n    processLayoutInfo(layoutInfo, itemCount) {\n      for (const info of layoutInfo) {\n        const {\n          index,\n          dimensions\n        } = info;\n        const layout = this.layouts[index];\n        layout.height = dimensions.height;\n        layout.isHeightMeasured = true;\n        layout.isWidthMeasured = true;\n      }\n      // TODO: Can be optimized\n      if (this.fullRelayoutRequired) {\n        this.updateAllWidths();\n        this.fullRelayoutRequired = false;\n        return 0;\n      }\n    }\n    /**\n     * Estimates layout dimensions for an item at the given index.\n     * @param index Index of the item to estimate layout for\n     */\n    estimateLayout(index) {\n      const layout = this.layouts[index];\n      layout.width = this.getWidth(index);\n      layout.height = this.getEstimatedHeight(index);\n      layout.isWidthMeasured = true;\n      layout.enforcedWidth = true;\n    }\n    /**\n     * Handles span change for an item.\n     * @param index Index of the item\n     */\n    handleSpanChange(index) {\n      this.fullRelayoutRequired = true;\n    }\n    /**\n     * Returns the total size of the layout area.\n     * @returns RVDimension containing width and height of the layout\n     */\n    getLayoutSize() {\n      if (this.layouts.length === 0) return {\n        width: 0,\n        height: 0\n      };\n      const totalHeight = this.computeTotalHeightTillRow(this.layouts.length - 1);\n      return {\n        width: this.boundedSize,\n        height: totalHeight\n      };\n    }\n    /**\n     * Recomputes layouts for items in the given range.\n     * @param startIndex Starting index of items to recompute\n     * @param endIndex Ending index of items to recompute\n     */\n    recomputeLayouts(startIndex, endIndex) {\n      const newStartIndex = this.locateFirstIndexInRow(Math.max(0, startIndex - 1));\n      const startVal = this.getLayout(newStartIndex);\n      let startX = startVal.x;\n      let startY = startVal.y;\n      for (let i = newStartIndex; i <= endIndex; i++) {\n        const layout = this.getLayout(i);\n        if (!this.checkBounds(startX, layout.width)) {\n          const tallestItem = this.processAndReturnTallestItemInRow(i - 1);\n          startY = tallestItem.y + tallestItem.height;\n          startX = 0;\n        }\n        layout.x = startX;\n        layout.y = startY;\n        startX += layout.width;\n      }\n      if (endIndex === this.layouts.length - 1) {\n        this.processAndReturnTallestItemInRow(endIndex);\n      }\n    }\n    /**\n     * Calculates the width of an item based on its span.\n     * @param index Index of the item\n     * @returns Width of the item\n     */\n    getWidth(index) {\n      return this.boundedSize / this.maxColumns * this.getSpan(index);\n    }\n    /**\n     * Processes items in a row and returns the tallest item.\n     * Also handles height normalization for items in the same row.\n     * Tallest item per row helps in forcing tallest items height on neighbouring items.\n     * @param endIndex Index of the last item in the row\n     * @returns The tallest item in the row\n     */\n    processAndReturnTallestItemInRow(endIndex) {\n      var _a, _b;\n      const startIndex = this.locateFirstIndexInRow(endIndex);\n      let tallestItem;\n      let maxHeight = 0;\n      let i = startIndex;\n      let isMeasured = false;\n      while (i <= endIndex) {\n        const layout = this.layouts[i];\n        isMeasured = isMeasured || Boolean(layout.isHeightMeasured);\n        maxHeight = Math.max(maxHeight, layout.height);\n        if (layout.height > ((_a = layout.minHeight) !== null && _a !== void 0 ? _a : 0) && layout.height > ((_b = tallestItem === null || tallestItem === void 0 ? void 0 : tallestItem.height) !== null && _b !== void 0 ? _b : 0)) {\n          tallestItem = layout;\n        }\n        i++;\n        if (i >= this.layouts.length) {\n          break;\n        }\n      }\n      if (!tallestItem && maxHeight > 0) {\n        maxHeight = Number.MAX_SAFE_INTEGER;\n      }\n      tallestItem = tallestItem !== null && tallestItem !== void 0 ? tallestItem : this.layouts[startIndex];\n      if (!isMeasured) {\n        return tallestItem;\n      }\n      if (tallestItem) {\n        let targetHeight = tallestItem.height;\n        if (maxHeight - tallestItem.height > 1) {\n          targetHeight = 0;\n          this.requiresRepaint = true;\n        }\n        i = startIndex;\n        while (i <= endIndex) {\n          this.layouts[i].minHeight = targetHeight;\n          if (targetHeight > 0) {\n            this.layouts[i].height = targetHeight;\n          }\n          i++;\n          if (i >= this.layouts.length) {\n            break;\n          }\n        }\n        tallestItem.minHeight = 0;\n      }\n      return tallestItem;\n    }\n    /**\n     * Computes the total height of the layout.\n     * @param endIndex Index of the last item in the row\n     * @returns Total height of the layout\n     */\n    computeTotalHeightTillRow(endIndex) {\n      const startIndex = this.locateFirstIndexInRow(endIndex);\n      const y = this.layouts[startIndex].y;\n      let maxHeight = 0;\n      let i = startIndex;\n      while (i <= endIndex) {\n        maxHeight = Math.max(maxHeight, this.layouts[i].height);\n        i++;\n        if (i >= this.layouts.length) {\n          break;\n        }\n      }\n      return y + maxHeight;\n    }\n    updateAllWidths() {\n      for (let i = 0; i < this.layouts.length; i++) {\n        this.layouts[i].width = this.getWidth(i);\n      }\n    }\n    /**\n     * Checks if an item can fit within the bounded width.\n     * @param itemX Starting X position of the item\n     * @param width Width of the item\n     * @returns True if the item fits within bounds\n     */\n    checkBounds(itemX, width) {\n      return itemX + width <= this.boundedSize + 0.9;\n    }\n    /**\n     * Locates the index of the first item in the current row.\n     * @param itemIndex Index to start searching from\n     * @returns Index of the first item in the row\n     */\n    locateFirstIndexInRow(itemIndex) {\n      if (itemIndex === 0) {\n        return 0;\n      }\n      let i = itemIndex;\n      for (; i >= 0; i--) {\n        if (this.layouts[i].x === 0) {\n          break;\n        }\n      }\n      return Math.max(i, 0);\n    }\n  }\n});","lineCount":236,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"RVGridLayoutManagerImpl"],[10,36,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[13,6,1,0,"_LayoutManager"],[13,20,1,0],[13,23,1,0,"require"],[13,30,1,0],[13,31,1,0,"_dependencyMap"],[13,45,1,0],[14,2,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,2,6,7],[18,8,6,13,"RVGridLayoutManagerImpl"],[18,31,6,36],[18,40,6,45,"RVLayoutManager"],[18,54,6,60],[18,55,6,60,"RVLayoutManager"],[18,70,6,60],[18,71,6,61],[19,4,7,4,"constructor"],[19,15,7,15,"constructor"],[19,16,7,16,"params"],[19,22,7,22],[19,24,7,24,"previousLayoutManager"],[19,45,7,45],[19,47,7,47],[20,6,8,8],[20,11,8,13],[20,12,8,14,"params"],[20,18,8,20],[20,20,8,22,"previousLayoutManager"],[20,41,8,43],[20,42,8,44],[21,6,9,8],[22,6,10,8],[22,10,10,12],[22,11,10,13,"fullRelayoutRequired"],[22,31,10,33],[22,34,10,36],[22,39,10,41],[23,6,11,8],[23,10,11,12],[23,11,11,13,"boundedSize"],[23,22,11,24],[23,25,11,27,"params"],[23,31,11,33],[23,32,11,34,"windowSize"],[23,42,11,44],[23,43,11,45,"width"],[23,48,11,50],[24,4,12,4],[25,4,13,4],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,4,17,4,"updateLayoutParams"],[29,22,17,22,"updateLayoutParams"],[29,23,17,23,"params"],[29,29,17,29],[29,31,17,31],[30,6,18,8],[30,12,18,14,"prevNumColumns"],[30,26,18,28],[30,29,18,31],[30,33,18,35],[30,34,18,36,"maxColumns"],[30,44,18,46],[31,6,19,8],[31,11,19,13],[31,12,19,14,"updateLayoutParams"],[31,30,19,32],[31,31,19,33,"params"],[31,37,19,39],[31,38,19,40],[32,6,20,8],[32,10,20,12],[32,14,20,16],[32,15,20,17,"boundedSize"],[32,26,20,28],[32,31,20,33,"params"],[32,37,20,39],[32,38,20,40,"windowSize"],[32,48,20,50],[32,49,20,51,"width"],[32,54,20,56],[32,58,21,12,"prevNumColumns"],[32,72,21,26],[32,77,21,31,"params"],[32,83,21,37],[32,84,21,38,"maxColumns"],[32,94,21,48],[32,96,21,50],[33,8,22,12],[33,12,22,16],[33,13,22,17,"boundedSize"],[33,24,22,28],[33,27,22,31,"params"],[33,33,22,37],[33,34,22,38,"windowSize"],[33,44,22,48],[33,45,22,49,"width"],[33,50,22,54],[34,8,23,12],[34,12,23,16],[34,16,23,20],[34,17,23,21,"layouts"],[34,24,23,28],[34,25,23,29,"length"],[34,31,23,35],[34,34,23,38],[34,35,23,39],[34,37,23,41],[35,10,24,16],[36,10,25,16],[36,14,25,20],[36,15,25,21,"updateAllWidths"],[36,30,25,36],[36,31,25,37],[36,32,25,38],[37,10,26,16],[37,14,26,20],[37,15,26,21,"recomputeLayouts"],[37,31,26,37],[37,32,26,38],[37,33,26,39],[37,35,26,41],[37,39,26,45],[37,40,26,46,"layouts"],[37,47,26,53],[37,48,26,54,"length"],[37,54,26,60],[37,57,26,63],[37,58,26,64],[37,59,26,65],[38,10,27,16],[38,14,27,20],[38,15,27,21,"requiresRepaint"],[38,30,27,36],[38,33,27,39],[38,37,27,43],[39,8,28,12],[40,6,29,8],[41,4,30,4],[42,4,31,4],[43,0,32,0],[44,0,33,0],[45,0,34,0],[46,0,35,0],[47,4,36,4,"processLayoutInfo"],[47,21,36,21,"processLayoutInfo"],[47,22,36,22,"layoutInfo"],[47,32,36,32],[47,34,36,34,"itemCount"],[47,43,36,43],[47,45,36,45],[48,6,37,8],[48,11,37,13],[48,17,37,19,"info"],[48,21,37,23],[48,25,37,27,"layoutInfo"],[48,35,37,37],[48,37,37,39],[49,8,38,12],[49,14,38,18],[50,10,38,20,"index"],[50,15,38,25],[51,10,38,27,"dimensions"],[52,8,38,38],[52,9,38,39],[52,12,38,42,"info"],[52,16,38,46],[53,8,39,12],[53,14,39,18,"layout"],[53,20,39,24],[53,23,39,27],[53,27,39,31],[53,28,39,32,"layouts"],[53,35,39,39],[53,36,39,40,"index"],[53,41,39,45],[53,42,39,46],[54,8,40,12,"layout"],[54,14,40,18],[54,15,40,19,"height"],[54,21,40,25],[54,24,40,28,"dimensions"],[54,34,40,38],[54,35,40,39,"height"],[54,41,40,45],[55,8,41,12,"layout"],[55,14,41,18],[55,15,41,19,"isHeightMeasured"],[55,31,41,35],[55,34,41,38],[55,38,41,42],[56,8,42,12,"layout"],[56,14,42,18],[56,15,42,19,"isWidthMeasured"],[56,30,42,34],[56,33,42,37],[56,37,42,41],[57,6,43,8],[58,6,44,8],[59,6,45,8],[59,10,45,12],[59,14,45,16],[59,15,45,17,"fullRelayoutRequired"],[59,35,45,37],[59,37,45,39],[60,8,46,12],[60,12,46,16],[60,13,46,17,"updateAllWidths"],[60,28,46,32],[60,29,46,33],[60,30,46,34],[61,8,47,12],[61,12,47,16],[61,13,47,17,"fullRelayoutRequired"],[61,33,47,37],[61,36,47,40],[61,41,47,45],[62,8,48,12],[62,15,48,19],[62,16,48,20],[63,6,49,8],[64,4,50,4],[65,4,51,4],[66,0,52,0],[67,0,53,0],[68,0,54,0],[69,4,55,4,"estimateLayout"],[69,18,55,18,"estimateLayout"],[69,19,55,19,"index"],[69,24,55,24],[69,26,55,26],[70,6,56,8],[70,12,56,14,"layout"],[70,18,56,20],[70,21,56,23],[70,25,56,27],[70,26,56,28,"layouts"],[70,33,56,35],[70,34,56,36,"index"],[70,39,56,41],[70,40,56,42],[71,6,57,8,"layout"],[71,12,57,14],[71,13,57,15,"width"],[71,18,57,20],[71,21,57,23],[71,25,57,27],[71,26,57,28,"getWidth"],[71,34,57,36],[71,35,57,37,"index"],[71,40,57,42],[71,41,57,43],[72,6,58,8,"layout"],[72,12,58,14],[72,13,58,15,"height"],[72,19,58,21],[72,22,58,24],[72,26,58,28],[72,27,58,29,"getEstimatedHeight"],[72,45,58,47],[72,46,58,48,"index"],[72,51,58,53],[72,52,58,54],[73,6,59,8,"layout"],[73,12,59,14],[73,13,59,15,"isWidthMeasured"],[73,28,59,30],[73,31,59,33],[73,35,59,37],[74,6,60,8,"layout"],[74,12,60,14],[74,13,60,15,"enforcedWidth"],[74,26,60,28],[74,29,60,31],[74,33,60,35],[75,4,61,4],[76,4,62,4],[77,0,63,0],[78,0,64,0],[79,0,65,0],[80,4,66,4,"handleSpanChange"],[80,20,66,20,"handleSpanChange"],[80,21,66,21,"index"],[80,26,66,26],[80,28,66,28],[81,6,67,8],[81,10,67,12],[81,11,67,13,"fullRelayoutRequired"],[81,31,67,33],[81,34,67,36],[81,38,67,40],[82,4,68,4],[83,4,69,4],[84,0,70,0],[85,0,71,0],[86,0,72,0],[87,4,73,4,"getLayoutSize"],[87,17,73,17,"getLayoutSize"],[87,18,73,17],[87,20,73,20],[88,6,74,8],[88,10,74,12],[88,14,74,16],[88,15,74,17,"layouts"],[88,22,74,24],[88,23,74,25,"length"],[88,29,74,31],[88,34,74,36],[88,35,74,37],[88,37,75,12],[88,44,75,19],[89,8,75,21,"width"],[89,13,75,26],[89,15,75,28],[89,16,75,29],[90,8,75,31,"height"],[90,14,75,37],[90,16,75,39],[91,6,75,41],[91,7,75,42],[92,6,76,8],[92,12,76,14,"totalHeight"],[92,23,76,25],[92,26,76,28],[92,30,76,32],[92,31,76,33,"computeTotalHeightTillRow"],[92,56,76,58],[92,57,76,59],[92,61,76,63],[92,62,76,64,"layouts"],[92,69,76,71],[92,70,76,72,"length"],[92,76,76,78],[92,79,76,81],[92,80,76,82],[92,81,76,83],[93,6,77,8],[93,13,77,15],[94,8,78,12,"width"],[94,13,78,17],[94,15,78,19],[94,19,78,23],[94,20,78,24,"boundedSize"],[94,31,78,35],[95,8,79,12,"height"],[95,14,79,18],[95,16,79,20,"totalHeight"],[96,6,80,8],[96,7,80,9],[97,4,81,4],[98,4,82,4],[99,0,83,0],[100,0,84,0],[101,0,85,0],[102,0,86,0],[103,4,87,4,"recomputeLayouts"],[103,20,87,20,"recomputeLayouts"],[103,21,87,21,"startIndex"],[103,31,87,31],[103,33,87,33,"endIndex"],[103,41,87,41],[103,43,87,43],[104,6,88,8],[104,12,88,14,"newStartIndex"],[104,25,88,27],[104,28,88,30],[104,32,88,34],[104,33,88,35,"locateFirstIndexInRow"],[104,54,88,56],[104,55,88,57,"Math"],[104,59,88,61],[104,60,88,62,"max"],[104,63,88,65],[104,64,88,66],[104,65,88,67],[104,67,88,69,"startIndex"],[104,77,88,79],[104,80,88,82],[104,81,88,83],[104,82,88,84],[104,83,88,85],[105,6,89,8],[105,12,89,14,"startVal"],[105,20,89,22],[105,23,89,25],[105,27,89,29],[105,28,89,30,"getLayout"],[105,37,89,39],[105,38,89,40,"newStartIndex"],[105,51,89,53],[105,52,89,54],[106,6,90,8],[106,10,90,12,"startX"],[106,16,90,18],[106,19,90,21,"startVal"],[106,27,90,29],[106,28,90,30,"x"],[106,29,90,31],[107,6,91,8],[107,10,91,12,"startY"],[107,16,91,18],[107,19,91,21,"startVal"],[107,27,91,29],[107,28,91,30,"y"],[107,29,91,31],[108,6,92,8],[108,11,92,13],[108,15,92,17,"i"],[108,16,92,18],[108,19,92,21,"newStartIndex"],[108,32,92,34],[108,34,92,36,"i"],[108,35,92,37],[108,39,92,41,"endIndex"],[108,47,92,49],[108,49,92,51,"i"],[108,50,92,52],[108,52,92,54],[108,54,92,56],[109,8,93,12],[109,14,93,18,"layout"],[109,20,93,24],[109,23,93,27],[109,27,93,31],[109,28,93,32,"getLayout"],[109,37,93,41],[109,38,93,42,"i"],[109,39,93,43],[109,40,93,44],[110,8,94,12],[110,12,94,16],[110,13,94,17],[110,17,94,21],[110,18,94,22,"checkBounds"],[110,29,94,33],[110,30,94,34,"startX"],[110,36,94,40],[110,38,94,42,"layout"],[110,44,94,48],[110,45,94,49,"width"],[110,50,94,54],[110,51,94,55],[110,53,94,57],[111,10,95,16],[111,16,95,22,"tallestItem"],[111,27,95,33],[111,30,95,36],[111,34,95,40],[111,35,95,41,"processAndReturnTallestItemInRow"],[111,67,95,73],[111,68,95,74,"i"],[111,69,95,75],[111,72,95,78],[111,73,95,79],[111,74,95,80],[112,10,96,16,"startY"],[112,16,96,22],[112,19,96,25,"tallestItem"],[112,30,96,36],[112,31,96,37,"y"],[112,32,96,38],[112,35,96,41,"tallestItem"],[112,46,96,52],[112,47,96,53,"height"],[112,53,96,59],[113,10,97,16,"startX"],[113,16,97,22],[113,19,97,25],[113,20,97,26],[114,8,98,12],[115,8,99,12,"layout"],[115,14,99,18],[115,15,99,19,"x"],[115,16,99,20],[115,19,99,23,"startX"],[115,25,99,29],[116,8,100,12,"layout"],[116,14,100,18],[116,15,100,19,"y"],[116,16,100,20],[116,19,100,23,"startY"],[116,25,100,29],[117,8,101,12,"startX"],[117,14,101,18],[117,18,101,22,"layout"],[117,24,101,28],[117,25,101,29,"width"],[117,30,101,34],[118,6,102,8],[119,6,103,8],[119,10,103,12,"endIndex"],[119,18,103,20],[119,23,103,25],[119,27,103,29],[119,28,103,30,"layouts"],[119,35,103,37],[119,36,103,38,"length"],[119,42,103,44],[119,45,103,47],[119,46,103,48],[119,48,103,50],[120,8,104,12],[120,12,104,16],[120,13,104,17,"processAndReturnTallestItemInRow"],[120,45,104,49],[120,46,104,50,"endIndex"],[120,54,104,58],[120,55,104,59],[121,6,105,8],[122,4,106,4],[123,4,107,4],[124,0,108,0],[125,0,109,0],[126,0,110,0],[127,0,111,0],[128,4,112,4,"getWidth"],[128,12,112,12,"getWidth"],[128,13,112,13,"index"],[128,18,112,18],[128,20,112,20],[129,6,113,8],[129,13,113,16],[129,17,113,20],[129,18,113,21,"boundedSize"],[129,29,113,32],[129,32,113,35],[129,36,113,39],[129,37,113,40,"maxColumns"],[129,47,113,50],[129,50,113,54],[129,54,113,58],[129,55,113,59,"getSpan"],[129,62,113,66],[129,63,113,67,"index"],[129,68,113,72],[129,69,113,73],[130,4,114,4],[131,4,115,4],[132,0,116,0],[133,0,117,0],[134,0,118,0],[135,0,119,0],[136,0,120,0],[137,0,121,0],[138,4,122,4,"processAndReturnTallestItemInRow"],[138,36,122,36,"processAndReturnTallestItemInRow"],[138,37,122,37,"endIndex"],[138,45,122,45],[138,47,122,47],[139,6,123,8],[139,10,123,12,"_a"],[139,12,123,14],[139,14,123,16,"_b"],[139,16,123,18],[140,6,124,8],[140,12,124,14,"startIndex"],[140,22,124,24],[140,25,124,27],[140,29,124,31],[140,30,124,32,"locateFirstIndexInRow"],[140,51,124,53],[140,52,124,54,"endIndex"],[140,60,124,62],[140,61,124,63],[141,6,125,8],[141,10,125,12,"tallestItem"],[141,21,125,23],[142,6,126,8],[142,10,126,12,"maxHeight"],[142,19,126,21],[142,22,126,24],[142,23,126,25],[143,6,127,8],[143,10,127,12,"i"],[143,11,127,13],[143,14,127,16,"startIndex"],[143,24,127,26],[144,6,128,8],[144,10,128,12,"isMeasured"],[144,20,128,22],[144,23,128,25],[144,28,128,30],[145,6,129,8],[145,13,129,15,"i"],[145,14,129,16],[145,18,129,20,"endIndex"],[145,26,129,28],[145,28,129,30],[146,8,130,12],[146,14,130,18,"layout"],[146,20,130,24],[146,23,130,27],[146,27,130,31],[146,28,130,32,"layouts"],[146,35,130,39],[146,36,130,40,"i"],[146,37,130,41],[146,38,130,42],[147,8,131,12,"isMeasured"],[147,18,131,22],[147,21,131,25,"isMeasured"],[147,31,131,35],[147,35,131,39,"Boolean"],[147,42,131,46],[147,43,131,47,"layout"],[147,49,131,53],[147,50,131,54,"isHeightMeasured"],[147,66,131,70],[147,67,131,71],[148,8,132,12,"maxHeight"],[148,17,132,21],[148,20,132,24,"Math"],[148,24,132,28],[148,25,132,29,"max"],[148,28,132,32],[148,29,132,33,"maxHeight"],[148,38,132,42],[148,40,132,44,"layout"],[148,46,132,50],[148,47,132,51,"height"],[148,53,132,57],[148,54,132,58],[149,8,133,12],[149,12,133,16,"layout"],[149,18,133,22],[149,19,133,23,"height"],[149,25,133,29],[149,29,133,33],[149,30,133,34,"_a"],[149,32,133,36],[149,35,133,39,"layout"],[149,41,133,45],[149,42,133,46,"minHeight"],[149,51,133,55],[149,57,133,61],[149,61,133,65],[149,65,133,69,"_a"],[149,67,133,71],[149,72,133,76],[149,77,133,81],[149,78,133,82],[149,81,133,85,"_a"],[149,83,133,87],[149,86,133,90],[149,87,133,91],[149,88,133,92],[149,92,134,16,"layout"],[149,98,134,22],[149,99,134,23,"height"],[149,105,134,29],[149,109,134,33],[149,110,134,34,"_b"],[149,112,134,36],[149,115,134,39,"tallestItem"],[149,126,134,50],[149,131,134,55],[149,135,134,59],[149,139,134,63,"tallestItem"],[149,150,134,74],[149,155,134,79],[149,160,134,84],[149,161,134,85],[149,164,134,88],[149,169,134,93],[149,170,134,94],[149,173,134,97,"tallestItem"],[149,184,134,108],[149,185,134,109,"height"],[149,191,134,115],[149,197,134,121],[149,201,134,125],[149,205,134,129,"_b"],[149,207,134,131],[149,212,134,136],[149,217,134,141],[149,218,134,142],[149,221,134,145,"_b"],[149,223,134,147],[149,226,134,150],[149,227,134,151],[149,228,134,152],[149,230,134,154],[150,10,135,16,"tallestItem"],[150,21,135,27],[150,24,135,30,"layout"],[150,30,135,36],[151,8,136,12],[152,8,137,12,"i"],[152,9,137,13],[152,11,137,15],[153,8,138,12],[153,12,138,16,"i"],[153,13,138,17],[153,17,138,21],[153,21,138,25],[153,22,138,26,"layouts"],[153,29,138,33],[153,30,138,34,"length"],[153,36,138,40],[153,38,138,42],[154,10,139,16],[155,8,140,12],[156,6,141,8],[157,6,142,8],[157,10,142,12],[157,11,142,13,"tallestItem"],[157,22,142,24],[157,26,142,28,"maxHeight"],[157,35,142,37],[157,38,142,40],[157,39,142,41],[157,41,142,43],[158,8,143,12,"maxHeight"],[158,17,143,21],[158,20,143,24,"Number"],[158,26,143,30],[158,27,143,31,"MAX_SAFE_INTEGER"],[158,43,143,47],[159,6,144,8],[160,6,145,8,"tallestItem"],[160,17,145,19],[160,20,145,22,"tallestItem"],[160,31,145,33],[160,36,145,38],[160,40,145,42],[160,44,145,46,"tallestItem"],[160,55,145,57],[160,60,145,62],[160,65,145,67],[160,66,145,68],[160,69,145,71,"tallestItem"],[160,80,145,82],[160,83,145,85],[160,87,145,89],[160,88,145,90,"layouts"],[160,95,145,97],[160,96,145,98,"startIndex"],[160,106,145,108],[160,107,145,109],[161,6,146,8],[161,10,146,12],[161,11,146,13,"isMeasured"],[161,21,146,23],[161,23,146,25],[162,8,147,12],[162,15,147,19,"tallestItem"],[162,26,147,30],[163,6,148,8],[164,6,149,8],[164,10,149,12,"tallestItem"],[164,21,149,23],[164,23,149,25],[165,8,150,12],[165,12,150,16,"targetHeight"],[165,24,150,28],[165,27,150,31,"tallestItem"],[165,38,150,42],[165,39,150,43,"height"],[165,45,150,49],[166,8,151,12],[166,12,151,16,"maxHeight"],[166,21,151,25],[166,24,151,28,"tallestItem"],[166,35,151,39],[166,36,151,40,"height"],[166,42,151,46],[166,45,151,49],[166,46,151,50],[166,48,151,52],[167,10,152,16,"targetHeight"],[167,22,152,28],[167,25,152,31],[167,26,152,32],[168,10,153,16],[168,14,153,20],[168,15,153,21,"requiresRepaint"],[168,30,153,36],[168,33,153,39],[168,37,153,43],[169,8,154,12],[170,8,155,12,"i"],[170,9,155,13],[170,12,155,16,"startIndex"],[170,22,155,26],[171,8,156,12],[171,15,156,19,"i"],[171,16,156,20],[171,20,156,24,"endIndex"],[171,28,156,32],[171,30,156,34],[172,10,157,16],[172,14,157,20],[172,15,157,21,"layouts"],[172,22,157,28],[172,23,157,29,"i"],[172,24,157,30],[172,25,157,31],[172,26,157,32,"minHeight"],[172,35,157,41],[172,38,157,44,"targetHeight"],[172,50,157,56],[173,10,158,16],[173,14,158,20,"targetHeight"],[173,26,158,32],[173,29,158,35],[173,30,158,36],[173,32,158,38],[174,12,159,20],[174,16,159,24],[174,17,159,25,"layouts"],[174,24,159,32],[174,25,159,33,"i"],[174,26,159,34],[174,27,159,35],[174,28,159,36,"height"],[174,34,159,42],[174,37,159,45,"targetHeight"],[174,49,159,57],[175,10,160,16],[176,10,161,16,"i"],[176,11,161,17],[176,13,161,19],[177,10,162,16],[177,14,162,20,"i"],[177,15,162,21],[177,19,162,25],[177,23,162,29],[177,24,162,30,"layouts"],[177,31,162,37],[177,32,162,38,"length"],[177,38,162,44],[177,40,162,46],[178,12,163,20],[179,10,164,16],[180,8,165,12],[181,8,166,12,"tallestItem"],[181,19,166,23],[181,20,166,24,"minHeight"],[181,29,166,33],[181,32,166,36],[181,33,166,37],[182,6,167,8],[183,6,168,8],[183,13,168,15,"tallestItem"],[183,24,168,26],[184,4,169,4],[185,4,170,4],[186,0,171,0],[187,0,172,0],[188,0,173,0],[189,0,174,0],[190,4,175,4,"computeTotalHeightTillRow"],[190,29,175,29,"computeTotalHeightTillRow"],[190,30,175,30,"endIndex"],[190,38,175,38],[190,40,175,40],[191,6,176,8],[191,12,176,14,"startIndex"],[191,22,176,24],[191,25,176,27],[191,29,176,31],[191,30,176,32,"locateFirstIndexInRow"],[191,51,176,53],[191,52,176,54,"endIndex"],[191,60,176,62],[191,61,176,63],[192,6,177,8],[192,12,177,14,"y"],[192,13,177,15],[192,16,177,18],[192,20,177,22],[192,21,177,23,"layouts"],[192,28,177,30],[192,29,177,31,"startIndex"],[192,39,177,41],[192,40,177,42],[192,41,177,43,"y"],[192,42,177,44],[193,6,178,8],[193,10,178,12,"maxHeight"],[193,19,178,21],[193,22,178,24],[193,23,178,25],[194,6,179,8],[194,10,179,12,"i"],[194,11,179,13],[194,14,179,16,"startIndex"],[194,24,179,26],[195,6,180,8],[195,13,180,15,"i"],[195,14,180,16],[195,18,180,20,"endIndex"],[195,26,180,28],[195,28,180,30],[196,8,181,12,"maxHeight"],[196,17,181,21],[196,20,181,24,"Math"],[196,24,181,28],[196,25,181,29,"max"],[196,28,181,32],[196,29,181,33,"maxHeight"],[196,38,181,42],[196,40,181,44],[196,44,181,48],[196,45,181,49,"layouts"],[196,52,181,56],[196,53,181,57,"i"],[196,54,181,58],[196,55,181,59],[196,56,181,60,"height"],[196,62,181,66],[196,63,181,67],[197,8,182,12,"i"],[197,9,182,13],[197,11,182,15],[198,8,183,12],[198,12,183,16,"i"],[198,13,183,17],[198,17,183,21],[198,21,183,25],[198,22,183,26,"layouts"],[198,29,183,33],[198,30,183,34,"length"],[198,36,183,40],[198,38,183,42],[199,10,184,16],[200,8,185,12],[201,6,186,8],[202,6,187,8],[202,13,187,15,"y"],[202,14,187,16],[202,17,187,19,"maxHeight"],[202,26,187,28],[203,4,188,4],[204,4,189,4,"updateAllWidths"],[204,19,189,19,"updateAllWidths"],[204,20,189,19],[204,22,189,22],[205,6,190,8],[205,11,190,13],[205,15,190,17,"i"],[205,16,190,18],[205,19,190,21],[205,20,190,22],[205,22,190,24,"i"],[205,23,190,25],[205,26,190,28],[205,30,190,32],[205,31,190,33,"layouts"],[205,38,190,40],[205,39,190,41,"length"],[205,45,190,47],[205,47,190,49,"i"],[205,48,190,50],[205,50,190,52],[205,52,190,54],[206,8,191,12],[206,12,191,16],[206,13,191,17,"layouts"],[206,20,191,24],[206,21,191,25,"i"],[206,22,191,26],[206,23,191,27],[206,24,191,28,"width"],[206,29,191,33],[206,32,191,36],[206,36,191,40],[206,37,191,41,"getWidth"],[206,45,191,49],[206,46,191,50,"i"],[206,47,191,51],[206,48,191,52],[207,6,192,8],[208,4,193,4],[209,4,194,4],[210,0,195,0],[211,0,196,0],[212,0,197,0],[213,0,198,0],[214,0,199,0],[215,4,200,4,"checkBounds"],[215,15,200,15,"checkBounds"],[215,16,200,16,"itemX"],[215,21,200,21],[215,23,200,23,"width"],[215,28,200,28],[215,30,200,30],[216,6,201,8],[216,13,201,15,"itemX"],[216,18,201,20],[216,21,201,23,"width"],[216,26,201,28],[216,30,201,32],[216,34,201,36],[216,35,201,37,"boundedSize"],[216,46,201,48],[216,49,201,51],[216,52,201,54],[217,4,202,4],[218,4,203,4],[219,0,204,0],[220,0,205,0],[221,0,206,0],[222,0,207,0],[223,4,208,4,"locateFirstIndexInRow"],[223,25,208,25,"locateFirstIndexInRow"],[223,26,208,26,"itemIndex"],[223,35,208,35],[223,37,208,37],[224,6,209,8],[224,10,209,12,"itemIndex"],[224,19,209,21],[224,24,209,26],[224,25,209,27],[224,27,209,29],[225,8,210,12],[225,15,210,19],[225,16,210,20],[226,6,211,8],[227,6,212,8],[227,10,212,12,"i"],[227,11,212,13],[227,14,212,16,"itemIndex"],[227,23,212,25],[228,6,213,8],[228,13,213,15,"i"],[228,14,213,16],[228,18,213,20],[228,19,213,21],[228,21,213,23,"i"],[228,22,213,24],[228,24,213,26],[228,26,213,28],[229,8,214,12],[229,12,214,16],[229,16,214,20],[229,17,214,21,"layouts"],[229,24,214,28],[229,25,214,29,"i"],[229,26,214,30],[229,27,214,31],[229,28,214,32,"x"],[229,29,214,33],[229,34,214,38],[229,35,214,39],[229,37,214,41],[230,10,215,16],[231,8,216,12],[232,6,217,8],[233,6,218,8],[233,13,218,15,"Math"],[233,17,218,19],[233,18,218,20,"max"],[233,21,218,23],[233,22,218,24,"i"],[233,23,218,25],[233,25,218,27],[233,26,218,28],[233,27,218,29],[234,4,219,4],[235,2,220,0],[236,0,220,1],[236,3]],"functionMap":{"names":["<global>","RVGridLayoutManagerImpl","RVGridLayoutManagerImpl#constructor","RVGridLayoutManagerImpl#updateLayoutParams","RVGridLayoutManagerImpl#processLayoutInfo","RVGridLayoutManagerImpl#estimateLayout","RVGridLayoutManagerImpl#handleSpanChange","RVGridLayoutManagerImpl#getLayoutSize","RVGridLayoutManagerImpl#recomputeLayouts","RVGridLayoutManagerImpl#getWidth","RVGridLayoutManagerImpl#processAndReturnTallestItemInRow","RVGridLayoutManagerImpl#computeTotalHeightTillRow","RVGridLayoutManagerImpl#updateAllWidths","RVGridLayoutManagerImpl#checkBounds","RVGridLayoutManagerImpl#locateFirstIndexInRow"],"mappings":"AAA;OCK;ICC;KDK;IEK;KFa;IGM;KHc;IIK;KJM;IKK;KLE;IMK;KNQ;IOM;KPmB;IQM;KRE;ISQ;KT+C;IUM;KVa;IWC;KXI;IYO;KZE;IaM;KbW;CDC"},"hasCjsExports":false},"type":"js/module"}]}