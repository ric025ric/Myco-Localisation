{"dependencies":[{"name":"./galois-field","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":36,"index":36}}],"key":"wK0DoQ5p37aK5F14JszG5/2IPTo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const GF = require(_dependencyMap[0], \"./galois-field\");\n\n  /**\n   * Multiplies two polynomials inside Galois Field\n   *\n   * @param  {Uint8Array} p1 Polynomial\n   * @param  {Uint8Array} p2 Polynomial\n   * @return {Uint8Array}    Product of p1 and p2\n   */\n  exports.mul = function mul(p1, p2) {\n    const coeff = new Uint8Array(p1.length + p2.length - 1);\n    for (let i = 0; i < p1.length; i++) {\n      for (let j = 0; j < p2.length; j++) {\n        coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n      }\n    }\n    return coeff;\n  };\n\n  /**\n   * Calculate the remainder of polynomials division\n   *\n   * @param  {Uint8Array} divident Polynomial\n   * @param  {Uint8Array} divisor  Polynomial\n   * @return {Uint8Array}          Remainder\n   */\n  exports.mod = function mod(divident, divisor) {\n    let result = new Uint8Array(divident);\n    while (result.length - divisor.length >= 0) {\n      const coeff = result[0];\n      for (let i = 0; i < divisor.length; i++) {\n        result[i] ^= GF.mul(divisor[i], coeff);\n      }\n\n      // remove all zeros from buffer head\n      let offset = 0;\n      while (offset < result.length && result[offset] === 0) offset++;\n      result = result.slice(offset);\n    }\n    return result;\n  };\n\n  /**\n   * Generate an irreducible generator polynomial of specified degree\n   * (used by Reed-Solomon encoder)\n   *\n   * @param  {Number} degree Degree of the generator polynomial\n   * @return {Uint8Array}    Buffer containing polynomial coefficients\n   */\n  exports.generateECPolynomial = function generateECPolynomial(degree) {\n    let poly = new Uint8Array([1]);\n    for (let i = 0; i < degree; i++) {\n      poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));\n    }\n    return poly;\n  };\n});","lineCount":58,"map":[[2,2,1,0],[2,8,1,6,"GF"],[2,10,1,8],[2,13,1,11,"require"],[2,20,1,18],[2,21,1,18,"_dependencyMap"],[2,35,1,18],[2,56,1,35],[2,57,1,36],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"mul"],[11,13,10,11],[11,16,10,14],[11,25,10,23,"mul"],[11,28,10,26,"mul"],[11,29,10,28,"p1"],[11,31,10,30],[11,33,10,32,"p2"],[11,35,10,34],[11,37,10,36],[12,4,11,2],[12,10,11,8,"coeff"],[12,15,11,13],[12,18,11,16],[12,22,11,20,"Uint8Array"],[12,32,11,30],[12,33,11,31,"p1"],[12,35,11,33],[12,36,11,34,"length"],[12,42,11,40],[12,45,11,43,"p2"],[12,47,11,45],[12,48,11,46,"length"],[12,54,11,52],[12,57,11,55],[12,58,11,56],[12,59,11,57],[13,4,13,2],[13,9,13,7],[13,13,13,11,"i"],[13,14,13,12],[13,17,13,15],[13,18,13,16],[13,20,13,18,"i"],[13,21,13,19],[13,24,13,22,"p1"],[13,26,13,24],[13,27,13,25,"length"],[13,33,13,31],[13,35,13,33,"i"],[13,36,13,34],[13,38,13,36],[13,40,13,38],[14,6,14,4],[14,11,14,9],[14,15,14,13,"j"],[14,16,14,14],[14,19,14,17],[14,20,14,18],[14,22,14,20,"j"],[14,23,14,21],[14,26,14,24,"p2"],[14,28,14,26],[14,29,14,27,"length"],[14,35,14,33],[14,37,14,35,"j"],[14,38,14,36],[14,40,14,38],[14,42,14,40],[15,8,15,6,"coeff"],[15,13,15,11],[15,14,15,12,"i"],[15,15,15,13],[15,18,15,16,"j"],[15,19,15,17],[15,20,15,18],[15,24,15,22,"GF"],[15,26,15,24],[15,27,15,25,"mul"],[15,30,15,28],[15,31,15,29,"p1"],[15,33,15,31],[15,34,15,32,"i"],[15,35,15,33],[15,36,15,34],[15,38,15,36,"p2"],[15,40,15,38],[15,41,15,39,"j"],[15,42,15,40],[15,43,15,41],[15,44,15,42],[16,6,16,4],[17,4,17,2],[18,4,19,2],[18,11,19,9,"coeff"],[18,16,19,14],[19,2,20,0],[19,3,20,1],[21,2,22,0],[22,0,23,0],[23,0,24,0],[24,0,25,0],[25,0,26,0],[26,0,27,0],[27,0,28,0],[28,2,29,0,"exports"],[28,9,29,7],[28,10,29,8,"mod"],[28,13,29,11],[28,16,29,14],[28,25,29,23,"mod"],[28,28,29,26,"mod"],[28,29,29,28,"divident"],[28,37,29,36],[28,39,29,38,"divisor"],[28,46,29,45],[28,48,29,47],[29,4,30,2],[29,8,30,6,"result"],[29,14,30,12],[29,17,30,15],[29,21,30,19,"Uint8Array"],[29,31,30,29],[29,32,30,30,"divident"],[29,40,30,38],[29,41,30,39],[30,4,32,2],[30,11,32,10,"result"],[30,17,32,16],[30,18,32,17,"length"],[30,24,32,23],[30,27,32,26,"divisor"],[30,34,32,33],[30,35,32,34,"length"],[30,41,32,40],[30,45,32,45],[30,46,32,46],[30,48,32,48],[31,6,33,4],[31,12,33,10,"coeff"],[31,17,33,15],[31,20,33,18,"result"],[31,26,33,24],[31,27,33,25],[31,28,33,26],[31,29,33,27],[32,6,35,4],[32,11,35,9],[32,15,35,13,"i"],[32,16,35,14],[32,19,35,17],[32,20,35,18],[32,22,35,20,"i"],[32,23,35,21],[32,26,35,24,"divisor"],[32,33,35,31],[32,34,35,32,"length"],[32,40,35,38],[32,42,35,40,"i"],[32,43,35,41],[32,45,35,43],[32,47,35,45],[33,8,36,6,"result"],[33,14,36,12],[33,15,36,13,"i"],[33,16,36,14],[33,17,36,15],[33,21,36,19,"GF"],[33,23,36,21],[33,24,36,22,"mul"],[33,27,36,25],[33,28,36,26,"divisor"],[33,35,36,33],[33,36,36,34,"i"],[33,37,36,35],[33,38,36,36],[33,40,36,38,"coeff"],[33,45,36,43],[33,46,36,44],[34,6,37,4],[36,6,39,4],[37,6,40,4],[37,10,40,8,"offset"],[37,16,40,14],[37,19,40,17],[37,20,40,18],[38,6,41,4],[38,13,41,11,"offset"],[38,19,41,17],[38,22,41,20,"result"],[38,28,41,26],[38,29,41,27,"length"],[38,35,41,33],[38,39,41,37,"result"],[38,45,41,43],[38,46,41,44,"offset"],[38,52,41,50],[38,53,41,51],[38,58,41,56],[38,59,41,57],[38,61,41,59,"offset"],[38,67,41,65],[38,69,41,67],[39,6,42,4,"result"],[39,12,42,10],[39,15,42,13,"result"],[39,21,42,19],[39,22,42,20,"slice"],[39,27,42,25],[39,28,42,26,"offset"],[39,34,42,32],[39,35,42,33],[40,4,43,2],[41,4,45,2],[41,11,45,9,"result"],[41,17,45,15],[42,2,46,0],[42,3,46,1],[44,2,48,0],[45,0,49,0],[46,0,50,0],[47,0,51,0],[48,0,52,0],[49,0,53,0],[50,0,54,0],[51,2,55,0,"exports"],[51,9,55,7],[51,10,55,8,"generateECPolynomial"],[51,30,55,28],[51,33,55,31],[51,42,55,40,"generateECPolynomial"],[51,62,55,60,"generateECPolynomial"],[51,63,55,62,"degree"],[51,69,55,68],[51,71,55,70],[52,4,56,2],[52,8,56,6,"poly"],[52,12,56,10],[52,15,56,13],[52,19,56,17,"Uint8Array"],[52,29,56,27],[52,30,56,28],[52,31,56,29],[52,32,56,30],[52,33,56,31],[52,34,56,32],[53,4,57,2],[53,9,57,7],[53,13,57,11,"i"],[53,14,57,12],[53,17,57,15],[53,18,57,16],[53,20,57,18,"i"],[53,21,57,19],[53,24,57,22,"degree"],[53,30,57,28],[53,32,57,30,"i"],[53,33,57,31],[53,35,57,33],[53,37,57,35],[54,6,58,4,"poly"],[54,10,58,8],[54,13,58,11,"exports"],[54,20,58,18],[54,21,58,19,"mul"],[54,24,58,22],[54,25,58,23,"poly"],[54,29,58,27],[54,31,58,29],[54,35,58,33,"Uint8Array"],[54,45,58,43],[54,46,58,44],[54,47,58,45],[54,48,58,46],[54,50,58,48,"GF"],[54,52,58,50],[54,53,58,51,"exp"],[54,56,58,54],[54,57,58,55,"i"],[54,58,58,56],[54,59,58,57],[54,60,58,58],[54,61,58,59],[54,62,58,60],[55,4,59,2],[56,4,61,2],[56,11,61,9,"poly"],[56,15,61,13],[57,2,62,0],[57,3,62,1],[58,0,62,1],[58,3]],"functionMap":{"names":["<global>","mul","mod","generateECPolynomial"],"mappings":"AAA;cCS;CDU;cES;CFiB;+BGS;CHO"},"hasCjsExports":true},"type":"js/module"}]}