{"dependencies":[{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"8kHEUlKQMmxShjK4DMjntIDDVoM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"RVLinearLayoutManagerImpl\", {\n    enumerable: true,\n    get: function () {\n      return RVLinearLayoutManagerImpl;\n    }\n  });\n  var _LayoutManager = require(_dependencyMap[0], \"./LayoutManager\");\n  /**\n   * LinearLayoutManager implementation that arranges items in a single row or column.\n   * Supports both horizontal and vertical layouts with dynamic item sizing.\n   */\n  class RVLinearLayoutManagerImpl extends _LayoutManager.RVLayoutManager {\n    constructor(params, previousLayoutManager) {\n      super(params, previousLayoutManager);\n      /** Whether the bounded size has been set */\n      this.hasSize = false;\n      /** Height of the tallest item */\n      this.tallestItemHeight = 0;\n      this.boundedSize = this.horizontal ? params.windowSize.height : params.windowSize.width;\n      this.hasSize = this.boundedSize > 0;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    updateLayoutParams(params) {\n      const prevHorizontal = this.horizontal;\n      super.updateLayoutParams(params);\n      const oldBoundedSize = this.boundedSize;\n      this.boundedSize = this.horizontal ? params.windowSize.height : params.windowSize.width;\n      if (oldBoundedSize !== this.boundedSize || prevHorizontal !== this.horizontal) {\n        if (this.layouts.length > 0) {\n          // console.log(\"-----> recomputeLayouts\", this.horizontal);\n          this.recomputeLayouts(0, this.layouts.length - 1);\n          this.requiresRepaint = true;\n        }\n      }\n    }\n    /**\n     * Processes layout information for items, updating their dimensions.\n     * For horizontal layouts, also normalizes heights of items.\n     * @param layoutInfo Array of layout information for items\n     * @param itemCount Total number of items in the list\n     */\n    processLayoutInfo(layoutInfo, itemCount) {\n      // Update layout information\n      for (const info of layoutInfo) {\n        const {\n          index,\n          dimensions\n        } = info;\n        const layout = this.layouts[index];\n        layout.width = this.horizontal ? dimensions.width : this.boundedSize;\n        layout.isHeightMeasured = true;\n        layout.isWidthMeasured = true;\n        layout.height = dimensions.height;\n      }\n      if (this.horizontal && !this.hasSize) {\n        this.normalizeLayoutHeights(layoutInfo);\n      }\n    }\n    /**\n     * Estimates layout dimensions for an item at the given index.\n     * @param index Index of the item to estimate layout for\n     */\n    estimateLayout(index) {\n      const layout = this.layouts[index];\n      layout.width = this.horizontal ? this.getEstimatedWidth(index) : this.boundedSize;\n      layout.height = this.getEstimatedHeight(index);\n      layout.isWidthMeasured = !this.horizontal;\n      layout.enforcedWidth = !this.horizontal;\n    }\n    /**\n     * Returns the total size of the layout area.\n     * @returns RVDimension containing width and height of the layout\n     */\n    getLayoutSize() {\n      var _a, _b;\n      if (this.layouts.length === 0) return {\n        width: 0,\n        height: 0\n      };\n      const lastLayout = this.layouts[this.layouts.length - 1];\n      return {\n        width: this.horizontal ? lastLayout.x + lastLayout.width : this.boundedSize,\n        height: this.horizontal ? (_b = (_a = this.tallestItem) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : this.boundedSize : lastLayout.y + lastLayout.height\n      };\n    }\n    /**\n     * Normalizes heights of items in horizontal layout to match the tallest item.\n     * @param layoutInfo Array of layout information for items\n     */\n    normalizeLayoutHeights(layoutInfo) {\n      var _a, _b;\n      let newTallestItem;\n      for (const info of layoutInfo) {\n        const {\n          index\n        } = info;\n        const layout = this.layouts[index];\n        if (layout.height > ((_a = layout.minHeight) !== null && _a !== void 0 ? _a : 0) && layout.height > ((_b = newTallestItem === null || newTallestItem === void 0 ? void 0 : newTallestItem.height) !== null && _b !== void 0 ? _b : 0)) {\n          newTallestItem = layout;\n        }\n      }\n      if (newTallestItem && newTallestItem.height !== this.tallestItemHeight) {\n        let targetMinHeight = newTallestItem.height;\n        if (newTallestItem.height < this.tallestItemHeight) {\n          this.requiresRepaint = true;\n          targetMinHeight = 0;\n        }\n        // set minHeight for all layouts\n        for (const layout of this.layouts) {\n          if (targetMinHeight > 0) {\n            layout.height = newTallestItem.height;\n          }\n          layout.minHeight = targetMinHeight;\n        }\n        newTallestItem.minHeight = 0;\n        this.tallestItem = newTallestItem;\n        this.tallestItemHeight = newTallestItem.height;\n      }\n    }\n    /**\n     * Recomputes layouts for items in the given range.\n     * Positions items sequentially based on layout direction.\n     * @param startIndex Starting index of items to recompute\n     * @param endIndex Ending index of items to recompute\n     */\n    recomputeLayouts(startIndex, endIndex) {\n      for (let i = startIndex; i <= endIndex; i++) {\n        const layout = this.getLayout(i);\n        // Set positions based on whether this is the first item or not\n        if (i === 0) {\n          layout.x = 0;\n          layout.y = 0;\n        } else {\n          const prevLayout = this.getLayout(i - 1);\n          layout.x = this.horizontal ? prevLayout.x + prevLayout.width : 0;\n          layout.y = this.horizontal ? 0 : prevLayout.y + prevLayout.height;\n        }\n        // Set width for vertical layouts\n        if (!this.horizontal) {\n          layout.width = this.boundedSize;\n        } else if (this.hasSize) {\n          layout.minHeight = this.boundedSize;\n        }\n      }\n    }\n  }\n});","lineCount":156,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"RVLinearLayoutManagerImpl"],[10,38,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[13,6,1,0,"_LayoutManager"],[13,20,1,0],[13,23,1,0,"require"],[13,30,1,0],[13,31,1,0,"_dependencyMap"],[13,45,1,0],[14,2,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,2,6,7],[18,8,6,13,"RVLinearLayoutManagerImpl"],[18,33,6,38],[18,42,6,47,"RVLayoutManager"],[18,56,6,62],[18,57,6,62,"RVLayoutManager"],[18,72,6,62],[18,73,6,63],[19,4,7,4,"constructor"],[19,15,7,15,"constructor"],[19,16,7,16,"params"],[19,22,7,22],[19,24,7,24,"previousLayoutManager"],[19,45,7,45],[19,47,7,47],[20,6,8,8],[20,11,8,13],[20,12,8,14,"params"],[20,18,8,20],[20,20,8,22,"previousLayoutManager"],[20,41,8,43],[20,42,8,44],[21,6,9,8],[22,6,10,8],[22,10,10,12],[22,11,10,13,"hasSize"],[22,18,10,20],[22,21,10,23],[22,26,10,28],[23,6,11,8],[24,6,12,8],[24,10,12,12],[24,11,12,13,"tallestItemHeight"],[24,28,12,30],[24,31,12,33],[24,32,12,34],[25,6,13,8],[25,10,13,12],[25,11,13,13,"boundedSize"],[25,22,13,24],[25,25,13,27],[25,29,13,31],[25,30,13,32,"horizontal"],[25,40,13,42],[25,43,14,14,"params"],[25,49,14,20],[25,50,14,21,"windowSize"],[25,60,14,31],[25,61,14,32,"height"],[25,67,14,38],[25,70,15,14,"params"],[25,76,15,20],[25,77,15,21,"windowSize"],[25,87,15,31],[25,88,15,32,"width"],[25,93,15,37],[26,6,16,8],[26,10,16,12],[26,11,16,13,"hasSize"],[26,18,16,20],[26,21,16,23],[26,25,16,27],[26,26,16,28,"boundedSize"],[26,37,16,39],[26,40,16,42],[26,41,16,43],[27,4,17,4],[28,4,18,4],[29,0,19,0],[30,0,20,0],[31,0,21,0],[32,4,22,4,"updateLayoutParams"],[32,22,22,22,"updateLayoutParams"],[32,23,22,23,"params"],[32,29,22,29],[32,31,22,31],[33,6,23,8],[33,12,23,14,"prevHorizontal"],[33,26,23,28],[33,29,23,31],[33,33,23,35],[33,34,23,36,"horizontal"],[33,44,23,46],[34,6,24,8],[34,11,24,13],[34,12,24,14,"updateLayoutParams"],[34,30,24,32],[34,31,24,33,"params"],[34,37,24,39],[34,38,24,40],[35,6,25,8],[35,12,25,14,"oldBoundedSize"],[35,26,25,28],[35,29,25,31],[35,33,25,35],[35,34,25,36,"boundedSize"],[35,45,25,47],[36,6,26,8],[36,10,26,12],[36,11,26,13,"boundedSize"],[36,22,26,24],[36,25,26,27],[36,29,26,31],[36,30,26,32,"horizontal"],[36,40,26,42],[36,43,27,14,"params"],[36,49,27,20],[36,50,27,21,"windowSize"],[36,60,27,31],[36,61,27,32,"height"],[36,67,27,38],[36,70,28,14,"params"],[36,76,28,20],[36,77,28,21,"windowSize"],[36,87,28,31],[36,88,28,32,"width"],[36,93,28,37],[37,6,29,8],[37,10,29,12,"oldBoundedSize"],[37,24,29,26],[37,29,29,31],[37,33,29,35],[37,34,29,36,"boundedSize"],[37,45,29,47],[37,49,30,12,"prevHorizontal"],[37,63,30,26],[37,68,30,31],[37,72,30,35],[37,73,30,36,"horizontal"],[37,83,30,46],[37,85,30,48],[38,8,31,12],[38,12,31,16],[38,16,31,20],[38,17,31,21,"layouts"],[38,24,31,28],[38,25,31,29,"length"],[38,31,31,35],[38,34,31,38],[38,35,31,39],[38,37,31,41],[39,10,32,16],[40,10,33,16],[40,14,33,20],[40,15,33,21,"recomputeLayouts"],[40,31,33,37],[40,32,33,38],[40,33,33,39],[40,35,33,41],[40,39,33,45],[40,40,33,46,"layouts"],[40,47,33,53],[40,48,33,54,"length"],[40,54,33,60],[40,57,33,63],[40,58,33,64],[40,59,33,65],[41,10,34,16],[41,14,34,20],[41,15,34,21,"requiresRepaint"],[41,30,34,36],[41,33,34,39],[41,37,34,43],[42,8,35,12],[43,6,36,8],[44,4,37,4],[45,4,38,4],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,4,44,4,"processLayoutInfo"],[51,21,44,21,"processLayoutInfo"],[51,22,44,22,"layoutInfo"],[51,32,44,32],[51,34,44,34,"itemCount"],[51,43,44,43],[51,45,44,45],[52,6,45,8],[53,6,46,8],[53,11,46,13],[53,17,46,19,"info"],[53,21,46,23],[53,25,46,27,"layoutInfo"],[53,35,46,37],[53,37,46,39],[54,8,47,12],[54,14,47,18],[55,10,47,20,"index"],[55,15,47,25],[56,10,47,27,"dimensions"],[57,8,47,38],[57,9,47,39],[57,12,47,42,"info"],[57,16,47,46],[58,8,48,12],[58,14,48,18,"layout"],[58,20,48,24],[58,23,48,27],[58,27,48,31],[58,28,48,32,"layouts"],[58,35,48,39],[58,36,48,40,"index"],[58,41,48,45],[58,42,48,46],[59,8,49,12,"layout"],[59,14,49,18],[59,15,49,19,"width"],[59,20,49,24],[59,23,49,27],[59,27,49,31],[59,28,49,32,"horizontal"],[59,38,49,42],[59,41,49,45,"dimensions"],[59,51,49,55],[59,52,49,56,"width"],[59,57,49,61],[59,60,49,64],[59,64,49,68],[59,65,49,69,"boundedSize"],[59,76,49,80],[60,8,50,12,"layout"],[60,14,50,18],[60,15,50,19,"isHeightMeasured"],[60,31,50,35],[60,34,50,38],[60,38,50,42],[61,8,51,12,"layout"],[61,14,51,18],[61,15,51,19,"isWidthMeasured"],[61,30,51,34],[61,33,51,37],[61,37,51,41],[62,8,52,12,"layout"],[62,14,52,18],[62,15,52,19,"height"],[62,21,52,25],[62,24,52,28,"dimensions"],[62,34,52,38],[62,35,52,39,"height"],[62,41,52,45],[63,6,53,8],[64,6,54,8],[64,10,54,12],[64,14,54,16],[64,15,54,17,"horizontal"],[64,25,54,27],[64,29,54,31],[64,30,54,32],[64,34,54,36],[64,35,54,37,"hasSize"],[64,42,54,44],[64,44,54,46],[65,8,55,12],[65,12,55,16],[65,13,55,17,"normalizeLayoutHeights"],[65,35,55,39],[65,36,55,40,"layoutInfo"],[65,46,55,50],[65,47,55,51],[66,6,56,8],[67,4,57,4],[68,4,58,4],[69,0,59,0],[70,0,60,0],[71,0,61,0],[72,4,62,4,"estimateLayout"],[72,18,62,18,"estimateLayout"],[72,19,62,19,"index"],[72,24,62,24],[72,26,62,26],[73,6,63,8],[73,12,63,14,"layout"],[73,18,63,20],[73,21,63,23],[73,25,63,27],[73,26,63,28,"layouts"],[73,33,63,35],[73,34,63,36,"index"],[73,39,63,41],[73,40,63,42],[74,6,64,8,"layout"],[74,12,64,14],[74,13,64,15,"width"],[74,18,64,20],[74,21,64,23],[74,25,64,27],[74,26,64,28,"horizontal"],[74,36,64,38],[74,39,65,14],[74,43,65,18],[74,44,65,19,"getEstimatedWidth"],[74,61,65,36],[74,62,65,37,"index"],[74,67,65,42],[74,68,65,43],[74,71,66,14],[74,75,66,18],[74,76,66,19,"boundedSize"],[74,87,66,30],[75,6,67,8,"layout"],[75,12,67,14],[75,13,67,15,"height"],[75,19,67,21],[75,22,67,24],[75,26,67,28],[75,27,67,29,"getEstimatedHeight"],[75,45,67,47],[75,46,67,48,"index"],[75,51,67,53],[75,52,67,54],[76,6,68,8,"layout"],[76,12,68,14],[76,13,68,15,"isWidthMeasured"],[76,28,68,30],[76,31,68,33],[76,32,68,34],[76,36,68,38],[76,37,68,39,"horizontal"],[76,47,68,49],[77,6,69,8,"layout"],[77,12,69,14],[77,13,69,15,"enforcedWidth"],[77,26,69,28],[77,29,69,31],[77,30,69,32],[77,34,69,36],[77,35,69,37,"horizontal"],[77,45,69,47],[78,4,70,4],[79,4,71,4],[80,0,72,0],[81,0,73,0],[82,0,74,0],[83,4,75,4,"getLayoutSize"],[83,17,75,17,"getLayoutSize"],[83,18,75,17],[83,20,75,20],[84,6,76,8],[84,10,76,12,"_a"],[84,12,76,14],[84,14,76,16,"_b"],[84,16,76,18],[85,6,77,8],[85,10,77,12],[85,14,77,16],[85,15,77,17,"layouts"],[85,22,77,24],[85,23,77,25,"length"],[85,29,77,31],[85,34,77,36],[85,35,77,37],[85,37,78,12],[85,44,78,19],[86,8,78,21,"width"],[86,13,78,26],[86,15,78,28],[86,16,78,29],[87,8,78,31,"height"],[87,14,78,37],[87,16,78,39],[88,6,78,41],[88,7,78,42],[89,6,79,8],[89,12,79,14,"lastLayout"],[89,22,79,24],[89,25,79,27],[89,29,79,31],[89,30,79,32,"layouts"],[89,37,79,39],[89,38,79,40],[89,42,79,44],[89,43,79,45,"layouts"],[89,50,79,52],[89,51,79,53,"length"],[89,57,79,59],[89,60,79,62],[89,61,79,63],[89,62,79,64],[90,6,80,8],[90,13,80,15],[91,8,81,12,"width"],[91,13,81,17],[91,15,81,19],[91,19,81,23],[91,20,81,24,"horizontal"],[91,30,81,34],[91,33,82,18,"lastLayout"],[91,43,82,28],[91,44,82,29,"x"],[91,45,82,30],[91,48,82,33,"lastLayout"],[91,58,82,43],[91,59,82,44,"width"],[91,64,82,49],[91,67,83,18],[91,71,83,22],[91,72,83,23,"boundedSize"],[91,83,83,34],[92,8,84,12,"height"],[92,14,84,18],[92,16,84,20],[92,20,84,24],[92,21,84,25,"horizontal"],[92,31,84,35],[92,34,85,18],[92,35,85,19,"_b"],[92,37,85,21],[92,40,85,24],[92,41,85,25,"_a"],[92,43,85,27],[92,46,85,30],[92,50,85,34],[92,51,85,35,"tallestItem"],[92,62,85,46],[92,68,85,52],[92,72,85,56],[92,76,85,60,"_a"],[92,78,85,62],[92,83,85,67],[92,88,85,72],[92,89,85,73],[92,92,85,76],[92,97,85,81],[92,98,85,82],[92,101,85,85,"_a"],[92,103,85,87],[92,104,85,88,"height"],[92,110,85,94],[92,116,85,100],[92,120,85,104],[92,124,85,108,"_b"],[92,126,85,110],[92,131,85,115],[92,136,85,120],[92,137,85,121],[92,140,85,124,"_b"],[92,142,85,126],[92,145,85,129],[92,149,85,133],[92,150,85,134,"boundedSize"],[92,161,85,145],[92,164,86,18,"lastLayout"],[92,174,86,28],[92,175,86,29,"y"],[92,176,86,30],[92,179,86,33,"lastLayout"],[92,189,86,43],[92,190,86,44,"height"],[93,6,87,8],[93,7,87,9],[94,4,88,4],[95,4,89,4],[96,0,90,0],[97,0,91,0],[98,0,92,0],[99,4,93,4,"normalizeLayoutHeights"],[99,26,93,26,"normalizeLayoutHeights"],[99,27,93,27,"layoutInfo"],[99,37,93,37],[99,39,93,39],[100,6,94,8],[100,10,94,12,"_a"],[100,12,94,14],[100,14,94,16,"_b"],[100,16,94,18],[101,6,95,8],[101,10,95,12,"newTallestItem"],[101,24,95,26],[102,6,96,8],[102,11,96,13],[102,17,96,19,"info"],[102,21,96,23],[102,25,96,27,"layoutInfo"],[102,35,96,37],[102,37,96,39],[103,8,97,12],[103,14,97,18],[104,10,97,20,"index"],[105,8,97,26],[105,9,97,27],[105,12,97,30,"info"],[105,16,97,34],[106,8,98,12],[106,14,98,18,"layout"],[106,20,98,24],[106,23,98,27],[106,27,98,31],[106,28,98,32,"layouts"],[106,35,98,39],[106,36,98,40,"index"],[106,41,98,45],[106,42,98,46],[107,8,99,12],[107,12,99,16,"layout"],[107,18,99,22],[107,19,99,23,"height"],[107,25,99,29],[107,29,99,33],[107,30,99,34,"_a"],[107,32,99,36],[107,35,99,39,"layout"],[107,41,99,45],[107,42,99,46,"minHeight"],[107,51,99,55],[107,57,99,61],[107,61,99,65],[107,65,99,69,"_a"],[107,67,99,71],[107,72,99,76],[107,77,99,81],[107,78,99,82],[107,81,99,85,"_a"],[107,83,99,87],[107,86,99,90],[107,87,99,91],[107,88,99,92],[107,92,100,16,"layout"],[107,98,100,22],[107,99,100,23,"height"],[107,105,100,29],[107,109,100,33],[107,110,100,34,"_b"],[107,112,100,36],[107,115,100,39,"newTallestItem"],[107,129,100,53],[107,134,100,58],[107,138,100,62],[107,142,100,66,"newTallestItem"],[107,156,100,80],[107,161,100,85],[107,166,100,90],[107,167,100,91],[107,170,100,94],[107,175,100,99],[107,176,100,100],[107,179,100,103,"newTallestItem"],[107,193,100,117],[107,194,100,118,"height"],[107,200,100,124],[107,206,100,130],[107,210,100,134],[107,214,100,138,"_b"],[107,216,100,140],[107,221,100,145],[107,226,100,150],[107,227,100,151],[107,230,100,154,"_b"],[107,232,100,156],[107,235,100,159],[107,236,100,160],[107,237,100,161],[107,239,100,163],[108,10,101,16,"newTallestItem"],[108,24,101,30],[108,27,101,33,"layout"],[108,33,101,39],[109,8,102,12],[110,6,103,8],[111,6,104,8],[111,10,104,12,"newTallestItem"],[111,24,104,26],[111,28,104,30,"newTallestItem"],[111,42,104,44],[111,43,104,45,"height"],[111,49,104,51],[111,54,104,56],[111,58,104,60],[111,59,104,61,"tallestItemHeight"],[111,76,104,78],[111,78,104,80],[112,8,105,12],[112,12,105,16,"targetMinHeight"],[112,27,105,31],[112,30,105,34,"newTallestItem"],[112,44,105,48],[112,45,105,49,"height"],[112,51,105,55],[113,8,106,12],[113,12,106,16,"newTallestItem"],[113,26,106,30],[113,27,106,31,"height"],[113,33,106,37],[113,36,106,40],[113,40,106,44],[113,41,106,45,"tallestItemHeight"],[113,58,106,62],[113,60,106,64],[114,10,107,16],[114,14,107,20],[114,15,107,21,"requiresRepaint"],[114,30,107,36],[114,33,107,39],[114,37,107,43],[115,10,108,16,"targetMinHeight"],[115,25,108,31],[115,28,108,34],[115,29,108,35],[116,8,109,12],[117,8,110,12],[118,8,111,12],[118,13,111,17],[118,19,111,23,"layout"],[118,25,111,29],[118,29,111,33],[118,33,111,37],[118,34,111,38,"layouts"],[118,41,111,45],[118,43,111,47],[119,10,112,16],[119,14,112,20,"targetMinHeight"],[119,29,112,35],[119,32,112,38],[119,33,112,39],[119,35,112,41],[120,12,113,20,"layout"],[120,18,113,26],[120,19,113,27,"height"],[120,25,113,33],[120,28,113,36,"newTallestItem"],[120,42,113,50],[120,43,113,51,"height"],[120,49,113,57],[121,10,114,16],[122,10,115,16,"layout"],[122,16,115,22],[122,17,115,23,"minHeight"],[122,26,115,32],[122,29,115,35,"targetMinHeight"],[122,44,115,50],[123,8,116,12],[124,8,117,12,"newTallestItem"],[124,22,117,26],[124,23,117,27,"minHeight"],[124,32,117,36],[124,35,117,39],[124,36,117,40],[125,8,118,12],[125,12,118,16],[125,13,118,17,"tallestItem"],[125,24,118,28],[125,27,118,31,"newTallestItem"],[125,41,118,45],[126,8,119,12],[126,12,119,16],[126,13,119,17,"tallestItemHeight"],[126,30,119,34],[126,33,119,37,"newTallestItem"],[126,47,119,51],[126,48,119,52,"height"],[126,54,119,58],[127,6,120,8],[128,4,121,4],[129,4,122,4],[130,0,123,0],[131,0,124,0],[132,0,125,0],[133,0,126,0],[134,0,127,0],[135,4,128,4,"recomputeLayouts"],[135,20,128,20,"recomputeLayouts"],[135,21,128,21,"startIndex"],[135,31,128,31],[135,33,128,33,"endIndex"],[135,41,128,41],[135,43,128,43],[136,6,129,8],[136,11,129,13],[136,15,129,17,"i"],[136,16,129,18],[136,19,129,21,"startIndex"],[136,29,129,31],[136,31,129,33,"i"],[136,32,129,34],[136,36,129,38,"endIndex"],[136,44,129,46],[136,46,129,48,"i"],[136,47,129,49],[136,49,129,51],[136,51,129,53],[137,8,130,12],[137,14,130,18,"layout"],[137,20,130,24],[137,23,130,27],[137,27,130,31],[137,28,130,32,"getLayout"],[137,37,130,41],[137,38,130,42,"i"],[137,39,130,43],[137,40,130,44],[138,8,131,12],[139,8,132,12],[139,12,132,16,"i"],[139,13,132,17],[139,18,132,22],[139,19,132,23],[139,21,132,25],[140,10,133,16,"layout"],[140,16,133,22],[140,17,133,23,"x"],[140,18,133,24],[140,21,133,27],[140,22,133,28],[141,10,134,16,"layout"],[141,16,134,22],[141,17,134,23,"y"],[141,18,134,24],[141,21,134,27],[141,22,134,28],[142,8,135,12],[142,9,135,13],[142,15,136,17],[143,10,137,16],[143,16,137,22,"prevLayout"],[143,26,137,32],[143,29,137,35],[143,33,137,39],[143,34,137,40,"getLayout"],[143,43,137,49],[143,44,137,50,"i"],[143,45,137,51],[143,48,137,54],[143,49,137,55],[143,50,137,56],[144,10,138,16,"layout"],[144,16,138,22],[144,17,138,23,"x"],[144,18,138,24],[144,21,138,27],[144,25,138,31],[144,26,138,32,"horizontal"],[144,36,138,42],[144,39,138,45,"prevLayout"],[144,49,138,55],[144,50,138,56,"x"],[144,51,138,57],[144,54,138,60,"prevLayout"],[144,64,138,70],[144,65,138,71,"width"],[144,70,138,76],[144,73,138,79],[144,74,138,80],[145,10,139,16,"layout"],[145,16,139,22],[145,17,139,23,"y"],[145,18,139,24],[145,21,139,27],[145,25,139,31],[145,26,139,32,"horizontal"],[145,36,139,42],[145,39,139,45],[145,40,139,46],[145,43,139,49,"prevLayout"],[145,53,139,59],[145,54,139,60,"y"],[145,55,139,61],[145,58,139,64,"prevLayout"],[145,68,139,74],[145,69,139,75,"height"],[145,75,139,81],[146,8,140,12],[147,8,141,12],[148,8,142,12],[148,12,142,16],[148,13,142,17],[148,17,142,21],[148,18,142,22,"horizontal"],[148,28,142,32],[148,30,142,34],[149,10,143,16,"layout"],[149,16,143,22],[149,17,143,23,"width"],[149,22,143,28],[149,25,143,31],[149,29,143,35],[149,30,143,36,"boundedSize"],[149,41,143,47],[150,8,144,12],[150,9,144,13],[150,15,145,17],[150,19,145,21],[150,23,145,25],[150,24,145,26,"hasSize"],[150,31,145,33],[150,33,145,35],[151,10,146,16,"layout"],[151,16,146,22],[151,17,146,23,"minHeight"],[151,26,146,32],[151,29,146,35],[151,33,146,39],[151,34,146,40,"boundedSize"],[151,45,146,51],[152,8,147,12],[153,6,148,8],[154,4,149,4],[155,2,150,0],[156,0,150,1],[156,3]],"functionMap":{"names":["<global>","RVLinearLayoutManagerImpl","RVLinearLayoutManagerImpl#constructor","RVLinearLayoutManagerImpl#updateLayoutParams","RVLinearLayoutManagerImpl#processLayoutInfo","RVLinearLayoutManagerImpl#estimateLayout","RVLinearLayoutManagerImpl#getLayoutSize","RVLinearLayoutManagerImpl#normalizeLayoutHeights","RVLinearLayoutManagerImpl#recomputeLayouts"],"mappings":"AAA;OCK;ICC;KDU;IEK;KFe;IGO;KHa;IIK;KJQ;IKK;KLa;IMK;KN4B;IOO;KPqB;CDC"},"hasCjsExports":false},"type":"js/module"}]}