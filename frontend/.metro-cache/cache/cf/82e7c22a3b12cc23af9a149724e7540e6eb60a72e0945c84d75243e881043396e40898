{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const Mode = require(_dependencyMap[0], \"./mode\");\n  function ByteData(data) {\n    this.mode = Mode.BYTE;\n    if (typeof data === 'string') {\n      this.data = new TextEncoder().encode(data);\n    } else {\n      this.data = new Uint8Array(data);\n    }\n  }\n  ByteData.getBitsLength = function getBitsLength(length) {\n    return length * 8;\n  };\n  ByteData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  ByteData.prototype.getBitsLength = function getBitsLength() {\n    return ByteData.getBitsLength(this.data.length);\n  };\n  ByteData.prototype.write = function (bitBuffer) {\n    for (let i = 0, l = this.data.length; i < l; i++) {\n      bitBuffer.put(this.data[i], 8);\n    }\n  };\n  module.exports = ByteData;\n});","lineCount":26,"map":[[2,2,1,0],[2,8,1,6,"Mode"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,50,1,29],[2,51,1,30],[3,2,3,0],[3,11,3,9,"ByteData"],[3,19,3,17,"ByteData"],[3,20,3,19,"data"],[3,24,3,23],[3,26,3,25],[4,4,4,2],[4,8,4,6],[4,9,4,7,"mode"],[4,13,4,11],[4,16,4,14,"Mode"],[4,20,4,18],[4,21,4,19,"BYTE"],[4,25,4,23],[5,4,5,2],[5,8,5,6],[5,15,5,14,"data"],[5,19,5,19],[5,24,5,24],[5,32,5,32],[5,34,5,34],[6,6,6,4],[6,10,6,8],[6,11,6,9,"data"],[6,15,6,13],[6,18,6,16],[6,22,6,20,"TextEncoder"],[6,33,6,31],[6,34,6,32],[6,35,6,33],[6,36,6,34,"encode"],[6,42,6,40],[6,43,6,41,"data"],[6,47,6,45],[6,48,6,46],[7,4,7,2],[7,5,7,3],[7,11,7,9],[8,6,8,4],[8,10,8,8],[8,11,8,9,"data"],[8,15,8,13],[8,18,8,16],[8,22,8,20,"Uint8Array"],[8,32,8,30],[8,33,8,31,"data"],[8,37,8,35],[8,38,8,36],[9,4,9,2],[10,2,10,0],[11,2,12,0,"ByteData"],[11,10,12,8],[11,11,12,9,"getBitsLength"],[11,24,12,22],[11,27,12,25],[11,36,12,34,"getBitsLength"],[11,49,12,47,"getBitsLength"],[11,50,12,49,"length"],[11,56,12,55],[11,58,12,57],[12,4,13,2],[12,11,13,9,"length"],[12,17,13,15],[12,20,13,18],[12,21,13,19],[13,2,14,0],[13,3,14,1],[14,2,16,0,"ByteData"],[14,10,16,8],[14,11,16,9,"prototype"],[14,20,16,18],[14,21,16,19,"getLength"],[14,30,16,28],[14,33,16,31],[14,42,16,40,"getLength"],[14,51,16,49,"getLength"],[14,52,16,49],[14,54,16,53],[15,4,17,2],[15,11,17,9],[15,15,17,13],[15,16,17,14,"data"],[15,20,17,18],[15,21,17,19,"length"],[15,27,17,25],[16,2,18,0],[16,3,18,1],[17,2,20,0,"ByteData"],[17,10,20,8],[17,11,20,9,"prototype"],[17,20,20,18],[17,21,20,19,"getBitsLength"],[17,34,20,32],[17,37,20,35],[17,46,20,44,"getBitsLength"],[17,59,20,57,"getBitsLength"],[17,60,20,57],[17,62,20,61],[18,4,21,2],[18,11,21,9,"ByteData"],[18,19,21,17],[18,20,21,18,"getBitsLength"],[18,33,21,31],[18,34,21,32],[18,38,21,36],[18,39,21,37,"data"],[18,43,21,41],[18,44,21,42,"length"],[18,50,21,48],[18,51,21,49],[19,2,22,0],[19,3,22,1],[20,2,24,0,"ByteData"],[20,10,24,8],[20,11,24,9,"prototype"],[20,20,24,18],[20,21,24,19,"write"],[20,26,24,24],[20,29,24,27],[20,39,24,37,"bitBuffer"],[20,48,24,46],[20,50,24,48],[21,4,25,2],[21,9,25,7],[21,13,25,11,"i"],[21,14,25,12],[21,17,25,15],[21,18,25,16],[21,20,25,18,"l"],[21,21,25,19],[21,24,25,22],[21,28,25,26],[21,29,25,27,"data"],[21,33,25,31],[21,34,25,32,"length"],[21,40,25,38],[21,42,25,40,"i"],[21,43,25,41],[21,46,25,44,"l"],[21,47,25,45],[21,49,25,47,"i"],[21,50,25,48],[21,52,25,50],[21,54,25,52],[22,6,26,4,"bitBuffer"],[22,15,26,13],[22,16,26,14,"put"],[22,19,26,17],[22,20,26,18],[22,24,26,22],[22,25,26,23,"data"],[22,29,26,27],[22,30,26,28,"i"],[22,31,26,29],[22,32,26,30],[22,34,26,32],[22,35,26,33],[22,36,26,34],[23,4,27,2],[24,2,28,0],[24,3,28,1],[25,2,30,0,"module"],[25,8,30,6],[25,9,30,7,"exports"],[25,16,30,14],[25,19,30,17,"ByteData"],[25,27,30,25],[26,0,30,25],[26,3]],"functionMap":{"names":["<global>","ByteData","getBitsLength","getLength","ByteData.prototype.write"],"mappings":"AAA;ACE;CDO;yBEE;CFE;+BGE;CHE;mCEE;CFE;2BIE;CJI"},"hasCjsExports":true},"type":"js/module"}]}