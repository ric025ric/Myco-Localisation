{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const Mode = require(_dependencyMap[0], \"./mode\");\n\n  /**\n   * Array of characters available in alphanumeric mode\n   *\n   * As per QR Code specification, to each character\n   * is assigned a value from 0 to 44 which in this case coincides\n   * with the array index\n   *\n   * @type {Array}\n   */\n  const ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];\n  function AlphanumericData(data) {\n    this.mode = Mode.ALPHANUMERIC;\n    this.data = data;\n  }\n  AlphanumericData.getBitsLength = function getBitsLength(length) {\n    return 11 * Math.floor(length / 2) + 6 * (length % 2);\n  };\n  AlphanumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  AlphanumericData.prototype.getBitsLength = function getBitsLength() {\n    return AlphanumericData.getBitsLength(this.data.length);\n  };\n  AlphanumericData.prototype.write = function write(bitBuffer) {\n    let i;\n\n    // Input data characters are divided into groups of two characters\n    // and encoded as 11-bit binary codes.\n    for (i = 0; i + 2 <= this.data.length; i += 2) {\n      // The character value of the first character is multiplied by 45\n      let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;\n\n      // The character value of the second digit is added to the product\n      value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);\n\n      // The sum is then stored as 11-bit binary number\n      bitBuffer.put(value, 11);\n    }\n\n    // If the number of input data characters is not a multiple of two,\n    // the character value of the final character is encoded as a 6-bit binary number.\n    if (this.data.length % 2) {\n      bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n    }\n  };\n  module.exports = AlphanumericData;\n});","lineCount":50,"map":[[2,2,1,0],[2,8,1,6,"Mode"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,50,1,29],[2,51,1,30],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,2,12,0],[13,8,12,6,"ALPHA_NUM_CHARS"],[13,23,12,21],[13,26,12,24],[13,27,13,2],[13,30,13,5],[13,32,13,7],[13,35,13,10],[13,37,13,12],[13,40,13,15],[13,42,13,17],[13,45,13,20],[13,47,13,22],[13,50,13,25],[13,52,13,27],[13,55,13,30],[13,57,13,32],[13,60,13,35],[13,62,13,37],[13,65,13,40],[13,67,13,42],[13,70,13,45],[13,72,13,47],[13,75,13,50],[13,77,14,2],[13,80,14,5],[13,82,14,7],[13,85,14,10],[13,87,14,12],[13,90,14,15],[13,92,14,17],[13,95,14,20],[13,97,14,22],[13,100,14,25],[13,102,14,27],[13,105,14,30],[13,107,14,32],[13,110,14,35],[13,112,14,37],[13,115,14,40],[13,117,14,42],[13,120,14,45],[13,122,14,47],[13,125,14,50],[13,127,14,52],[13,130,14,55],[13,132,14,57],[13,135,14,60],[13,137,14,62],[13,140,14,65],[13,142,15,2],[13,145,15,5],[13,147,15,7],[13,150,15,10],[13,152,15,12],[13,155,15,15],[13,157,15,17],[13,160,15,20],[13,162,15,22],[13,165,15,25],[13,167,15,27],[13,170,15,30],[13,172,15,32],[13,175,15,35],[13,177,15,37],[13,180,15,40],[13,182,15,42],[13,185,15,45],[13,187,15,47],[13,190,15,50],[13,192,15,52],[13,195,15,55],[13,197,15,57],[13,200,15,60],[13,202,15,62],[13,205,15,65],[13,207,16,2],[13,210,16,5],[13,212,16,7],[13,215,16,10],[13,217,16,12],[13,220,16,15],[13,222,16,17],[13,225,16,20],[13,227,16,22],[13,230,16,25],[13,232,16,27],[13,235,16,30],[13,237,16,32],[13,240,16,35],[13,242,16,37],[13,245,16,40],[13,247,16,42],[13,250,16,45],[13,251,17,1],[14,2,19,0],[14,11,19,9,"AlphanumericData"],[14,27,19,25,"AlphanumericData"],[14,28,19,27,"data"],[14,32,19,31],[14,34,19,33],[15,4,20,2],[15,8,20,6],[15,9,20,7,"mode"],[15,13,20,11],[15,16,20,14,"Mode"],[15,20,20,18],[15,21,20,19,"ALPHANUMERIC"],[15,33,20,31],[16,4,21,2],[16,8,21,6],[16,9,21,7,"data"],[16,13,21,11],[16,16,21,14,"data"],[16,20,21,18],[17,2,22,0],[18,2,24,0,"AlphanumericData"],[18,18,24,16],[18,19,24,17,"getBitsLength"],[18,32,24,30],[18,35,24,33],[18,44,24,42,"getBitsLength"],[18,57,24,55,"getBitsLength"],[18,58,24,57,"length"],[18,64,24,63],[18,66,24,65],[19,4,25,2],[19,11,25,9],[19,13,25,11],[19,16,25,14,"Math"],[19,20,25,18],[19,21,25,19,"floor"],[19,26,25,24],[19,27,25,25,"length"],[19,33,25,31],[19,36,25,34],[19,37,25,35],[19,38,25,36],[19,41,25,39],[19,42,25,40],[19,46,25,44,"length"],[19,52,25,50],[19,55,25,53],[19,56,25,54],[19,57,25,55],[20,2,26,0],[20,3,26,1],[21,2,28,0,"AlphanumericData"],[21,18,28,16],[21,19,28,17,"prototype"],[21,28,28,26],[21,29,28,27,"getLength"],[21,38,28,36],[21,41,28,39],[21,50,28,48,"getLength"],[21,59,28,57,"getLength"],[21,60,28,57],[21,62,28,61],[22,4,29,2],[22,11,29,9],[22,15,29,13],[22,16,29,14,"data"],[22,20,29,18],[22,21,29,19,"length"],[22,27,29,25],[23,2,30,0],[23,3,30,1],[24,2,32,0,"AlphanumericData"],[24,18,32,16],[24,19,32,17,"prototype"],[24,28,32,26],[24,29,32,27,"getBitsLength"],[24,42,32,40],[24,45,32,43],[24,54,32,52,"getBitsLength"],[24,67,32,65,"getBitsLength"],[24,68,32,65],[24,70,32,69],[25,4,33,2],[25,11,33,9,"AlphanumericData"],[25,27,33,25],[25,28,33,26,"getBitsLength"],[25,41,33,39],[25,42,33,40],[25,46,33,44],[25,47,33,45,"data"],[25,51,33,49],[25,52,33,50,"length"],[25,58,33,56],[25,59,33,57],[26,2,34,0],[26,3,34,1],[27,2,36,0,"AlphanumericData"],[27,18,36,16],[27,19,36,17,"prototype"],[27,28,36,26],[27,29,36,27,"write"],[27,34,36,32],[27,37,36,35],[27,46,36,44,"write"],[27,51,36,49,"write"],[27,52,36,51,"bitBuffer"],[27,61,36,60],[27,63,36,62],[28,4,37,2],[28,8,37,6,"i"],[28,9,37,7],[30,4,39,2],[31,4,40,2],[32,4,41,2],[32,9,41,7,"i"],[32,10,41,8],[32,13,41,11],[32,14,41,12],[32,16,41,14,"i"],[32,17,41,15],[32,20,41,18],[32,21,41,19],[32,25,41,23],[32,29,41,27],[32,30,41,28,"data"],[32,34,41,32],[32,35,41,33,"length"],[32,41,41,39],[32,43,41,41,"i"],[32,44,41,42],[32,48,41,46],[32,49,41,47],[32,51,41,49],[33,6,42,4],[34,6,43,4],[34,10,43,8,"value"],[34,15,43,13],[34,18,43,16,"ALPHA_NUM_CHARS"],[34,33,43,31],[34,34,43,32,"indexOf"],[34,41,43,39],[34,42,43,40],[34,46,43,44],[34,47,43,45,"data"],[34,51,43,49],[34,52,43,50,"i"],[34,53,43,51],[34,54,43,52],[34,55,43,53],[34,58,43,56],[34,60,43,58],[36,6,45,4],[37,6,46,4,"value"],[37,11,46,9],[37,15,46,13,"ALPHA_NUM_CHARS"],[37,30,46,28],[37,31,46,29,"indexOf"],[37,38,46,36],[37,39,46,37],[37,43,46,41],[37,44,46,42,"data"],[37,48,46,46],[37,49,46,47,"i"],[37,50,46,48],[37,53,46,51],[37,54,46,52],[37,55,46,53],[37,56,46,54],[39,6,48,4],[40,6,49,4,"bitBuffer"],[40,15,49,13],[40,16,49,14,"put"],[40,19,49,17],[40,20,49,18,"value"],[40,25,49,23],[40,27,49,25],[40,29,49,27],[40,30,49,28],[41,4,50,2],[43,4,52,2],[44,4,53,2],[45,4,54,2],[45,8,54,6],[45,12,54,10],[45,13,54,11,"data"],[45,17,54,15],[45,18,54,16,"length"],[45,24,54,22],[45,27,54,25],[45,28,54,26],[45,30,54,28],[46,6,55,4,"bitBuffer"],[46,15,55,13],[46,16,55,14,"put"],[46,19,55,17],[46,20,55,18,"ALPHA_NUM_CHARS"],[46,35,55,33],[46,36,55,34,"indexOf"],[46,43,55,41],[46,44,55,42],[46,48,55,46],[46,49,55,47,"data"],[46,53,55,51],[46,54,55,52,"i"],[46,55,55,53],[46,56,55,54],[46,57,55,55],[46,59,55,57],[46,60,55,58],[46,61,55,59],[47,4,56,2],[48,2,57,0],[48,3,57,1],[49,2,59,0,"module"],[49,8,59,6],[49,9,59,7,"exports"],[49,16,59,14],[49,19,59,17,"AlphanumericData"],[49,35,59,33],[50,0,59,33],[50,3]],"functionMap":{"names":["<global>","AlphanumericData","getBitsLength","getLength","write"],"mappings":"AAA;ACkB;CDG;iCEE;CFE;uCGE;CHE;2CEE;CFE;mCIE;CJqB"},"hasCjsExports":true},"type":"js/module"}]}