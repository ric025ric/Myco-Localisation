{"dependencies":[{"name":"./interlace","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":21,"index":36},"end":{"line":3,"column":43,"index":58}}],"key":"N/IHRJiIVu/2RUMe3Em0ytXfNgI=","exportNames":["*"],"imports":1}},{"name":"./paeth-predictor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":21,"index":81},"end":{"line":4,"column":49,"index":109}}],"key":"fI75YoBtRz24BS7MNevPq6rzxzY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  let interlaceUtils = require(_dependencyMap[0], \"./interlace\");\n  let paethPredictor = require(_dependencyMap[1], \"./paeth-predictor\");\n  function getByteWidth(width, bpp, depth) {\n    let byteWidth = width * bpp;\n    if (depth !== 8) {\n      byteWidth = Math.ceil(byteWidth / (8 / depth));\n    }\n    return byteWidth;\n  }\n  let Filter = module.exports = function (bitmapInfo, dependencies) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let interlace = bitmapInfo.interlace;\n    let bpp = bitmapInfo.bpp;\n    let depth = bitmapInfo.depth;\n    this.read = dependencies.read;\n    this.write = dependencies.write;\n    this.complete = dependencies.complete;\n    this._imageIndex = 0;\n    this._images = [];\n    if (interlace) {\n      let passes = interlaceUtils.getImagePasses(width, height);\n      for (let i = 0; i < passes.length; i++) {\n        this._images.push({\n          byteWidth: getByteWidth(passes[i].width, bpp, depth),\n          height: passes[i].height,\n          lineIndex: 0\n        });\n      }\n    } else {\n      this._images.push({\n        byteWidth: getByteWidth(width, bpp, depth),\n        height: height,\n        lineIndex: 0\n      });\n    }\n\n    // when filtering the line we look at the pixel to the left\n    // the spec also says it is done on a byte level regardless of the number of pixels\n    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back\n    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.\n    if (depth === 8) {\n      this._xComparison = bpp;\n    } else if (depth === 16) {\n      this._xComparison = bpp * 2;\n    } else {\n      this._xComparison = 1;\n    }\n  };\n  Filter.prototype.start = function () {\n    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));\n  };\n  Filter.prototype._unFilterType1 = function (rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    for (let x = 0; x < byteWidth; x++) {\n      let rawByte = rawData[1 + x];\n      let f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n      unfilteredLine[x] = rawByte + f1Left;\n    }\n  };\n  Filter.prototype._unFilterType2 = function (rawData, unfilteredLine, byteWidth) {\n    let lastLine = this._lastLine;\n    for (let x = 0; x < byteWidth; x++) {\n      let rawByte = rawData[1 + x];\n      let f2Up = lastLine ? lastLine[x] : 0;\n      unfilteredLine[x] = rawByte + f2Up;\n    }\n  };\n  Filter.prototype._unFilterType3 = function (rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for (let x = 0; x < byteWidth; x++) {\n      let rawByte = rawData[1 + x];\n      let f3Up = lastLine ? lastLine[x] : 0;\n      let f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n      let f3Add = Math.floor((f3Left + f3Up) / 2);\n      unfilteredLine[x] = rawByte + f3Add;\n    }\n  };\n  Filter.prototype._unFilterType4 = function (rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for (let x = 0; x < byteWidth; x++) {\n      let rawByte = rawData[1 + x];\n      let f4Up = lastLine ? lastLine[x] : 0;\n      let f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n      let f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;\n      let f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);\n      unfilteredLine[x] = rawByte + f4Add;\n    }\n  };\n  Filter.prototype._reverseFilterLine = function (rawData) {\n    let filter = rawData[0];\n    let unfilteredLine;\n    let currentImage = this._images[this._imageIndex];\n    let byteWidth = currentImage.byteWidth;\n    if (filter === 0) {\n      unfilteredLine = rawData.slice(1, byteWidth + 1);\n    } else {\n      unfilteredLine = Buffer.alloc(byteWidth);\n      switch (filter) {\n        case 1:\n          this._unFilterType1(rawData, unfilteredLine, byteWidth);\n          break;\n        case 2:\n          this._unFilterType2(rawData, unfilteredLine, byteWidth);\n          break;\n        case 3:\n          this._unFilterType3(rawData, unfilteredLine, byteWidth);\n          break;\n        case 4:\n          this._unFilterType4(rawData, unfilteredLine, byteWidth);\n          break;\n        default:\n          throw new Error(\"Unrecognised filter type - \" + filter);\n      }\n    }\n    this.write(unfilteredLine);\n    currentImage.lineIndex++;\n    if (currentImage.lineIndex >= currentImage.height) {\n      this._lastLine = null;\n      this._imageIndex++;\n      currentImage = this._images[this._imageIndex];\n    } else {\n      this._lastLine = unfilteredLine;\n    }\n    if (currentImage) {\n      // read, using the byte width that may be from the new current image\n      this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));\n    } else {\n      this._lastLine = null;\n      this.complete();\n    }\n  };\n});","lineCount":141,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"interlaceUtils"],[4,20,3,18],[4,23,3,21,"require"],[4,30,3,28],[4,31,3,28,"_dependencyMap"],[4,45,3,28],[4,63,3,42],[4,64,3,43],[5,2,4,0],[5,6,4,4,"paethPredictor"],[5,20,4,18],[5,23,4,21,"require"],[5,30,4,28],[5,31,4,28,"_dependencyMap"],[5,45,4,28],[5,69,4,48],[5,70,4,49],[6,2,6,0],[6,11,6,9,"getByteWidth"],[6,23,6,21,"getByteWidth"],[6,24,6,22,"width"],[6,29,6,27],[6,31,6,29,"bpp"],[6,34,6,32],[6,36,6,34,"depth"],[6,41,6,39],[6,43,6,41],[7,4,7,2],[7,8,7,6,"byteWidth"],[7,17,7,15],[7,20,7,18,"width"],[7,25,7,23],[7,28,7,26,"bpp"],[7,31,7,29],[8,4,8,2],[8,8,8,6,"depth"],[8,13,8,11],[8,18,8,16],[8,19,8,17],[8,21,8,19],[9,6,9,4,"byteWidth"],[9,15,9,13],[9,18,9,16,"Math"],[9,22,9,20],[9,23,9,21,"ceil"],[9,27,9,25],[9,28,9,26,"byteWidth"],[9,37,9,35],[9,41,9,39],[9,42,9,40],[9,45,9,43,"depth"],[9,50,9,48],[9,51,9,49],[9,52,9,50],[10,4,10,2],[11,4,11,2],[11,11,11,9,"byteWidth"],[11,20,11,18],[12,2,12,0],[13,2,14,0],[13,6,14,4,"Filter"],[13,12,14,10],[13,15,14,14,"module"],[13,21,14,20],[13,22,14,21,"exports"],[13,29,14,28],[13,32,14,31],[13,42,14,41,"bitmapInfo"],[13,52,14,51],[13,54,14,53,"dependencies"],[13,66,14,65],[13,68,14,67],[14,4,15,2],[14,8,15,6,"width"],[14,13,15,11],[14,16,15,14,"bitmapInfo"],[14,26,15,24],[14,27,15,25,"width"],[14,32,15,30],[15,4,16,2],[15,8,16,6,"height"],[15,14,16,12],[15,17,16,15,"bitmapInfo"],[15,27,16,25],[15,28,16,26,"height"],[15,34,16,32],[16,4,17,2],[16,8,17,6,"interlace"],[16,17,17,15],[16,20,17,18,"bitmapInfo"],[16,30,17,28],[16,31,17,29,"interlace"],[16,40,17,38],[17,4,18,2],[17,8,18,6,"bpp"],[17,11,18,9],[17,14,18,12,"bitmapInfo"],[17,24,18,22],[17,25,18,23,"bpp"],[17,28,18,26],[18,4,19,2],[18,8,19,6,"depth"],[18,13,19,11],[18,16,19,14,"bitmapInfo"],[18,26,19,24],[18,27,19,25,"depth"],[18,32,19,30],[19,4,21,2],[19,8,21,6],[19,9,21,7,"read"],[19,13,21,11],[19,16,21,14,"dependencies"],[19,28,21,26],[19,29,21,27,"read"],[19,33,21,31],[20,4,22,2],[20,8,22,6],[20,9,22,7,"write"],[20,14,22,12],[20,17,22,15,"dependencies"],[20,29,22,27],[20,30,22,28,"write"],[20,35,22,33],[21,4,23,2],[21,8,23,6],[21,9,23,7,"complete"],[21,17,23,15],[21,20,23,18,"dependencies"],[21,32,23,30],[21,33,23,31,"complete"],[21,41,23,39],[22,4,25,2],[22,8,25,6],[22,9,25,7,"_imageIndex"],[22,20,25,18],[22,23,25,21],[22,24,25,22],[23,4,26,2],[23,8,26,6],[23,9,26,7,"_images"],[23,16,26,14],[23,19,26,17],[23,21,26,19],[24,4,27,2],[24,8,27,6,"interlace"],[24,17,27,15],[24,19,27,17],[25,6,28,4],[25,10,28,8,"passes"],[25,16,28,14],[25,19,28,17,"interlaceUtils"],[25,33,28,31],[25,34,28,32,"getImagePasses"],[25,48,28,46],[25,49,28,47,"width"],[25,54,28,52],[25,56,28,54,"height"],[25,62,28,60],[25,63,28,61],[26,6,29,4],[26,11,29,9],[26,15,29,13,"i"],[26,16,29,14],[26,19,29,17],[26,20,29,18],[26,22,29,20,"i"],[26,23,29,21],[26,26,29,24,"passes"],[26,32,29,30],[26,33,29,31,"length"],[26,39,29,37],[26,41,29,39,"i"],[26,42,29,40],[26,44,29,42],[26,46,29,44],[27,8,30,6],[27,12,30,10],[27,13,30,11,"_images"],[27,20,30,18],[27,21,30,19,"push"],[27,25,30,23],[27,26,30,24],[28,10,31,8,"byteWidth"],[28,19,31,17],[28,21,31,19,"getByteWidth"],[28,33,31,31],[28,34,31,32,"passes"],[28,40,31,38],[28,41,31,39,"i"],[28,42,31,40],[28,43,31,41],[28,44,31,42,"width"],[28,49,31,47],[28,51,31,49,"bpp"],[28,54,31,52],[28,56,31,54,"depth"],[28,61,31,59],[28,62,31,60],[29,10,32,8,"height"],[29,16,32,14],[29,18,32,16,"passes"],[29,24,32,22],[29,25,32,23,"i"],[29,26,32,24],[29,27,32,25],[29,28,32,26,"height"],[29,34,32,32],[30,10,33,8,"lineIndex"],[30,19,33,17],[30,21,33,19],[31,8,34,6],[31,9,34,7],[31,10,34,8],[32,6,35,4],[33,4,36,2],[33,5,36,3],[33,11,36,9],[34,6,37,4],[34,10,37,8],[34,11,37,9,"_images"],[34,18,37,16],[34,19,37,17,"push"],[34,23,37,21],[34,24,37,22],[35,8,38,6,"byteWidth"],[35,17,38,15],[35,19,38,17,"getByteWidth"],[35,31,38,29],[35,32,38,30,"width"],[35,37,38,35],[35,39,38,37,"bpp"],[35,42,38,40],[35,44,38,42,"depth"],[35,49,38,47],[35,50,38,48],[36,8,39,6,"height"],[36,14,39,12],[36,16,39,14,"height"],[36,22,39,20],[37,8,40,6,"lineIndex"],[37,17,40,15],[37,19,40,17],[38,6,41,4],[38,7,41,5],[38,8,41,6],[39,4,42,2],[41,4,44,2],[42,4,45,2],[43,4,46,2],[44,4,47,2],[45,4,48,2],[45,8,48,6,"depth"],[45,13,48,11],[45,18,48,16],[45,19,48,17],[45,21,48,19],[46,6,49,4],[46,10,49,8],[46,11,49,9,"_xComparison"],[46,23,49,21],[46,26,49,24,"bpp"],[46,29,49,27],[47,4,50,2],[47,5,50,3],[47,11,50,9],[47,15,50,13,"depth"],[47,20,50,18],[47,25,50,23],[47,27,50,25],[47,29,50,27],[48,6,51,4],[48,10,51,8],[48,11,51,9,"_xComparison"],[48,23,51,21],[48,26,51,24,"bpp"],[48,29,51,27],[48,32,51,30],[48,33,51,31],[49,4,52,2],[49,5,52,3],[49,11,52,9],[50,6,53,4],[50,10,53,8],[50,11,53,9,"_xComparison"],[50,23,53,21],[50,26,53,24],[50,27,53,25],[51,4,54,2],[52,2,55,0],[52,3,55,2],[53,2,57,0,"Filter"],[53,8,57,6],[53,9,57,7,"prototype"],[53,18,57,16],[53,19,57,17,"start"],[53,24,57,22],[53,27,57,25],[53,39,57,37],[54,4,58,2],[54,8,58,6],[54,9,58,7,"read"],[54,13,58,11],[54,14,59,4],[54,18,59,8],[54,19,59,9,"_images"],[54,26,59,16],[54,27,59,17],[54,31,59,21],[54,32,59,22,"_imageIndex"],[54,43,59,33],[54,44,59,34],[54,45,59,35,"byteWidth"],[54,54,59,44],[54,57,59,47],[54,58,59,48],[54,60,60,4],[54,64,60,8],[54,65,60,9,"_reverseFilterLine"],[54,83,60,27],[54,84,60,28,"bind"],[54,88,60,32],[54,89,60,33],[54,93,60,37],[54,94,61,2],[54,95,61,3],[55,2,62,0],[55,3,62,1],[56,2,64,0,"Filter"],[56,8,64,6],[56,9,64,7,"prototype"],[56,18,64,16],[56,19,64,17,"_unFilterType1"],[56,33,64,31],[56,36,64,34],[56,46,65,2,"rawData"],[56,53,65,9],[56,55,66,2,"unfilteredLine"],[56,69,66,16],[56,71,67,2,"byteWidth"],[56,80,67,11],[56,82,68,2],[57,4,69,2],[57,8,69,6,"xComparison"],[57,19,69,17],[57,22,69,20],[57,26,69,24],[57,27,69,25,"_xComparison"],[57,39,69,37],[58,4,70,2],[58,8,70,6,"xBiggerThan"],[58,19,70,17],[58,22,70,20,"xComparison"],[58,33,70,31],[58,36,70,34],[58,37,70,35],[59,4,72,2],[59,9,72,7],[59,13,72,11,"x"],[59,14,72,12],[59,17,72,15],[59,18,72,16],[59,20,72,18,"x"],[59,21,72,19],[59,24,72,22,"byteWidth"],[59,33,72,31],[59,35,72,33,"x"],[59,36,72,34],[59,38,72,36],[59,40,72,38],[60,6,73,4],[60,10,73,8,"rawByte"],[60,17,73,15],[60,20,73,18,"rawData"],[60,27,73,25],[60,28,73,26],[60,29,73,27],[60,32,73,30,"x"],[60,33,73,31],[60,34,73,32],[61,6,74,4],[61,10,74,8,"f1Left"],[61,16,74,14],[61,19,74,17,"x"],[61,20,74,18],[61,23,74,21,"xBiggerThan"],[61,34,74,32],[61,37,74,35,"unfilteredLine"],[61,51,74,49],[61,52,74,50,"x"],[61,53,74,51],[61,56,74,54,"xComparison"],[61,67,74,65],[61,68,74,66],[61,71,74,69],[61,72,74,70],[62,6,75,4,"unfilteredLine"],[62,20,75,18],[62,21,75,19,"x"],[62,22,75,20],[62,23,75,21],[62,26,75,24,"rawByte"],[62,33,75,31],[62,36,75,34,"f1Left"],[62,42,75,40],[63,4,76,2],[64,2,77,0],[64,3,77,1],[65,2,79,0,"Filter"],[65,8,79,6],[65,9,79,7,"prototype"],[65,18,79,16],[65,19,79,17,"_unFilterType2"],[65,33,79,31],[65,36,79,34],[65,46,80,2,"rawData"],[65,53,80,9],[65,55,81,2,"unfilteredLine"],[65,69,81,16],[65,71,82,2,"byteWidth"],[65,80,82,11],[65,82,83,2],[66,4,84,2],[66,8,84,6,"lastLine"],[66,16,84,14],[66,19,84,17],[66,23,84,21],[66,24,84,22,"_lastLine"],[66,33,84,31],[67,4,86,2],[67,9,86,7],[67,13,86,11,"x"],[67,14,86,12],[67,17,86,15],[67,18,86,16],[67,20,86,18,"x"],[67,21,86,19],[67,24,86,22,"byteWidth"],[67,33,86,31],[67,35,86,33,"x"],[67,36,86,34],[67,38,86,36],[67,40,86,38],[68,6,87,4],[68,10,87,8,"rawByte"],[68,17,87,15],[68,20,87,18,"rawData"],[68,27,87,25],[68,28,87,26],[68,29,87,27],[68,32,87,30,"x"],[68,33,87,31],[68,34,87,32],[69,6,88,4],[69,10,88,8,"f2Up"],[69,14,88,12],[69,17,88,15,"lastLine"],[69,25,88,23],[69,28,88,26,"lastLine"],[69,36,88,34],[69,37,88,35,"x"],[69,38,88,36],[69,39,88,37],[69,42,88,40],[69,43,88,41],[70,6,89,4,"unfilteredLine"],[70,20,89,18],[70,21,89,19,"x"],[70,22,89,20],[70,23,89,21],[70,26,89,24,"rawByte"],[70,33,89,31],[70,36,89,34,"f2Up"],[70,40,89,38],[71,4,90,2],[72,2,91,0],[72,3,91,1],[73,2,93,0,"Filter"],[73,8,93,6],[73,9,93,7,"prototype"],[73,18,93,16],[73,19,93,17,"_unFilterType3"],[73,33,93,31],[73,36,93,34],[73,46,94,2,"rawData"],[73,53,94,9],[73,55,95,2,"unfilteredLine"],[73,69,95,16],[73,71,96,2,"byteWidth"],[73,80,96,11],[73,82,97,2],[74,4,98,2],[74,8,98,6,"xComparison"],[74,19,98,17],[74,22,98,20],[74,26,98,24],[74,27,98,25,"_xComparison"],[74,39,98,37],[75,4,99,2],[75,8,99,6,"xBiggerThan"],[75,19,99,17],[75,22,99,20,"xComparison"],[75,33,99,31],[75,36,99,34],[75,37,99,35],[76,4,100,2],[76,8,100,6,"lastLine"],[76,16,100,14],[76,19,100,17],[76,23,100,21],[76,24,100,22,"_lastLine"],[76,33,100,31],[77,4,102,2],[77,9,102,7],[77,13,102,11,"x"],[77,14,102,12],[77,17,102,15],[77,18,102,16],[77,20,102,18,"x"],[77,21,102,19],[77,24,102,22,"byteWidth"],[77,33,102,31],[77,35,102,33,"x"],[77,36,102,34],[77,38,102,36],[77,40,102,38],[78,6,103,4],[78,10,103,8,"rawByte"],[78,17,103,15],[78,20,103,18,"rawData"],[78,27,103,25],[78,28,103,26],[78,29,103,27],[78,32,103,30,"x"],[78,33,103,31],[78,34,103,32],[79,6,104,4],[79,10,104,8,"f3Up"],[79,14,104,12],[79,17,104,15,"lastLine"],[79,25,104,23],[79,28,104,26,"lastLine"],[79,36,104,34],[79,37,104,35,"x"],[79,38,104,36],[79,39,104,37],[79,42,104,40],[79,43,104,41],[80,6,105,4],[80,10,105,8,"f3Left"],[80,16,105,14],[80,19,105,17,"x"],[80,20,105,18],[80,23,105,21,"xBiggerThan"],[80,34,105,32],[80,37,105,35,"unfilteredLine"],[80,51,105,49],[80,52,105,50,"x"],[80,53,105,51],[80,56,105,54,"xComparison"],[80,67,105,65],[80,68,105,66],[80,71,105,69],[80,72,105,70],[81,6,106,4],[81,10,106,8,"f3Add"],[81,15,106,13],[81,18,106,16,"Math"],[81,22,106,20],[81,23,106,21,"floor"],[81,28,106,26],[81,29,106,27],[81,30,106,28,"f3Left"],[81,36,106,34],[81,39,106,37,"f3Up"],[81,43,106,41],[81,47,106,45],[81,48,106,46],[81,49,106,47],[82,6,107,4,"unfilteredLine"],[82,20,107,18],[82,21,107,19,"x"],[82,22,107,20],[82,23,107,21],[82,26,107,24,"rawByte"],[82,33,107,31],[82,36,107,34,"f3Add"],[82,41,107,39],[83,4,108,2],[84,2,109,0],[84,3,109,1],[85,2,111,0,"Filter"],[85,8,111,6],[85,9,111,7,"prototype"],[85,18,111,16],[85,19,111,17,"_unFilterType4"],[85,33,111,31],[85,36,111,34],[85,46,112,2,"rawData"],[85,53,112,9],[85,55,113,2,"unfilteredLine"],[85,69,113,16],[85,71,114,2,"byteWidth"],[85,80,114,11],[85,82,115,2],[86,4,116,2],[86,8,116,6,"xComparison"],[86,19,116,17],[86,22,116,20],[86,26,116,24],[86,27,116,25,"_xComparison"],[86,39,116,37],[87,4,117,2],[87,8,117,6,"xBiggerThan"],[87,19,117,17],[87,22,117,20,"xComparison"],[87,33,117,31],[87,36,117,34],[87,37,117,35],[88,4,118,2],[88,8,118,6,"lastLine"],[88,16,118,14],[88,19,118,17],[88,23,118,21],[88,24,118,22,"_lastLine"],[88,33,118,31],[89,4,120,2],[89,9,120,7],[89,13,120,11,"x"],[89,14,120,12],[89,17,120,15],[89,18,120,16],[89,20,120,18,"x"],[89,21,120,19],[89,24,120,22,"byteWidth"],[89,33,120,31],[89,35,120,33,"x"],[89,36,120,34],[89,38,120,36],[89,40,120,38],[90,6,121,4],[90,10,121,8,"rawByte"],[90,17,121,15],[90,20,121,18,"rawData"],[90,27,121,25],[90,28,121,26],[90,29,121,27],[90,32,121,30,"x"],[90,33,121,31],[90,34,121,32],[91,6,122,4],[91,10,122,8,"f4Up"],[91,14,122,12],[91,17,122,15,"lastLine"],[91,25,122,23],[91,28,122,26,"lastLine"],[91,36,122,34],[91,37,122,35,"x"],[91,38,122,36],[91,39,122,37],[91,42,122,40],[91,43,122,41],[92,6,123,4],[92,10,123,8,"f4Left"],[92,16,123,14],[92,19,123,17,"x"],[92,20,123,18],[92,23,123,21,"xBiggerThan"],[92,34,123,32],[92,37,123,35,"unfilteredLine"],[92,51,123,49],[92,52,123,50,"x"],[92,53,123,51],[92,56,123,54,"xComparison"],[92,67,123,65],[92,68,123,66],[92,71,123,69],[92,72,123,70],[93,6,124,4],[93,10,124,8,"f4UpLeft"],[93,18,124,16],[93,21,124,19,"x"],[93,22,124,20],[93,25,124,23,"xBiggerThan"],[93,36,124,34],[93,40,124,38,"lastLine"],[93,48,124,46],[93,51,124,49,"lastLine"],[93,59,124,57],[93,60,124,58,"x"],[93,61,124,59],[93,64,124,62,"xComparison"],[93,75,124,73],[93,76,124,74],[93,79,124,77],[93,80,124,78],[94,6,125,4],[94,10,125,8,"f4Add"],[94,15,125,13],[94,18,125,16,"paethPredictor"],[94,32,125,30],[94,33,125,31,"f4Left"],[94,39,125,37],[94,41,125,39,"f4Up"],[94,45,125,43],[94,47,125,45,"f4UpLeft"],[94,55,125,53],[94,56,125,54],[95,6,126,4,"unfilteredLine"],[95,20,126,18],[95,21,126,19,"x"],[95,22,126,20],[95,23,126,21],[95,26,126,24,"rawByte"],[95,33,126,31],[95,36,126,34,"f4Add"],[95,41,126,39],[96,4,127,2],[97,2,128,0],[97,3,128,1],[98,2,130,0,"Filter"],[98,8,130,6],[98,9,130,7,"prototype"],[98,18,130,16],[98,19,130,17,"_reverseFilterLine"],[98,37,130,35],[98,40,130,38],[98,50,130,48,"rawData"],[98,57,130,55],[98,59,130,57],[99,4,131,2],[99,8,131,6,"filter"],[99,14,131,12],[99,17,131,15,"rawData"],[99,24,131,22],[99,25,131,23],[99,26,131,24],[99,27,131,25],[100,4,132,2],[100,8,132,6,"unfilteredLine"],[100,22,132,20],[101,4,133,2],[101,8,133,6,"currentImage"],[101,20,133,18],[101,23,133,21],[101,27,133,25],[101,28,133,26,"_images"],[101,35,133,33],[101,36,133,34],[101,40,133,38],[101,41,133,39,"_imageIndex"],[101,52,133,50],[101,53,133,51],[102,4,134,2],[102,8,134,6,"byteWidth"],[102,17,134,15],[102,20,134,18,"currentImage"],[102,32,134,30],[102,33,134,31,"byteWidth"],[102,42,134,40],[103,4,136,2],[103,8,136,6,"filter"],[103,14,136,12],[103,19,136,17],[103,20,136,18],[103,22,136,20],[104,6,137,4,"unfilteredLine"],[104,20,137,18],[104,23,137,21,"rawData"],[104,30,137,28],[104,31,137,29,"slice"],[104,36,137,34],[104,37,137,35],[104,38,137,36],[104,40,137,38,"byteWidth"],[104,49,137,47],[104,52,137,50],[104,53,137,51],[104,54,137,52],[105,4,138,2],[105,5,138,3],[105,11,138,9],[106,6,139,4,"unfilteredLine"],[106,20,139,18],[106,23,139,21,"Buffer"],[106,29,139,27],[106,30,139,28,"alloc"],[106,35,139,33],[106,36,139,34,"byteWidth"],[106,45,139,43],[106,46,139,44],[107,6,141,4],[107,14,141,12,"filter"],[107,20,141,18],[108,8,142,6],[108,13,142,11],[108,14,142,12],[109,10,143,8],[109,14,143,12],[109,15,143,13,"_unFilterType1"],[109,29,143,27],[109,30,143,28,"rawData"],[109,37,143,35],[109,39,143,37,"unfilteredLine"],[109,53,143,51],[109,55,143,53,"byteWidth"],[109,64,143,62],[109,65,143,63],[110,10,144,8],[111,8,145,6],[111,13,145,11],[111,14,145,12],[112,10,146,8],[112,14,146,12],[112,15,146,13,"_unFilterType2"],[112,29,146,27],[112,30,146,28,"rawData"],[112,37,146,35],[112,39,146,37,"unfilteredLine"],[112,53,146,51],[112,55,146,53,"byteWidth"],[112,64,146,62],[112,65,146,63],[113,10,147,8],[114,8,148,6],[114,13,148,11],[114,14,148,12],[115,10,149,8],[115,14,149,12],[115,15,149,13,"_unFilterType3"],[115,29,149,27],[115,30,149,28,"rawData"],[115,37,149,35],[115,39,149,37,"unfilteredLine"],[115,53,149,51],[115,55,149,53,"byteWidth"],[115,64,149,62],[115,65,149,63],[116,10,150,8],[117,8,151,6],[117,13,151,11],[117,14,151,12],[118,10,152,8],[118,14,152,12],[118,15,152,13,"_unFilterType4"],[118,29,152,27],[118,30,152,28,"rawData"],[118,37,152,35],[118,39,152,37,"unfilteredLine"],[118,53,152,51],[118,55,152,53,"byteWidth"],[118,64,152,62],[118,65,152,63],[119,10,153,8],[120,8,154,6],[121,10,155,8],[121,16,155,14],[121,20,155,18,"Error"],[121,25,155,23],[121,26,155,24],[121,55,155,53],[121,58,155,56,"filter"],[121,64,155,62],[121,65,155,63],[122,6,156,4],[123,4,157,2],[124,4,159,2],[124,8,159,6],[124,9,159,7,"write"],[124,14,159,12],[124,15,159,13,"unfilteredLine"],[124,29,159,27],[124,30,159,28],[125,4,161,2,"currentImage"],[125,16,161,14],[125,17,161,15,"lineIndex"],[125,26,161,24],[125,28,161,26],[126,4,162,2],[126,8,162,6,"currentImage"],[126,20,162,18],[126,21,162,19,"lineIndex"],[126,30,162,28],[126,34,162,32,"currentImage"],[126,46,162,44],[126,47,162,45,"height"],[126,53,162,51],[126,55,162,53],[127,6,163,4],[127,10,163,8],[127,11,163,9,"_lastLine"],[127,20,163,18],[127,23,163,21],[127,27,163,25],[128,6,164,4],[128,10,164,8],[128,11,164,9,"_imageIndex"],[128,22,164,20],[128,24,164,22],[129,6,165,4,"currentImage"],[129,18,165,16],[129,21,165,19],[129,25,165,23],[129,26,165,24,"_images"],[129,33,165,31],[129,34,165,32],[129,38,165,36],[129,39,165,37,"_imageIndex"],[129,50,165,48],[129,51,165,49],[130,4,166,2],[130,5,166,3],[130,11,166,9],[131,6,167,4],[131,10,167,8],[131,11,167,9,"_lastLine"],[131,20,167,18],[131,23,167,21,"unfilteredLine"],[131,37,167,35],[132,4,168,2],[133,4,170,2],[133,8,170,6,"currentImage"],[133,20,170,18],[133,22,170,20],[134,6,171,4],[135,6,172,4],[135,10,172,8],[135,11,172,9,"read"],[135,15,172,13],[135,16,172,14,"currentImage"],[135,28,172,26],[135,29,172,27,"byteWidth"],[135,38,172,36],[135,41,172,39],[135,42,172,40],[135,44,172,42],[135,48,172,46],[135,49,172,47,"_reverseFilterLine"],[135,67,172,65],[135,68,172,66,"bind"],[135,72,172,70],[135,73,172,71],[135,77,172,75],[135,78,172,76],[135,79,172,77],[136,4,173,2],[136,5,173,3],[136,11,173,9],[137,6,174,4],[137,10,174,8],[137,11,174,9,"_lastLine"],[137,20,174,18],[137,23,174,21],[137,27,174,25],[138,6,175,4],[138,10,175,8],[138,11,175,9,"complete"],[138,19,175,17],[138,20,175,18],[138,21,175,19],[139,4,176,2],[140,2,177,0],[140,3,177,1],[141,0,177,2],[141,3]],"functionMap":{"names":["<global>","getByteWidth","module.exports","Filter.prototype.start","Filter.prototype._unFilterType1","Filter.prototype._unFilterType2","Filter.prototype._unFilterType3","Filter.prototype._unFilterType4","Filter.prototype._reverseFilterLine"],"mappings":"AAA;ACK;CDM;+BEE;CFyC;yBGE;CHK;kCIE;CJa;kCKE;CLY;kCME;CNgB;kCOE;CPiB;sCQE;CR+C"},"hasCjsExports":true},"type":"js/module"}]}