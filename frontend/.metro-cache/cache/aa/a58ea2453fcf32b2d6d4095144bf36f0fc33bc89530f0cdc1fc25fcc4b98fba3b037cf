{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"ConsecutiveNumbers\", {\n    enumerable: true,\n    get: function () {\n      return ConsecutiveNumbers;\n    }\n  });\n  /**\n   * A simple wrapper for consecutive postive integer arrays\n   * Only stores start and end indices for faster computation as numbers are consecutive.\n   */\n  class ConsecutiveNumbers {\n    constructor(startIndex, endIndex) {\n      this.startIndex = startIndex;\n      this.endIndex = endIndex;\n    }\n    /**\n     * Get the length of the array\n     */\n    get length() {\n      return Math.max(0, this.endIndex - this.startIndex + 1);\n    }\n    /**\n     * Get element at specified index\n     */\n    at(index) {\n      return this.startIndex + index;\n    }\n    /**\n     * Check if two consecutive numbers are equal\n     */\n    equals(other) {\n      return this.startIndex === other.startIndex && this.endIndex === other.endIndex;\n    }\n    /**\n     * Converts the consecutive range to an actual array\n     * @returns An array containing all consecutive numbers\n     */\n    toArray() {\n      if (this.length === 0) {\n        return [];\n      }\n      const array = new Array(this.length);\n      for (let i = 0; i < this.length; i++) {\n        array[i] = this.startIndex + i;\n      }\n      return array;\n    }\n    /**\n     * Check if array includes a value\n     */\n    includes(value) {\n      return value >= this.startIndex && value <= this.endIndex;\n    }\n    /**\n     * Get index of a value in the consecutive range\n     */\n    indexOf(value) {\n      return this.includes(value) ? value - this.startIndex : -1;\n    }\n    findValue(predicate) {\n      for (let i = 0; i < this.length; i++) {\n        const value = this.startIndex + i;\n        if (predicate(value, i, this)) {\n          return value;\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Tests whether all elements in the consecutive range pass the provided test function\n     * @param predicate A function that tests each element\n     * @returns true if all elements pass the test; otherwise, false\n     */\n    every(predicate) {\n      for (let i = 0; i < this.length; i++) {\n        const value = this.startIndex + i;\n        if (!predicate(value, i, this)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    /**\n     * Get a slice of the consecutive array\n     */\n    slice(start = 0, end = this.length) {\n      const newStart = this.startIndex + start;\n      const newEnd = this.startIndex + Math.min(end, this.length) - 1;\n      return new ConsecutiveNumbers(newStart, Math.max(newStart - 1, newEnd));\n    }\n    /**\n     * Implement iterator to enable for...of\n     */\n    *[Symbol.iterator]() {\n      for (let i = this.startIndex; i <= this.endIndex; i++) {\n        yield i;\n      }\n    }\n  }\n  ConsecutiveNumbers.EMPTY = new ConsecutiveNumbers(-1, -2);\n});","lineCount":107,"map":[[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"enumerable"],[8,14,5,0],[9,4,5,0,"get"],[9,7,5,0],[9,18,5,0,"get"],[9,19,5,0],[10,6,5,0],[10,13,5,0,"ConsecutiveNumbers"],[10,31,5,0],[11,4,5,0],[12,2,5,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,2,5,7],[17,8,5,13,"ConsecutiveNumbers"],[17,26,5,31],[17,27,5,32],[18,4,6,4,"constructor"],[18,15,6,15,"constructor"],[18,16,6,16,"startIndex"],[18,26,6,26],[18,28,6,28,"endIndex"],[18,36,6,36],[18,38,6,38],[19,6,7,8],[19,10,7,12],[19,11,7,13,"startIndex"],[19,21,7,23],[19,24,7,26,"startIndex"],[19,34,7,36],[20,6,8,8],[20,10,8,12],[20,11,8,13,"endIndex"],[20,19,8,21],[20,22,8,24,"endIndex"],[20,30,8,32],[21,4,9,4],[22,4,10,4],[23,0,11,0],[24,0,12,0],[25,4,13,4],[25,8,13,8,"length"],[25,14,13,14,"length"],[25,15,13,14],[25,17,13,17],[26,6,14,8],[26,13,14,15,"Math"],[26,17,14,19],[26,18,14,20,"max"],[26,21,14,23],[26,22,14,24],[26,23,14,25],[26,25,14,27],[26,29,14,31],[26,30,14,32,"endIndex"],[26,38,14,40],[26,41,14,43],[26,45,14,47],[26,46,14,48,"startIndex"],[26,56,14,58],[26,59,14,61],[26,60,14,62],[26,61,14,63],[27,4,15,4],[28,4,16,4],[29,0,17,0],[30,0,18,0],[31,4,19,4,"at"],[31,6,19,6,"at"],[31,7,19,7,"index"],[31,12,19,12],[31,14,19,14],[32,6,20,8],[32,13,20,15],[32,17,20,19],[32,18,20,20,"startIndex"],[32,28,20,30],[32,31,20,33,"index"],[32,36,20,38],[33,4,21,4],[34,4,22,4],[35,0,23,0],[36,0,24,0],[37,4,25,4,"equals"],[37,10,25,10,"equals"],[37,11,25,11,"other"],[37,16,25,16],[37,18,25,18],[38,6,26,8],[38,13,26,16],[38,17,26,20],[38,18,26,21,"startIndex"],[38,28,26,31],[38,33,26,36,"other"],[38,38,26,41],[38,39,26,42,"startIndex"],[38,49,26,52],[38,53,26,56],[38,57,26,60],[38,58,26,61,"endIndex"],[38,66,26,69],[38,71,26,74,"other"],[38,76,26,79],[38,77,26,80,"endIndex"],[38,85,26,88],[39,4,27,4],[40,4,28,4],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,4,32,4,"toArray"],[44,11,32,11,"toArray"],[44,12,32,11],[44,14,32,14],[45,6,33,8],[45,10,33,12],[45,14,33,16],[45,15,33,17,"length"],[45,21,33,23],[45,26,33,28],[45,27,33,29],[45,29,33,31],[46,8,34,12],[46,15,34,19],[46,17,34,21],[47,6,35,8],[48,6,36,8],[48,12,36,14,"array"],[48,17,36,19],[48,20,36,22],[48,24,36,26,"Array"],[48,29,36,31],[48,30,36,32],[48,34,36,36],[48,35,36,37,"length"],[48,41,36,43],[48,42,36,44],[49,6,37,8],[49,11,37,13],[49,15,37,17,"i"],[49,16,37,18],[49,19,37,21],[49,20,37,22],[49,22,37,24,"i"],[49,23,37,25],[49,26,37,28],[49,30,37,32],[49,31,37,33,"length"],[49,37,37,39],[49,39,37,41,"i"],[49,40,37,42],[49,42,37,44],[49,44,37,46],[50,8,38,12,"array"],[50,13,38,17],[50,14,38,18,"i"],[50,15,38,19],[50,16,38,20],[50,19,38,23],[50,23,38,27],[50,24,38,28,"startIndex"],[50,34,38,38],[50,37,38,41,"i"],[50,38,38,42],[51,6,39,8],[52,6,40,8],[52,13,40,15,"array"],[52,18,40,20],[53,4,41,4],[54,4,42,4],[55,0,43,0],[56,0,44,0],[57,4,45,4,"includes"],[57,12,45,12,"includes"],[57,13,45,13,"value"],[57,18,45,18],[57,20,45,20],[58,6,46,8],[58,13,46,15,"value"],[58,18,46,20],[58,22,46,24],[58,26,46,28],[58,27,46,29,"startIndex"],[58,37,46,39],[58,41,46,43,"value"],[58,46,46,48],[58,50,46,52],[58,54,46,56],[58,55,46,57,"endIndex"],[58,63,46,65],[59,4,47,4],[60,4,48,4],[61,0,49,0],[62,0,50,0],[63,4,51,4,"indexOf"],[63,11,51,11,"indexOf"],[63,12,51,12,"value"],[63,17,51,17],[63,19,51,19],[64,6,52,8],[64,13,52,15],[64,17,52,19],[64,18,52,20,"includes"],[64,26,52,28],[64,27,52,29,"value"],[64,32,52,34],[64,33,52,35],[64,36,52,38,"value"],[64,41,52,43],[64,44,52,46],[64,48,52,50],[64,49,52,51,"startIndex"],[64,59,52,61],[64,62,52,64],[64,63,52,65],[64,64,52,66],[65,4,53,4],[66,4,54,4,"findValue"],[66,13,54,13,"findValue"],[66,14,54,14,"predicate"],[66,23,54,23],[66,25,54,25],[67,6,55,8],[67,11,55,13],[67,15,55,17,"i"],[67,16,55,18],[67,19,55,21],[67,20,55,22],[67,22,55,24,"i"],[67,23,55,25],[67,26,55,28],[67,30,55,32],[67,31,55,33,"length"],[67,37,55,39],[67,39,55,41,"i"],[67,40,55,42],[67,42,55,44],[67,44,55,46],[68,8,56,12],[68,14,56,18,"value"],[68,19,56,23],[68,22,56,26],[68,26,56,30],[68,27,56,31,"startIndex"],[68,37,56,41],[68,40,56,44,"i"],[68,41,56,45],[69,8,57,12],[69,12,57,16,"predicate"],[69,21,57,25],[69,22,57,26,"value"],[69,27,57,31],[69,29,57,33,"i"],[69,30,57,34],[69,32,57,36],[69,36,57,40],[69,37,57,41],[69,39,57,43],[70,10,58,16],[70,17,58,23,"value"],[70,22,58,28],[71,8,59,12],[72,6,60,8],[73,6,61,8],[73,13,61,15,"undefined"],[73,22,61,24],[74,4,62,4],[75,4,63,4],[76,0,64,0],[77,0,65,0],[78,0,66,0],[79,0,67,0],[80,4,68,4,"every"],[80,9,68,9,"every"],[80,10,68,10,"predicate"],[80,19,68,19],[80,21,68,21],[81,6,69,8],[81,11,69,13],[81,15,69,17,"i"],[81,16,69,18],[81,19,69,21],[81,20,69,22],[81,22,69,24,"i"],[81,23,69,25],[81,26,69,28],[81,30,69,32],[81,31,69,33,"length"],[81,37,69,39],[81,39,69,41,"i"],[81,40,69,42],[81,42,69,44],[81,44,69,46],[82,8,70,12],[82,14,70,18,"value"],[82,19,70,23],[82,22,70,26],[82,26,70,30],[82,27,70,31,"startIndex"],[82,37,70,41],[82,40,70,44,"i"],[82,41,70,45],[83,8,71,12],[83,12,71,16],[83,13,71,17,"predicate"],[83,22,71,26],[83,23,71,27,"value"],[83,28,71,32],[83,30,71,34,"i"],[83,31,71,35],[83,33,71,37],[83,37,71,41],[83,38,71,42],[83,40,71,44],[84,10,72,16],[84,17,72,23],[84,22,72,28],[85,8,73,12],[86,6,74,8],[87,6,75,8],[87,13,75,15],[87,17,75,19],[88,4,76,4],[89,4,77,4],[90,0,78,0],[91,0,79,0],[92,4,80,4,"slice"],[92,9,80,9,"slice"],[92,10,80,10,"start"],[92,15,80,15],[92,18,80,18],[92,19,80,19],[92,21,80,21,"end"],[92,24,80,24],[92,27,80,27],[92,31,80,31],[92,32,80,32,"length"],[92,38,80,38],[92,40,80,40],[93,6,81,8],[93,12,81,14,"newStart"],[93,20,81,22],[93,23,81,25],[93,27,81,29],[93,28,81,30,"startIndex"],[93,38,81,40],[93,41,81,43,"start"],[93,46,81,48],[94,6,82,8],[94,12,82,14,"newEnd"],[94,18,82,20],[94,21,82,23],[94,25,82,27],[94,26,82,28,"startIndex"],[94,36,82,38],[94,39,82,41,"Math"],[94,43,82,45],[94,44,82,46,"min"],[94,47,82,49],[94,48,82,50,"end"],[94,51,82,53],[94,53,82,55],[94,57,82,59],[94,58,82,60,"length"],[94,64,82,66],[94,65,82,67],[94,68,82,70],[94,69,82,71],[95,6,83,8],[95,13,83,15],[95,17,83,19,"ConsecutiveNumbers"],[95,35,83,37],[95,36,83,38,"newStart"],[95,44,83,46],[95,46,83,48,"Math"],[95,50,83,52],[95,51,83,53,"max"],[95,54,83,56],[95,55,83,57,"newStart"],[95,63,83,65],[95,66,83,68],[95,67,83,69],[95,69,83,71,"newEnd"],[95,75,83,77],[95,76,83,78],[95,77,83,79],[96,4,84,4],[97,4,85,4],[98,0,86,0],[99,0,87,0],[100,4,88,4],[100,6,88,6,"Symbol"],[100,12,88,12],[100,13,88,13,"iterator"],[100,21,88,21],[100,25,88,25],[101,6,89,8],[101,11,89,13],[101,15,89,17,"i"],[101,16,89,18],[101,19,89,21],[101,23,89,25],[101,24,89,26,"startIndex"],[101,34,89,36],[101,36,89,38,"i"],[101,37,89,39],[101,41,89,43],[101,45,89,47],[101,46,89,48,"endIndex"],[101,54,89,56],[101,56,89,58,"i"],[101,57,89,59],[101,59,89,61],[101,61,89,63],[102,8,90,12],[102,14,90,18,"i"],[102,15,90,19],[103,6,91,8],[104,4,92,4],[105,2,93,0],[106,2,94,0,"ConsecutiveNumbers"],[106,20,94,18],[106,21,94,19,"EMPTY"],[106,26,94,24],[106,29,94,27],[106,33,94,31,"ConsecutiveNumbers"],[106,51,94,49],[106,52,94,50],[106,53,94,51],[106,54,94,52],[106,56,94,54],[106,57,94,55],[106,58,94,56],[106,59,94,57],[107,0,94,58],[107,3]],"functionMap":{"names":["<global>","ConsecutiveNumbers","constructor","get__length","at","equals","toArray","includes","indexOf","findValue","every","slice","@@iterator"],"mappings":"AAA;OCI;ICC;KDG;IEI;KFE;IGI;KHE;III;KJE;IKK;KLS;IMI;KNE;IOI;KPE;IQC;KRQ;ISM;KTQ;IUI;KVI;IWI;KXI;CDC"},"hasCjsExports":false},"type":"js/module"}]}