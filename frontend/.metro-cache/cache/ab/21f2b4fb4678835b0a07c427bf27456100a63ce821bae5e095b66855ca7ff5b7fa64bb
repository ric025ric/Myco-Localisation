{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const Mode = require(_dependencyMap[0], \"./mode\");\n  function NumericData(data) {\n    this.mode = Mode.NUMERIC;\n    this.data = data.toString();\n  }\n  NumericData.getBitsLength = function getBitsLength(length) {\n    return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n  };\n  NumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  NumericData.prototype.getBitsLength = function getBitsLength() {\n    return NumericData.getBitsLength(this.data.length);\n  };\n  NumericData.prototype.write = function write(bitBuffer) {\n    let i, group, value;\n\n    // The input data string is divided into groups of three digits,\n    // and each group is converted to its 10-bit binary equivalent.\n    for (i = 0; i + 3 <= this.data.length; i += 3) {\n      group = this.data.substr(i, 3);\n      value = parseInt(group, 10);\n      bitBuffer.put(value, 10);\n    }\n\n    // If the number of input digits is not an exact multiple of three,\n    // the final one or two digits are converted to 4 or 7 bits respectively.\n    const remainingNum = this.data.length - i;\n    if (remainingNum > 0) {\n      group = this.data.substr(i);\n      value = parseInt(group, 10);\n      bitBuffer.put(value, remainingNum * 3 + 1);\n    }\n  };\n  module.exports = NumericData;\n});","lineCount":37,"map":[[2,2,1,0],[2,8,1,6,"Mode"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,50,1,29],[2,51,1,30],[3,2,3,0],[3,11,3,9,"NumericData"],[3,22,3,20,"NumericData"],[3,23,3,22,"data"],[3,27,3,26],[3,29,3,28],[4,4,4,2],[4,8,4,6],[4,9,4,7,"mode"],[4,13,4,11],[4,16,4,14,"Mode"],[4,20,4,18],[4,21,4,19,"NUMERIC"],[4,28,4,26],[5,4,5,2],[5,8,5,6],[5,9,5,7,"data"],[5,13,5,11],[5,16,5,14,"data"],[5,20,5,18],[5,21,5,19,"toString"],[5,29,5,27],[5,30,5,28],[5,31,5,29],[6,2,6,0],[7,2,8,0,"NumericData"],[7,13,8,11],[7,14,8,12,"getBitsLength"],[7,27,8,25],[7,30,8,28],[7,39,8,37,"getBitsLength"],[7,52,8,50,"getBitsLength"],[7,53,8,52,"length"],[7,59,8,58],[7,61,8,60],[8,4,9,2],[8,11,9,9],[8,13,9,11],[8,16,9,14,"Math"],[8,20,9,18],[8,21,9,19,"floor"],[8,26,9,24],[8,27,9,25,"length"],[8,33,9,31],[8,36,9,34],[8,37,9,35],[8,38,9,36],[8,42,9,41,"length"],[8,48,9,47],[8,51,9,50],[8,52,9,51],[8,55,9,57,"length"],[8,61,9,63],[8,64,9,66],[8,65,9,67],[8,68,9,71],[8,69,9,72],[8,72,9,75],[8,73,9,76],[8,76,9,80],[8,77,9,81],[8,78,9,82],[9,2,10,0],[9,3,10,1],[10,2,12,0,"NumericData"],[10,13,12,11],[10,14,12,12,"prototype"],[10,23,12,21],[10,24,12,22,"getLength"],[10,33,12,31],[10,36,12,34],[10,45,12,43,"getLength"],[10,54,12,52,"getLength"],[10,55,12,52],[10,57,12,56],[11,4,13,2],[11,11,13,9],[11,15,13,13],[11,16,13,14,"data"],[11,20,13,18],[11,21,13,19,"length"],[11,27,13,25],[12,2,14,0],[12,3,14,1],[13,2,16,0,"NumericData"],[13,13,16,11],[13,14,16,12,"prototype"],[13,23,16,21],[13,24,16,22,"getBitsLength"],[13,37,16,35],[13,40,16,38],[13,49,16,47,"getBitsLength"],[13,62,16,60,"getBitsLength"],[13,63,16,60],[13,65,16,64],[14,4,17,2],[14,11,17,9,"NumericData"],[14,22,17,20],[14,23,17,21,"getBitsLength"],[14,36,17,34],[14,37,17,35],[14,41,17,39],[14,42,17,40,"data"],[14,46,17,44],[14,47,17,45,"length"],[14,53,17,51],[14,54,17,52],[15,2,18,0],[15,3,18,1],[16,2,20,0,"NumericData"],[16,13,20,11],[16,14,20,12,"prototype"],[16,23,20,21],[16,24,20,22,"write"],[16,29,20,27],[16,32,20,30],[16,41,20,39,"write"],[16,46,20,44,"write"],[16,47,20,46,"bitBuffer"],[16,56,20,55],[16,58,20,57],[17,4,21,2],[17,8,21,6,"i"],[17,9,21,7],[17,11,21,9,"group"],[17,16,21,14],[17,18,21,16,"value"],[17,23,21,21],[19,4,23,2],[20,4,24,2],[21,4,25,2],[21,9,25,7,"i"],[21,10,25,8],[21,13,25,11],[21,14,25,12],[21,16,25,14,"i"],[21,17,25,15],[21,20,25,18],[21,21,25,19],[21,25,25,23],[21,29,25,27],[21,30,25,28,"data"],[21,34,25,32],[21,35,25,33,"length"],[21,41,25,39],[21,43,25,41,"i"],[21,44,25,42],[21,48,25,46],[21,49,25,47],[21,51,25,49],[22,6,26,4,"group"],[22,11,26,9],[22,14,26,12],[22,18,26,16],[22,19,26,17,"data"],[22,23,26,21],[22,24,26,22,"substr"],[22,30,26,28],[22,31,26,29,"i"],[22,32,26,30],[22,34,26,32],[22,35,26,33],[22,36,26,34],[23,6,27,4,"value"],[23,11,27,9],[23,14,27,12,"parseInt"],[23,22,27,20],[23,23,27,21,"group"],[23,28,27,26],[23,30,27,28],[23,32,27,30],[23,33,27,31],[24,6,29,4,"bitBuffer"],[24,15,29,13],[24,16,29,14,"put"],[24,19,29,17],[24,20,29,18,"value"],[24,25,29,23],[24,27,29,25],[24,29,29,27],[24,30,29,28],[25,4,30,2],[27,4,32,2],[28,4,33,2],[29,4,34,2],[29,10,34,8,"remainingNum"],[29,22,34,20],[29,25,34,23],[29,29,34,27],[29,30,34,28,"data"],[29,34,34,32],[29,35,34,33,"length"],[29,41,34,39],[29,44,34,42,"i"],[29,45,34,43],[30,4,35,2],[30,8,35,6,"remainingNum"],[30,20,35,18],[30,23,35,21],[30,24,35,22],[30,26,35,24],[31,6,36,4,"group"],[31,11,36,9],[31,14,36,12],[31,18,36,16],[31,19,36,17,"data"],[31,23,36,21],[31,24,36,22,"substr"],[31,30,36,28],[31,31,36,29,"i"],[31,32,36,30],[31,33,36,31],[32,6,37,4,"value"],[32,11,37,9],[32,14,37,12,"parseInt"],[32,22,37,20],[32,23,37,21,"group"],[32,28,37,26],[32,30,37,28],[32,32,37,30],[32,33,37,31],[33,6,39,4,"bitBuffer"],[33,15,39,13],[33,16,39,14,"put"],[33,19,39,17],[33,20,39,18,"value"],[33,25,39,23],[33,27,39,25,"remainingNum"],[33,39,39,37],[33,42,39,40],[33,43,39,41],[33,46,39,44],[33,47,39,45],[33,48,39,46],[34,4,40,2],[35,2,41,0],[35,3,41,1],[36,2,43,0,"module"],[36,8,43,6],[36,9,43,7,"exports"],[36,16,43,14],[36,19,43,17,"NumericData"],[36,30,43,28],[37,0,43,28],[37,3]],"functionMap":{"names":["<global>","NumericData","getBitsLength","getLength","write"],"mappings":"AAA;ACE;CDG;4BEE;CFE;kCGE;CHE;sCEE;CFE;8BIE;CJqB"},"hasCjsExports":true},"type":"js/module"}]}