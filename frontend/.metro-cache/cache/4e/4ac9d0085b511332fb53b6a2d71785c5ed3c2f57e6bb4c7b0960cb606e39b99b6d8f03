{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Helper class to handle QR Code symbol modules\n   *\n   * @param {Number} size Symbol size\n   */\n  function BitMatrix(size) {\n    if (!size || size < 1) {\n      throw new Error('BitMatrix size must be defined and greater than 0');\n    }\n    this.size = size;\n    this.data = new Uint8Array(size * size);\n    this.reservedBit = new Uint8Array(size * size);\n  }\n\n  /**\n   * Set bit value at specified location\n   * If reserved flag is set, this bit will be ignored during masking process\n   *\n   * @param {Number}  row\n   * @param {Number}  col\n   * @param {Boolean} value\n   * @param {Boolean} reserved\n   */\n  BitMatrix.prototype.set = function (row, col, value, reserved) {\n    const index = row * this.size + col;\n    this.data[index] = value;\n    if (reserved) this.reservedBit[index] = true;\n  };\n\n  /**\n   * Returns bit value at specified location\n   *\n   * @param  {Number}  row\n   * @param  {Number}  col\n   * @return {Boolean}\n   */\n  BitMatrix.prototype.get = function (row, col) {\n    return this.data[row * this.size + col];\n  };\n\n  /**\n   * Applies xor operator at specified location\n   * (used during masking process)\n   *\n   * @param {Number}  row\n   * @param {Number}  col\n   * @param {Boolean} value\n   */\n  BitMatrix.prototype.xor = function (row, col, value) {\n    this.data[row * this.size + col] ^= value;\n  };\n\n  /**\n   * Check if bit at specified location is reserved\n   *\n   * @param {Number}   row\n   * @param {Number}   col\n   * @return {Boolean}\n   */\n  BitMatrix.prototype.isReserved = function (row, col) {\n    return this.reservedBit[row * this.size + col];\n  };\n  module.exports = BitMatrix;\n});","lineCount":65,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,2,6,0],[7,11,6,9,"BitMatrix"],[7,20,6,18,"BitMatrix"],[7,21,6,20,"size"],[7,25,6,24],[7,27,6,26],[8,4,7,2],[8,8,7,6],[8,9,7,7,"size"],[8,13,7,11],[8,17,7,15,"size"],[8,21,7,19],[8,24,7,22],[8,25,7,23],[8,27,7,25],[9,6,8,4],[9,12,8,10],[9,16,8,14,"Error"],[9,21,8,19],[9,22,8,20],[9,73,8,71],[9,74,8,72],[10,4,9,2],[11,4,11,2],[11,8,11,6],[11,9,11,7,"size"],[11,13,11,11],[11,16,11,14,"size"],[11,20,11,18],[12,4,12,2],[12,8,12,6],[12,9,12,7,"data"],[12,13,12,11],[12,16,12,14],[12,20,12,18,"Uint8Array"],[12,30,12,28],[12,31,12,29,"size"],[12,35,12,33],[12,38,12,36,"size"],[12,42,12,40],[12,43,12,41],[13,4,13,2],[13,8,13,6],[13,9,13,7,"reservedBit"],[13,20,13,18],[13,23,13,21],[13,27,13,25,"Uint8Array"],[13,37,13,35],[13,38,13,36,"size"],[13,42,13,40],[13,45,13,43,"size"],[13,49,13,47],[13,50,13,48],[14,2,14,0],[16,2,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,0,20,0],[21,0,21,0],[22,0,22,0],[23,0,23,0],[24,0,24,0],[25,2,25,0,"BitMatrix"],[25,11,25,9],[25,12,25,10,"prototype"],[25,21,25,19],[25,22,25,20,"set"],[25,25,25,23],[25,28,25,26],[25,38,25,36,"row"],[25,41,25,39],[25,43,25,41,"col"],[25,46,25,44],[25,48,25,46,"value"],[25,53,25,51],[25,55,25,53,"reserved"],[25,63,25,61],[25,65,25,63],[26,4,26,2],[26,10,26,8,"index"],[26,15,26,13],[26,18,26,16,"row"],[26,21,26,19],[26,24,26,22],[26,28,26,26],[26,29,26,27,"size"],[26,33,26,31],[26,36,26,34,"col"],[26,39,26,37],[27,4,27,2],[27,8,27,6],[27,9,27,7,"data"],[27,13,27,11],[27,14,27,12,"index"],[27,19,27,17],[27,20,27,18],[27,23,27,21,"value"],[27,28,27,26],[28,4,28,2],[28,8,28,6,"reserved"],[28,16,28,14],[28,18,28,16],[28,22,28,20],[28,23,28,21,"reservedBit"],[28,34,28,32],[28,35,28,33,"index"],[28,40,28,38],[28,41,28,39],[28,44,28,42],[28,48,28,46],[29,2,29,0],[29,3,29,1],[31,2,31,0],[32,0,32,0],[33,0,33,0],[34,0,34,0],[35,0,35,0],[36,0,36,0],[37,0,37,0],[38,2,38,0,"BitMatrix"],[38,11,38,9],[38,12,38,10,"prototype"],[38,21,38,19],[38,22,38,20,"get"],[38,25,38,23],[38,28,38,26],[38,38,38,36,"row"],[38,41,38,39],[38,43,38,41,"col"],[38,46,38,44],[38,48,38,46],[39,4,39,2],[39,11,39,9],[39,15,39,13],[39,16,39,14,"data"],[39,20,39,18],[39,21,39,19,"row"],[39,24,39,22],[39,27,39,25],[39,31,39,29],[39,32,39,30,"size"],[39,36,39,34],[39,39,39,37,"col"],[39,42,39,40],[39,43,39,41],[40,2,40,0],[40,3,40,1],[42,2,42,0],[43,0,43,0],[44,0,44,0],[45,0,45,0],[46,0,46,0],[47,0,47,0],[48,0,48,0],[49,0,49,0],[50,2,50,0,"BitMatrix"],[50,11,50,9],[50,12,50,10,"prototype"],[50,21,50,19],[50,22,50,20,"xor"],[50,25,50,23],[50,28,50,26],[50,38,50,36,"row"],[50,41,50,39],[50,43,50,41,"col"],[50,46,50,44],[50,48,50,46,"value"],[50,53,50,51],[50,55,50,53],[51,4,51,2],[51,8,51,6],[51,9,51,7,"data"],[51,13,51,11],[51,14,51,12,"row"],[51,17,51,15],[51,20,51,18],[51,24,51,22],[51,25,51,23,"size"],[51,29,51,27],[51,32,51,30,"col"],[51,35,51,33],[51,36,51,34],[51,40,51,38,"value"],[51,45,51,43],[52,2,52,0],[52,3,52,1],[54,2,54,0],[55,0,55,0],[56,0,56,0],[57,0,57,0],[58,0,58,0],[59,0,59,0],[60,0,60,0],[61,2,61,0,"BitMatrix"],[61,11,61,9],[61,12,61,10,"prototype"],[61,21,61,19],[61,22,61,20,"isReserved"],[61,32,61,30],[61,35,61,33],[61,45,61,43,"row"],[61,48,61,46],[61,50,61,48,"col"],[61,53,61,51],[61,55,61,53],[62,4,62,2],[62,11,62,9],[62,15,62,13],[62,16,62,14,"reservedBit"],[62,27,62,25],[62,28,62,26,"row"],[62,31,62,29],[62,34,62,32],[62,38,62,36],[62,39,62,37,"size"],[62,43,62,41],[62,46,62,44,"col"],[62,49,62,47],[62,50,62,48],[63,2,63,0],[63,3,63,1],[64,2,65,0,"module"],[64,8,65,6],[64,9,65,7,"exports"],[64,16,65,14],[64,19,65,17,"BitMatrix"],[64,28,65,26],[65,0,65,26],[65,3]],"functionMap":{"names":["<global>","BitMatrix","BitMatrix.prototype.set","BitMatrix.prototype.get","BitMatrix.prototype.xor","BitMatrix.prototype.isReserved"],"mappings":"AAA;ACK;CDQ;0BEW;CFI;0BGS;CHE;0BIU;CJE;iCKS;CLE"},"hasCjsExports":true},"type":"js/module"}]}