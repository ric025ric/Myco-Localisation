{"dependencies":[{"name":"../errors/ErrorMessages","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"APtQ1ObkEMvvpKEHNjwmitGcEgw=","exportNames":["*"],"imports":1}},{"name":"./roundToDecimalPlaces","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":62,"index":119}}],"key":"9r1C8fjaPHF+hWAH+UtzKSV2H1Q=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"JSFPSMonitor\", {\n    enumerable: true,\n    get: function () {\n      return JSFPSMonitor;\n    }\n  });\n  var _errorsErrorMessages = require(_dependencyMap[0], \"../errors/ErrorMessages\");\n  var _roundToDecimalPlaces = require(_dependencyMap[1], \"./roundToDecimalPlaces\");\n  /**\n   * Can be used to monitor JS thread performance\n   * Use startTracking() and stopAndGetData() to start and stop tracking\n   */\n  class JSFPSMonitor {\n    constructor() {\n      this.startTime = 0;\n      this.frameCount = 0;\n      this.timeWindow = {\n        frameCount: 0,\n        startTime: 0\n      };\n      this.minFPS = Number.MAX_SAFE_INTEGER;\n      this.maxFPS = 0;\n      this.averageFPS = 0;\n      this.clearAnimationNumber = 0;\n      this.updateLoopCompute = () => {\n        this.frameCount++;\n        const elapsedTime = (Date.now() - this.startTime) / 1000;\n        this.averageFPS = elapsedTime > 0 ? this.frameCount / elapsedTime : 0;\n        this.timeWindow.frameCount++;\n        const timeWindowElapsedTime = (Date.now() - this.timeWindow.startTime) / 1000;\n        if (timeWindowElapsedTime >= 1) {\n          const timeWindowAverageFPS = this.timeWindow.frameCount / timeWindowElapsedTime;\n          this.minFPS = Math.min(this.minFPS, timeWindowAverageFPS);\n          this.maxFPS = Math.max(this.maxFPS, timeWindowAverageFPS);\n          this.timeWindow.frameCount = 0;\n          this.timeWindow.startTime = Date.now();\n        }\n        this.measureLoop();\n      };\n    }\n    measureLoop() {\n      // This looks weird but I'm avoiding a new closure\n      this.clearAnimationNumber = requestAnimationFrame(this.updateLoopCompute);\n    }\n    startTracking() {\n      if (this.startTime !== 0) {\n        throw new Error(_errorsErrorMessages.ErrorMessages.fpsMonitorAlreadyRunning);\n      }\n      this.startTime = Date.now();\n      this.timeWindow.startTime = Date.now();\n      this.measureLoop();\n    }\n    stopAndGetData() {\n      cancelAnimationFrame(this.clearAnimationNumber);\n      if (this.minFPS === Number.MAX_SAFE_INTEGER) {\n        this.minFPS = this.averageFPS;\n        this.maxFPS = this.averageFPS;\n      }\n      return {\n        minFPS: (0, _roundToDecimalPlaces.roundToDecimalPlaces)(this.minFPS, 1),\n        maxFPS: (0, _roundToDecimalPlaces.roundToDecimalPlaces)(this.maxFPS, 1),\n        averageFPS: (0, _roundToDecimalPlaces.roundToDecimalPlaces)(this.averageFPS, 1)\n      };\n    }\n  }\n});","lineCount":72,"map":[[7,2,7,0,"Object"],[7,8,7,0],[7,9,7,0,"defineProperty"],[7,23,7,0],[7,24,7,0,"exports"],[7,31,7,0],[8,4,7,0,"enumerable"],[8,14,7,0],[9,4,7,0,"get"],[9,7,7,0],[9,18,7,0,"get"],[9,19,7,0],[10,6,7,0],[10,13,7,0,"JSFPSMonitor"],[10,25,7,0],[11,4,7,0],[12,2,7,0],[13,2,1,0],[13,6,1,0,"_errorsErrorMessages"],[13,26,1,0],[13,29,1,0,"require"],[13,36,1,0],[13,37,1,0,"_dependencyMap"],[13,51,1,0],[14,2,2,0],[14,6,2,0,"_roundToDecimalPlaces"],[14,27,2,0],[14,30,2,0,"require"],[14,37,2,0],[14,38,2,0,"_dependencyMap"],[14,52,2,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,2,7,7],[19,8,7,13,"JSFPSMonitor"],[19,20,7,25],[19,21,7,26],[20,4,8,4,"constructor"],[20,15,8,15,"constructor"],[20,16,8,15],[20,18,8,18],[21,6,9,8],[21,10,9,12],[21,11,9,13,"startTime"],[21,20,9,22],[21,23,9,25],[21,24,9,26],[22,6,10,8],[22,10,10,12],[22,11,10,13,"frameCount"],[22,21,10,23],[22,24,10,26],[22,25,10,27],[23,6,11,8],[23,10,11,12],[23,11,11,13,"timeWindow"],[23,21,11,23],[23,24,11,26],[24,8,12,12,"frameCount"],[24,18,12,22],[24,20,12,24],[24,21,12,25],[25,8,13,12,"startTime"],[25,17,13,21],[25,19,13,23],[26,6,14,8],[26,7,14,9],[27,6,15,8],[27,10,15,12],[27,11,15,13,"minFPS"],[27,17,15,19],[27,20,15,22,"Number"],[27,26,15,28],[27,27,15,29,"MAX_SAFE_INTEGER"],[27,43,15,45],[28,6,16,8],[28,10,16,12],[28,11,16,13,"maxFPS"],[28,17,16,19],[28,20,16,22],[28,21,16,23],[29,6,17,8],[29,10,17,12],[29,11,17,13,"averageFPS"],[29,21,17,23],[29,24,17,26],[29,25,17,27],[30,6,18,8],[30,10,18,12],[30,11,18,13,"clearAnimationNumber"],[30,31,18,33],[30,34,18,36],[30,35,18,37],[31,6,19,8],[31,10,19,12],[31,11,19,13,"updateLoopCompute"],[31,28,19,30],[31,31,19,33],[31,37,19,39],[32,8,20,12],[32,12,20,16],[32,13,20,17,"frameCount"],[32,23,20,27],[32,25,20,29],[33,8,21,12],[33,14,21,18,"elapsedTime"],[33,25,21,29],[33,28,21,32],[33,29,21,33,"Date"],[33,33,21,37],[33,34,21,38,"now"],[33,37,21,41],[33,38,21,42],[33,39,21,43],[33,42,21,46],[33,46,21,50],[33,47,21,51,"startTime"],[33,56,21,60],[33,60,21,64],[33,64,21,68],[34,8,22,12],[34,12,22,16],[34,13,22,17,"averageFPS"],[34,23,22,27],[34,26,22,30,"elapsedTime"],[34,37,22,41],[34,40,22,44],[34,41,22,45],[34,44,22,48],[34,48,22,52],[34,49,22,53,"frameCount"],[34,59,22,63],[34,62,22,66,"elapsedTime"],[34,73,22,77],[34,76,22,80],[34,77,22,81],[35,8,23,12],[35,12,23,16],[35,13,23,17,"timeWindow"],[35,23,23,27],[35,24,23,28,"frameCount"],[35,34,23,38],[35,36,23,40],[36,8,24,12],[36,14,24,18,"timeWindowElapsedTime"],[36,35,24,39],[36,38,24,42],[36,39,24,43,"Date"],[36,43,24,47],[36,44,24,48,"now"],[36,47,24,51],[36,48,24,52],[36,49,24,53],[36,52,24,56],[36,56,24,60],[36,57,24,61,"timeWindow"],[36,67,24,71],[36,68,24,72,"startTime"],[36,77,24,81],[36,81,24,85],[36,85,24,89],[37,8,25,12],[37,12,25,16,"timeWindowElapsedTime"],[37,33,25,37],[37,37,25,41],[37,38,25,42],[37,40,25,44],[38,10,26,16],[38,16,26,22,"timeWindowAverageFPS"],[38,36,26,42],[38,39,26,45],[38,43,26,49],[38,44,26,50,"timeWindow"],[38,54,26,60],[38,55,26,61,"frameCount"],[38,65,26,71],[38,68,26,74,"timeWindowElapsedTime"],[38,89,26,95],[39,10,27,16],[39,14,27,20],[39,15,27,21,"minFPS"],[39,21,27,27],[39,24,27,30,"Math"],[39,28,27,34],[39,29,27,35,"min"],[39,32,27,38],[39,33,27,39],[39,37,27,43],[39,38,27,44,"minFPS"],[39,44,27,50],[39,46,27,52,"timeWindowAverageFPS"],[39,66,27,72],[39,67,27,73],[40,10,28,16],[40,14,28,20],[40,15,28,21,"maxFPS"],[40,21,28,27],[40,24,28,30,"Math"],[40,28,28,34],[40,29,28,35,"max"],[40,32,28,38],[40,33,28,39],[40,37,28,43],[40,38,28,44,"maxFPS"],[40,44,28,50],[40,46,28,52,"timeWindowAverageFPS"],[40,66,28,72],[40,67,28,73],[41,10,29,16],[41,14,29,20],[41,15,29,21,"timeWindow"],[41,25,29,31],[41,26,29,32,"frameCount"],[41,36,29,42],[41,39,29,45],[41,40,29,46],[42,10,30,16],[42,14,30,20],[42,15,30,21,"timeWindow"],[42,25,30,31],[42,26,30,32,"startTime"],[42,35,30,41],[42,38,30,44,"Date"],[42,42,30,48],[42,43,30,49,"now"],[42,46,30,52],[42,47,30,53],[42,48,30,54],[43,8,31,12],[44,8,32,12],[44,12,32,16],[44,13,32,17,"measureLoop"],[44,24,32,28],[44,25,32,29],[44,26,32,30],[45,6,33,8],[45,7,33,9],[46,4,34,4],[47,4,35,4,"measureLoop"],[47,15,35,15,"measureLoop"],[47,16,35,15],[47,18,35,18],[48,6,36,8],[49,6,37,8],[49,10,37,12],[49,11,37,13,"clearAnimationNumber"],[49,31,37,33],[49,34,37,36,"requestAnimationFrame"],[49,55,37,57],[49,56,37,58],[49,60,37,62],[49,61,37,63,"updateLoopCompute"],[49,78,37,80],[49,79,37,81],[50,4,38,4],[51,4,39,4,"startTracking"],[51,17,39,17,"startTracking"],[51,18,39,17],[51,20,39,20],[52,6,40,8],[52,10,40,12],[52,14,40,16],[52,15,40,17,"startTime"],[52,24,40,26],[52,29,40,31],[52,30,40,32],[52,32,40,34],[53,8,41,12],[53,14,41,18],[53,18,41,22,"Error"],[53,23,41,27],[53,24,41,28,"ErrorMessages"],[53,44,41,41],[53,45,41,41,"ErrorMessages"],[53,58,41,41],[53,59,41,42,"fpsMonitorAlreadyRunning"],[53,83,41,66],[53,84,41,67],[54,6,42,8],[55,6,43,8],[55,10,43,12],[55,11,43,13,"startTime"],[55,20,43,22],[55,23,43,25,"Date"],[55,27,43,29],[55,28,43,30,"now"],[55,31,43,33],[55,32,43,34],[55,33,43,35],[56,6,44,8],[56,10,44,12],[56,11,44,13,"timeWindow"],[56,21,44,23],[56,22,44,24,"startTime"],[56,31,44,33],[56,34,44,36,"Date"],[56,38,44,40],[56,39,44,41,"now"],[56,42,44,44],[56,43,44,45],[56,44,44,46],[57,6,45,8],[57,10,45,12],[57,11,45,13,"measureLoop"],[57,22,45,24],[57,23,45,25],[57,24,45,26],[58,4,46,4],[59,4,47,4,"stopAndGetData"],[59,18,47,18,"stopAndGetData"],[59,19,47,18],[59,21,47,21],[60,6,48,8,"cancelAnimationFrame"],[60,26,48,28],[60,27,48,29],[60,31,48,33],[60,32,48,34,"clearAnimationNumber"],[60,52,48,54],[60,53,48,55],[61,6,49,8],[61,10,49,12],[61,14,49,16],[61,15,49,17,"minFPS"],[61,21,49,23],[61,26,49,28,"Number"],[61,32,49,34],[61,33,49,35,"MAX_SAFE_INTEGER"],[61,49,49,51],[61,51,49,53],[62,8,50,12],[62,12,50,16],[62,13,50,17,"minFPS"],[62,19,50,23],[62,22,50,26],[62,26,50,30],[62,27,50,31,"averageFPS"],[62,37,50,41],[63,8,51,12],[63,12,51,16],[63,13,51,17,"maxFPS"],[63,19,51,23],[63,22,51,26],[63,26,51,30],[63,27,51,31,"averageFPS"],[63,37,51,41],[64,6,52,8],[65,6,53,8],[65,13,53,15],[66,8,54,12,"minFPS"],[66,14,54,18],[66,16,54,20],[66,20,54,20,"roundToDecimalPlaces"],[66,41,54,40],[66,42,54,40,"roundToDecimalPlaces"],[66,62,54,40],[66,64,54,41],[66,68,54,45],[66,69,54,46,"minFPS"],[66,75,54,52],[66,77,54,54],[66,78,54,55],[66,79,54,56],[67,8,55,12,"maxFPS"],[67,14,55,18],[67,16,55,20],[67,20,55,20,"roundToDecimalPlaces"],[67,41,55,40],[67,42,55,40,"roundToDecimalPlaces"],[67,62,55,40],[67,64,55,41],[67,68,55,45],[67,69,55,46,"maxFPS"],[67,75,55,52],[67,77,55,54],[67,78,55,55],[67,79,55,56],[68,8,56,12,"averageFPS"],[68,18,56,22],[68,20,56,24],[68,24,56,24,"roundToDecimalPlaces"],[68,45,56,44],[68,46,56,44,"roundToDecimalPlaces"],[68,66,56,44],[68,68,56,45],[68,72,56,49],[68,73,56,50,"averageFPS"],[68,83,56,60],[68,85,56,62],[68,86,56,63],[69,6,57,8],[69,7,57,9],[70,4,58,4],[71,2,59,0],[72,0,59,1],[72,3]],"functionMap":{"names":["<global>","JSFPSMonitor","constructor","updateLoopCompute","measureLoop","startTracking","stopAndGetData"],"mappings":"AAA;OCM;ICC;iCCW;SDc;KDC;IGC;KHG;IIC;KJO;IKC;KLW;CDC"},"hasCjsExports":false},"type":"js/module"}]}