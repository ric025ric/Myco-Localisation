{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"AverageWindow\", {\n    enumerable: true,\n    get: function () {\n      return AverageWindow;\n    }\n  });\n  Object.defineProperty(exports, \"MultiTypeAverageWindow\", {\n    enumerable: true,\n    get: function () {\n      return MultiTypeAverageWindow;\n    }\n  });\n  /**\n   * Helper class to calculate running average of the most recent n values\n   */\n  class AverageWindow {\n    constructor(size, startValue) {\n      this.nextIndex = 0;\n      this.inputValues = new Array(Math.max(1, size));\n      this.currentAverage = startValue !== null && startValue !== void 0 ? startValue : 0;\n      this.currentCount = startValue === undefined ? 0 : 1;\n      this.nextIndex = this.currentCount;\n      this.inputValues[0] = startValue;\n    }\n    /**\n     * Can be used to get the current average value\n     */\n    get currentValue() {\n      return this.currentAverage;\n    }\n    /**\n     *\n     * @param value Add new value to the average window and updated current average\n     */\n    addValue(value) {\n      const target = this.getNextIndex();\n      const oldValue = this.inputValues[target];\n      const newCount = oldValue === undefined ? this.currentCount + 1 : this.currentCount;\n      this.inputValues[target] = value;\n      this.currentAverage = this.currentAverage * (this.currentCount / newCount) + (value - (oldValue !== null && oldValue !== void 0 ? oldValue : 0)) / newCount;\n      this.currentCount = newCount;\n    }\n    getNextIndex() {\n      // starts from 0 once we reach end of the array\n      const newTarget = this.nextIndex;\n      this.nextIndex = (this.nextIndex + 1) % this.inputValues.length;\n      return newTarget;\n    }\n  }\n  class MultiTypeAverageWindow {\n    /**\n     * @param windowSize Size of the average window\n     * @param defaultValue Default value to return if no value is available\n     */\n    constructor(windowSize, defaultValue) {\n      this.averageWindows = new Map();\n      this.windowSize = windowSize;\n      this.defaultValue = defaultValue;\n    }\n    addValue(value, type) {\n      let averageWindow = this.averageWindows.get(type);\n      if (!averageWindow) {\n        averageWindow = new AverageWindow(this.windowSize);\n        this.averageWindows.set(type, averageWindow);\n      }\n      averageWindow.addValue(value);\n    }\n    getCurrentValue(type) {\n      var _a, _b;\n      const averageWindow = this.averageWindows.get(type);\n      return (_b = (_a = averageWindow === null || averageWindow === void 0 ? void 0 : averageWindow.currentValue) !== null && _a !== void 0 ? _a : this.defaultValue) !== null && _b !== void 0 ? _b : 0;\n    }\n    reset() {\n      this.averageWindows.clear();\n    }\n  }\n});","lineCount":83,"map":[[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"enumerable"],[8,14,4,0],[9,4,4,0,"get"],[9,7,4,0],[9,18,4,0,"get"],[9,19,4,0],[10,6,4,0],[10,13,4,0,"AverageWindow"],[10,26,4,0],[11,4,4,0],[12,2,4,0],[13,2,40,0,"Object"],[13,8,40,0],[13,9,40,0,"defineProperty"],[13,23,40,0],[13,24,40,0,"exports"],[13,31,40,0],[14,4,40,0,"enumerable"],[14,14,40,0],[15,4,40,0,"get"],[15,7,40,0],[15,18,40,0,"get"],[15,19,40,0],[16,6,40,0],[16,13,40,0,"MultiTypeAverageWindow"],[16,35,40,0],[17,4,40,0],[18,2,40,0],[19,2,1,0],[20,0,2,0],[21,0,3,0],[22,2,4,7],[22,8,4,13,"AverageWindow"],[22,21,4,26],[22,22,4,27],[23,4,5,4,"constructor"],[23,15,5,15,"constructor"],[23,16,5,16,"size"],[23,20,5,20],[23,22,5,22,"startValue"],[23,32,5,32],[23,34,5,34],[24,6,6,8],[24,10,6,12],[24,11,6,13,"nextIndex"],[24,20,6,22],[24,23,6,25],[24,24,6,26],[25,6,7,8],[25,10,7,12],[25,11,7,13,"inputValues"],[25,22,7,24],[25,25,7,27],[25,29,7,31,"Array"],[25,34,7,36],[25,35,7,37,"Math"],[25,39,7,41],[25,40,7,42,"max"],[25,43,7,45],[25,44,7,46],[25,45,7,47],[25,47,7,49,"size"],[25,51,7,53],[25,52,7,54],[25,53,7,55],[26,6,8,8],[26,10,8,12],[26,11,8,13,"currentAverage"],[26,25,8,27],[26,28,8,30,"startValue"],[26,38,8,40],[26,43,8,45],[26,47,8,49],[26,51,8,53,"startValue"],[26,61,8,63],[26,66,8,68],[26,71,8,73],[26,72,8,74],[26,75,8,77,"startValue"],[26,85,8,87],[26,88,8,90],[26,89,8,91],[27,6,9,8],[27,10,9,12],[27,11,9,13,"currentCount"],[27,23,9,25],[27,26,9,28,"startValue"],[27,36,9,38],[27,41,9,43,"undefined"],[27,50,9,52],[27,53,9,55],[27,54,9,56],[27,57,9,59],[27,58,9,60],[28,6,10,8],[28,10,10,12],[28,11,10,13,"nextIndex"],[28,20,10,22],[28,23,10,25],[28,27,10,29],[28,28,10,30,"currentCount"],[28,40,10,42],[29,6,11,8],[29,10,11,12],[29,11,11,13,"inputValues"],[29,22,11,24],[29,23,11,25],[29,24,11,26],[29,25,11,27],[29,28,11,30,"startValue"],[29,38,11,40],[30,4,12,4],[31,4,13,4],[32,0,14,0],[33,0,15,0],[34,4,16,4],[34,8,16,8,"currentValue"],[34,20,16,20,"currentValue"],[34,21,16,20],[34,23,16,23],[35,6,17,8],[35,13,17,15],[35,17,17,19],[35,18,17,20,"currentAverage"],[35,32,17,34],[36,4,18,4],[37,4,19,4],[38,0,20,0],[39,0,21,0],[40,0,22,0],[41,4,23,4,"addValue"],[41,12,23,12,"addValue"],[41,13,23,13,"value"],[41,18,23,18],[41,20,23,20],[42,6,24,8],[42,12,24,14,"target"],[42,18,24,20],[42,21,24,23],[42,25,24,27],[42,26,24,28,"getNextIndex"],[42,38,24,40],[42,39,24,41],[42,40,24,42],[43,6,25,8],[43,12,25,14,"oldValue"],[43,20,25,22],[43,23,25,25],[43,27,25,29],[43,28,25,30,"inputValues"],[43,39,25,41],[43,40,25,42,"target"],[43,46,25,48],[43,47,25,49],[44,6,26,8],[44,12,26,14,"newCount"],[44,20,26,22],[44,23,26,25,"oldValue"],[44,31,26,33],[44,36,26,38,"undefined"],[44,45,26,47],[44,48,26,50],[44,52,26,54],[44,53,26,55,"currentCount"],[44,65,26,67],[44,68,26,70],[44,69,26,71],[44,72,26,74],[44,76,26,78],[44,77,26,79,"currentCount"],[44,89,26,91],[45,6,27,8],[45,10,27,12],[45,11,27,13,"inputValues"],[45,22,27,24],[45,23,27,25,"target"],[45,29,27,31],[45,30,27,32],[45,33,27,35,"value"],[45,38,27,40],[46,6,28,8],[46,10,28,12],[46,11,28,13,"currentAverage"],[46,25,28,27],[46,28,29,12],[46,32,29,16],[46,33,29,17,"currentAverage"],[46,47,29,31],[46,51,29,35],[46,55,29,39],[46,56,29,40,"currentCount"],[46,68,29,52],[46,71,29,55,"newCount"],[46,79,29,63],[46,80,29,64],[46,83,30,16],[46,84,30,17,"value"],[46,89,30,22],[46,93,30,26,"oldValue"],[46,101,30,34],[46,106,30,39],[46,110,30,43],[46,114,30,47,"oldValue"],[46,122,30,55],[46,127,30,60],[46,132,30,65],[46,133,30,66],[46,136,30,69,"oldValue"],[46,144,30,77],[46,147,30,80],[46,148,30,81],[46,149,30,82],[46,153,30,86,"newCount"],[46,161,30,94],[47,6,31,8],[47,10,31,12],[47,11,31,13,"currentCount"],[47,23,31,25],[47,26,31,28,"newCount"],[47,34,31,36],[48,4,32,4],[49,4,33,4,"getNextIndex"],[49,16,33,16,"getNextIndex"],[49,17,33,16],[49,19,33,19],[50,6,34,8],[51,6,35,8],[51,12,35,14,"newTarget"],[51,21,35,23],[51,24,35,26],[51,28,35,30],[51,29,35,31,"nextIndex"],[51,38,35,40],[52,6,36,8],[52,10,36,12],[52,11,36,13,"nextIndex"],[52,20,36,22],[52,23,36,25],[52,24,36,26],[52,28,36,30],[52,29,36,31,"nextIndex"],[52,38,36,40],[52,41,36,43],[52,42,36,44],[52,46,36,48],[52,50,36,52],[52,51,36,53,"inputValues"],[52,62,36,64],[52,63,36,65,"length"],[52,69,36,71],[53,6,37,8],[53,13,37,15,"newTarget"],[53,22,37,24],[54,4,38,4],[55,2,39,0],[56,2,40,7],[56,8,40,13,"MultiTypeAverageWindow"],[56,30,40,35],[56,31,40,36],[57,4,41,4],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,4,45,4,"constructor"],[61,15,45,15,"constructor"],[61,16,45,16,"windowSize"],[61,26,45,26],[61,28,45,28,"defaultValue"],[61,40,45,40],[61,42,45,42],[62,6,46,8],[62,10,46,12],[62,11,46,13,"averageWindows"],[62,25,46,27],[62,28,46,30],[62,32,46,34,"Map"],[62,35,46,37],[62,36,46,38],[62,37,46,39],[63,6,47,8],[63,10,47,12],[63,11,47,13,"windowSize"],[63,21,47,23],[63,24,47,26,"windowSize"],[63,34,47,36],[64,6,48,8],[64,10,48,12],[64,11,48,13,"defaultValue"],[64,23,48,25],[64,26,48,28,"defaultValue"],[64,38,48,40],[65,4,49,4],[66,4,50,4,"addValue"],[66,12,50,12,"addValue"],[66,13,50,13,"value"],[66,18,50,18],[66,20,50,20,"type"],[66,24,50,24],[66,26,50,26],[67,6,51,8],[67,10,51,12,"averageWindow"],[67,23,51,25],[67,26,51,28],[67,30,51,32],[67,31,51,33,"averageWindows"],[67,45,51,47],[67,46,51,48,"get"],[67,49,51,51],[67,50,51,52,"type"],[67,54,51,56],[67,55,51,57],[68,6,52,8],[68,10,52,12],[68,11,52,13,"averageWindow"],[68,24,52,26],[68,26,52,28],[69,8,53,12,"averageWindow"],[69,21,53,25],[69,24,53,28],[69,28,53,32,"AverageWindow"],[69,41,53,45],[69,42,53,46],[69,46,53,50],[69,47,53,51,"windowSize"],[69,57,53,61],[69,58,53,62],[70,8,54,12],[70,12,54,16],[70,13,54,17,"averageWindows"],[70,27,54,31],[70,28,54,32,"set"],[70,31,54,35],[70,32,54,36,"type"],[70,36,54,40],[70,38,54,42,"averageWindow"],[70,51,54,55],[70,52,54,56],[71,6,55,8],[72,6,56,8,"averageWindow"],[72,19,56,21],[72,20,56,22,"addValue"],[72,28,56,30],[72,29,56,31,"value"],[72,34,56,36],[72,35,56,37],[73,4,57,4],[74,4,58,4,"getCurrentValue"],[74,19,58,19,"getCurrentValue"],[74,20,58,20,"type"],[74,24,58,24],[74,26,58,26],[75,6,59,8],[75,10,59,12,"_a"],[75,12,59,14],[75,14,59,16,"_b"],[75,16,59,18],[76,6,60,8],[76,12,60,14,"averageWindow"],[76,25,60,27],[76,28,60,30],[76,32,60,34],[76,33,60,35,"averageWindows"],[76,47,60,49],[76,48,60,50,"get"],[76,51,60,53],[76,52,60,54,"type"],[76,56,60,58],[76,57,60,59],[77,6,61,8],[77,13,61,15],[77,14,61,16,"_b"],[77,16,61,18],[77,19,61,21],[77,20,61,22,"_a"],[77,22,61,24],[77,25,61,27,"averageWindow"],[77,38,61,40],[77,43,61,45],[77,47,61,49],[77,51,61,53,"averageWindow"],[77,64,61,66],[77,69,61,71],[77,74,61,76],[77,75,61,77],[77,78,61,80],[77,83,61,85],[77,84,61,86],[77,87,61,89,"averageWindow"],[77,100,61,102],[77,101,61,103,"currentValue"],[77,113,61,115],[77,119,61,121],[77,123,61,125],[77,127,61,129,"_a"],[77,129,61,131],[77,134,61,136],[77,139,61,141],[77,140,61,142],[77,143,61,145,"_a"],[77,145,61,147],[77,148,61,150],[77,152,61,154],[77,153,61,155,"defaultValue"],[77,165,61,167],[77,171,61,173],[77,175,61,177],[77,179,61,181,"_b"],[77,181,61,183],[77,186,61,188],[77,191,61,193],[77,192,61,194],[77,195,61,197,"_b"],[77,197,61,199],[77,200,61,202],[77,201,61,203],[78,4,62,4],[79,4,63,4,"reset"],[79,9,63,9,"reset"],[79,10,63,9],[79,12,63,12],[80,6,64,8],[80,10,64,12],[80,11,64,13,"averageWindows"],[80,25,64,27],[80,26,64,28,"clear"],[80,31,64,33],[80,32,64,34],[80,33,64,35],[81,4,65,4],[82,2,66,0],[83,0,66,1],[83,3]],"functionMap":{"names":["<global>","AverageWindow","constructor","get__currentValue","addValue","getNextIndex","MultiTypeAverageWindow","MultiTypeAverageWindow#constructor","MultiTypeAverageWindow#addValue","MultiTypeAverageWindow#getCurrentValue","MultiTypeAverageWindow#reset"],"mappings":"AAA;OCG;ICC;KDO;IEI;KFE;IGK;KHS;IIC;KJK;CDC;OMC;ICK;KDI;IEC;KFO;IGC;KHI;IIC;KJE;CNC"},"hasCjsExports":false},"type":"js/module"}]}