{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./useUnmountAwareCallbacks","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":62},"end":{"line":2,"column":75,"index":137}}],"key":"3BUUYvw+CD+nwK2jZFzshln47Y4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useOnListLoad\", {\n    enumerable: true,\n    get: function () {\n      return useOnListLoad;\n    }\n  });\n  Object.defineProperty(exports, \"useOnLoad\", {\n    enumerable: true,\n    get: function () {\n      return useOnLoad;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _useUnmountAwareCallbacks = require(_dependencyMap[1], \"./useUnmountAwareCallbacks\");\n  // import { ToastAndroid } from \"react-native\";\n  /**\n   * Hook to track when the RecyclerView has loaded its items and notify when loading is complete.\n   * Similar to FlashList's onLoad functionality, this hook tracks the time it takes to render\n   * the initial set of items in the RecyclerView and provides performance metrics.\n   *\n   * @param recyclerViewManager - The RecyclerViewManager instance managing the list\n   * @param onLoad - Optional callback function that will be called when the list has loaded with timing information\n   * @returns Object containing isLoaded state indicating whether the list has completed initial rendering\n   */\n  const useOnListLoad = (recyclerViewManager, onLoad) => {\n    const loadStartTimeRef = (0, _react.useRef)(Date.now());\n    const [isLoaded, setIsLoaded] = (0, _react.useState)(false);\n    const dataLength = recyclerViewManager.getDataLength();\n    // const dataCollector = useRef<number[]>([]);\n    const {\n      requestAnimationFrame\n    } = (0, _useUnmountAwareCallbacks.useUnmountAwareAnimationFrame)();\n    // Track render cycles by collecting elapsed time on each render\n    // useEffect(() => {\n    //   const elapsedTimeInMs = Date.now() - loadStartTimeRef.current;\n    //   dataCollector.current?.push(elapsedTimeInMs);\n    // });\n    (0, _react.useMemo)(() => {\n      loadStartTimeRef.current = Date.now();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dataLength]);\n    useOnLoad(recyclerViewManager, () => {\n      const elapsedTimeInMs = Date.now() - loadStartTimeRef.current;\n      // Commented code below was used for debugging purposes\n      // to display all collected timing data points\n      // const dataCollectorString = dataCollector.current\n      //   ?.map((value) => value.toString())\n      //   .join(\", \");\n      // ToastAndroid?.show(\n      //   `onLoad called after ${dataCollectorString}`,\n      //   ToastAndroid.SHORT\n      // );\n      // console.log(\"----------> dataCollector\", dataCollectorString);\n      // console.log(\"----------> FlashList v2 load in\", `${elapsedTimeInMs} ms`);\n      requestAnimationFrame(() => {\n        recyclerViewManager.isFirstPaintOnUiComplete = true;\n        onLoad === null || onLoad === void 0 ? void 0 : onLoad({\n          elapsedTimeInMs\n        });\n        setIsLoaded(true);\n      });\n    });\n    return {\n      isLoaded\n    };\n  };\n  /**\n   * Core hook that detects when a RecyclerView has completed its initial layout.\n   * This hook monitors the RecyclerViewManager and triggers the provided callback\n   * once the first layout is complete.\n   *\n   * @param recyclerViewManager - The RecyclerViewManager instance to monitor\n   * @param onLoad - Callback function that will be called once when the first layout is complete\n   */\n  const useOnLoad = (recyclerViewManager, onLoad) => {\n    const isLoaded = (0, _react.useRef)(false);\n    (0, _react.useEffect)(() => {\n      // Only trigger onLoad callback once when first layout is complete\n      if (recyclerViewManager.getIsFirstLayoutComplete() && !isLoaded.current) {\n        isLoaded.current = true;\n        onLoad();\n      }\n    });\n  };\n});","lineCount":91,"map":[[7,2,13,0,"Object"],[7,8,13,0],[7,9,13,0,"defineProperty"],[7,23,13,0],[7,24,13,0,"exports"],[7,31,13,0],[8,4,13,0,"enumerable"],[8,14,13,0],[9,4,13,0,"get"],[9,7,13,0],[9,18,13,0,"get"],[9,19,13,0],[10,6,13,0],[10,13,13,0,"useOnListLoad"],[10,26,13,0],[11,4,13,0],[12,2,13,0],[13,2,57,0,"Object"],[13,8,57,0],[13,9,57,0,"defineProperty"],[13,23,57,0],[13,24,57,0,"exports"],[13,31,57,0],[14,4,57,0,"enumerable"],[14,14,57,0],[15,4,57,0,"get"],[15,7,57,0],[15,18,57,0,"get"],[15,19,57,0],[16,6,57,0],[16,13,57,0,"useOnLoad"],[16,22,57,0],[17,4,57,0],[18,2,57,0],[19,2,1,0],[19,6,1,0,"_react"],[19,12,1,0],[19,15,1,0,"require"],[19,22,1,0],[19,23,1,0,"_dependencyMap"],[19,37,1,0],[20,2,2,0],[20,6,2,0,"_useUnmountAwareCallbacks"],[20,31,2,0],[20,34,2,0,"require"],[20,41,2,0],[20,42,2,0,"_dependencyMap"],[20,56,2,0],[21,2,3,0],[22,2,4,0],[23,0,5,0],[24,0,6,0],[25,0,7,0],[26,0,8,0],[27,0,9,0],[28,0,10,0],[29,0,11,0],[30,0,12,0],[31,2,13,7],[31,8,13,13,"useOnListLoad"],[31,21,13,26],[31,24,13,29,"useOnListLoad"],[31,25,13,30,"recyclerViewManager"],[31,44,13,49],[31,46,13,51,"onLoad"],[31,52,13,57],[31,57,13,62],[32,4,14,4],[32,10,14,10,"loadStartTimeRef"],[32,26,14,26],[32,29,14,29],[32,33,14,29,"useRef"],[32,39,14,35],[32,40,14,35,"useRef"],[32,46,14,35],[32,48,14,36,"Date"],[32,52,14,40],[32,53,14,41,"now"],[32,56,14,44],[32,57,14,45],[32,58,14,46],[32,59,14,47],[33,4,15,4],[33,10,15,10],[33,11,15,11,"isLoaded"],[33,19,15,19],[33,21,15,21,"setIsLoaded"],[33,32,15,32],[33,33,15,33],[33,36,15,36],[33,40,15,36,"useState"],[33,46,15,44],[33,47,15,44,"useState"],[33,55,15,44],[33,57,15,45],[33,62,15,50],[33,63,15,51],[34,4,16,4],[34,10,16,10,"dataLength"],[34,20,16,20],[34,23,16,23,"recyclerViewManager"],[34,42,16,42],[34,43,16,43,"getDataLength"],[34,56,16,56],[34,57,16,57],[34,58,16,58],[35,4,17,4],[36,4,18,4],[36,10,18,10],[37,6,18,12,"requestAnimationFrame"],[38,4,18,34],[38,5,18,35],[38,8,18,38],[38,12,18,38,"useUnmountAwareAnimationFrame"],[38,37,18,67],[38,38,18,67,"useUnmountAwareAnimationFrame"],[38,67,18,67],[38,69,18,68],[38,70,18,69],[39,4,19,4],[40,4,20,4],[41,4,21,4],[42,4,22,4],[43,4,23,4],[44,4,24,4],[44,8,24,4,"useMemo"],[44,14,24,11],[44,15,24,11,"useMemo"],[44,22,24,11],[44,24,24,12],[44,30,24,18],[45,6,25,8,"loadStartTimeRef"],[45,22,25,24],[45,23,25,25,"current"],[45,30,25,32],[45,33,25,35,"Date"],[45,37,25,39],[45,38,25,40,"now"],[45,41,25,43],[45,42,25,44],[45,43,25,45],[46,6,26,8],[47,4,27,4],[47,5,27,5],[47,7,27,7],[47,8,27,8,"dataLength"],[47,18,27,18],[47,19,27,19],[47,20,27,20],[48,4,28,4,"useOnLoad"],[48,13,28,13],[48,14,28,14,"recyclerViewManager"],[48,33,28,33],[48,35,28,35],[48,41,28,41],[49,6,29,8],[49,12,29,14,"elapsedTimeInMs"],[49,27,29,29],[49,30,29,32,"Date"],[49,34,29,36],[49,35,29,37,"now"],[49,38,29,40],[49,39,29,41],[49,40,29,42],[49,43,29,45,"loadStartTimeRef"],[49,59,29,61],[49,60,29,62,"current"],[49,67,29,69],[50,6,30,8],[51,6,31,8],[52,6,32,8],[53,6,33,8],[54,6,34,8],[55,6,35,8],[56,6,36,8],[57,6,37,8],[58,6,38,8],[59,6,39,8],[60,6,40,8],[61,6,41,8,"requestAnimationFrame"],[61,27,41,29],[61,28,41,30],[61,34,41,36],[62,8,42,12,"recyclerViewManager"],[62,27,42,31],[62,28,42,32,"isFirstPaintOnUiComplete"],[62,52,42,56],[62,55,42,59],[62,59,42,63],[63,8,43,12,"onLoad"],[63,14,43,18],[63,19,43,23],[63,23,43,27],[63,27,43,31,"onLoad"],[63,33,43,37],[63,38,43,42],[63,43,43,47],[63,44,43,48],[63,47,43,51],[63,52,43,56],[63,53,43,57],[63,56,43,60,"onLoad"],[63,62,43,66],[63,63,43,67],[64,10,43,69,"elapsedTimeInMs"],[65,8,43,85],[65,9,43,86],[65,10,43,87],[66,8,44,12,"setIsLoaded"],[66,19,44,23],[66,20,44,24],[66,24,44,28],[66,25,44,29],[67,6,45,8],[67,7,45,9],[67,8,45,10],[68,4,46,4],[68,5,46,5],[68,6,46,6],[69,4,47,4],[69,11,47,11],[70,6,47,13,"isLoaded"],[71,4,47,22],[71,5,47,23],[72,2,48,0],[72,3,48,1],[73,2,49,0],[74,0,50,0],[75,0,51,0],[76,0,52,0],[77,0,53,0],[78,0,54,0],[79,0,55,0],[80,0,56,0],[81,2,57,7],[81,8,57,13,"useOnLoad"],[81,17,57,22],[81,20,57,25,"useOnLoad"],[81,21,57,26,"recyclerViewManager"],[81,40,57,45],[81,42,57,47,"onLoad"],[81,48,57,53],[81,53,57,58],[82,4,58,4],[82,10,58,10,"isLoaded"],[82,18,58,18],[82,21,58,21],[82,25,58,21,"useRef"],[82,31,58,27],[82,32,58,27,"useRef"],[82,38,58,27],[82,40,58,28],[82,45,58,33],[82,46,58,34],[83,4,59,4],[83,8,59,4,"useEffect"],[83,14,59,13],[83,15,59,13,"useEffect"],[83,24,59,13],[83,26,59,14],[83,32,59,20],[84,6,60,8],[85,6,61,8],[85,10,61,12,"recyclerViewManager"],[85,29,61,31],[85,30,61,32,"getIsFirstLayoutComplete"],[85,54,61,56],[85,55,61,57],[85,56,61,58],[85,60,61,62],[85,61,61,63,"isLoaded"],[85,69,61,71],[85,70,61,72,"current"],[85,77,61,79],[85,79,61,81],[86,8,62,12,"isLoaded"],[86,16,62,20],[86,17,62,21,"current"],[86,24,62,28],[86,27,62,31],[86,31,62,35],[87,8,63,12,"onLoad"],[87,14,63,18],[87,15,63,19],[87,16,63,20],[88,6,64,8],[89,4,65,4],[89,5,65,5],[89,6,65,6],[90,2,66,0],[90,3,66,1],[91,0,66,2],[91,3]],"functionMap":{"names":["<global>","useOnListLoad","useMemo$argument_0","useOnLoad$argument_1","requestAnimationFrame$argument_0","useOnLoad","useEffect$argument_0"],"mappings":"AAA;6BCY;YCW;KDG;mCEC;8BCa;SDI;KFC;CDE;yBKS;cCE;KDM;CLC"},"hasCjsExports":false},"type":"js/module"}]}