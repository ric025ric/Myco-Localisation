{"dependencies":[{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":14,"index":14},"end":{"line":1,"column":32,"index":32}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8=","exportNames":["*"],"imports":1}},{"name":"./error-correction-code","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":15,"index":48},"end":{"line":2,"column":49,"index":82}}],"key":"3KPrHWT/Mg0Mk4hz3ogCQ0txM+E=","exportNames":["*"],"imports":1}},{"name":"./error-correction-level","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":99},"end":{"line":3,"column":51,"index":134}}],"key":"AmKLBavoaXvmZUN9GkUo+rni3HQ=","exportNames":["*"],"imports":1}},{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":148},"end":{"line":4,"column":30,"index":165}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0=","exportNames":["*"],"imports":1}},{"name":"./version-check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":21,"index":187},"end":{"line":5,"column":47,"index":213}}],"key":"KsD14V0r68dUrO4yG/0Qjl3HIGU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const Utils = require(_dependencyMap[0], \"./utils\");\n  const ECCode = require(_dependencyMap[1], \"./error-correction-code\");\n  const ECLevel = require(_dependencyMap[2], \"./error-correction-level\");\n  const Mode = require(_dependencyMap[3], \"./mode\");\n  const VersionCheck = require(_dependencyMap[4], \"./version-check\");\n\n  // Generator polynomial used to encode version information\n  const G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n  const G18_BCH = Utils.getBCHDigit(G18);\n  function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n    for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n        return currentVersion;\n      }\n    }\n    return undefined;\n  }\n  function getReservedBitsCount(mode, version) {\n    // Character count indicator + mode indicator bits\n    return Mode.getCharCountIndicator(mode, version) + 4;\n  }\n  function getTotalBitsFromDataArray(segments, version) {\n    let totalBits = 0;\n    segments.forEach(function (data) {\n      const reservedBits = getReservedBitsCount(data.mode, version);\n      totalBits += reservedBits + data.getBitsLength();\n    });\n    return totalBits;\n  }\n  function getBestVersionForMixedData(segments, errorCorrectionLevel) {\n    for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n      const length = getTotalBitsFromDataArray(segments, currentVersion);\n      if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n        return currentVersion;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns version number from a value.\n   * If value is not a valid version, returns defaultValue\n   *\n   * @param  {Number|String} value        QR Code version\n   * @param  {Number}        defaultValue Fallback value\n   * @return {Number}                     QR Code version number\n   */\n  exports.from = function from(value, defaultValue) {\n    if (VersionCheck.isValid(value)) {\n      return parseInt(value, 10);\n    }\n    return defaultValue;\n  };\n\n  /**\n   * Returns how much data can be stored with the specified QR code version\n   * and error correction level\n   *\n   * @param  {Number} version              QR Code version (1-40)\n   * @param  {Number} errorCorrectionLevel Error correction level\n   * @param  {Mode}   mode                 Data mode\n   * @return {Number}                      Quantity of storable data\n   */\n  exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n    if (!VersionCheck.isValid(version)) {\n      throw new Error('Invalid QR Code version');\n    }\n\n    // Use Byte mode as default\n    if (typeof mode === 'undefined') mode = Mode.BYTE;\n\n    // Total codewords for this QR code version (Data + Error correction)\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n\n    // Total number of error correction codewords\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n\n    // Total number of data codewords\n    const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n    const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n\n    // Return max number of storable codewords\n    switch (mode) {\n      case Mode.NUMERIC:\n        return Math.floor(usableBits / 10 * 3);\n      case Mode.ALPHANUMERIC:\n        return Math.floor(usableBits / 11 * 2);\n      case Mode.KANJI:\n        return Math.floor(usableBits / 13);\n      case Mode.BYTE:\n      default:\n        return Math.floor(usableBits / 8);\n    }\n  };\n\n  /**\n   * Returns the minimum version needed to contain the amount of data\n   *\n   * @param  {Segment} data                    Segment of data\n   * @param  {Number} [errorCorrectionLevel=H] Error correction level\n   * @param  {Mode} mode                       Data mode\n   * @return {Number}                          QR Code version\n   */\n  exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n    let seg;\n    const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n    if (Array.isArray(data)) {\n      if (data.length > 1) {\n        return getBestVersionForMixedData(data, ecl);\n      }\n      if (data.length === 0) {\n        return 1;\n      }\n      seg = data[0];\n    } else {\n      seg = data;\n    }\n    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n  };\n\n  /**\n   * Returns version information with relative error correction bits\n   *\n   * The version information is included in QR Code symbols of version 7 or larger.\n   * It consists of an 18-bit sequence containing 6 data bits,\n   * with 12 error correction bits calculated using the (18, 6) Golay code.\n   *\n   * @param  {Number} version QR Code version\n   * @return {Number}         Encoded version info bits\n   */\n  exports.getEncodedBits = function getEncodedBits(version) {\n    if (!VersionCheck.isValid(version) || version < 7) {\n      throw new Error('Invalid QR Code version');\n    }\n    let d = version << 12;\n    while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n      d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n    }\n    return version << 12 | d;\n  };\n});","lineCount":143,"map":[[2,2,1,0],[2,8,1,6,"Utils"],[2,13,1,11],[2,16,1,14,"require"],[2,23,1,21],[2,24,1,21,"_dependencyMap"],[2,38,1,21],[2,52,1,31],[2,53,1,32],[3,2,2,0],[3,8,2,6,"ECCode"],[3,14,2,12],[3,17,2,15,"require"],[3,24,2,22],[3,25,2,22,"_dependencyMap"],[3,39,2,22],[3,69,2,48],[3,70,2,49],[4,2,3,0],[4,8,3,6,"ECLevel"],[4,15,3,13],[4,18,3,16,"require"],[4,25,3,23],[4,26,3,23,"_dependencyMap"],[4,40,3,23],[4,71,3,50],[4,72,3,51],[5,2,4,0],[5,8,4,6,"Mode"],[5,12,4,10],[5,15,4,13,"require"],[5,22,4,20],[5,23,4,20,"_dependencyMap"],[5,37,4,20],[5,50,4,29],[5,51,4,30],[6,2,5,0],[6,8,5,6,"VersionCheck"],[6,20,5,18],[6,23,5,21,"require"],[6,30,5,28],[6,31,5,28,"_dependencyMap"],[6,45,5,28],[6,67,5,46],[6,68,5,47],[8,2,7,0],[9,2,8,0],[9,8,8,6,"G18"],[9,11,8,9],[9,14,8,13],[9,15,8,14],[9,19,8,18],[9,21,8,20],[9,24,8,25],[9,25,8,26],[9,29,8,30],[9,31,8,33],[9,34,8,37],[9,35,8,38],[9,39,8,42],[9,41,8,45],[9,44,8,49],[9,45,8,50],[9,49,8,54],[9,50,8,56],[9,53,8,60],[9,54,8,61],[9,58,8,65],[9,59,8,67],[9,62,8,71],[9,63,8,72],[9,67,8,76],[9,68,8,78],[9,71,8,82],[9,72,8,83],[9,76,8,87],[9,77,8,89],[9,80,8,93],[9,81,8,94],[9,85,8,98],[9,86,8,100],[10,2,9,0],[10,8,9,6,"G18_BCH"],[10,15,9,13],[10,18,9,16,"Utils"],[10,23,9,21],[10,24,9,22,"getBCHDigit"],[10,35,9,33],[10,36,9,34,"G18"],[10,39,9,37],[10,40,9,38],[11,2,11,0],[11,11,11,9,"getBestVersionForDataLength"],[11,38,11,36,"getBestVersionForDataLength"],[11,39,11,38,"mode"],[11,43,11,42],[11,45,11,44,"length"],[11,51,11,50],[11,53,11,52,"errorCorrectionLevel"],[11,73,11,72],[11,75,11,74],[12,4,12,2],[12,9,12,7],[12,13,12,11,"currentVersion"],[12,27,12,25],[12,30,12,28],[12,31,12,29],[12,33,12,31,"currentVersion"],[12,47,12,45],[12,51,12,49],[12,53,12,51],[12,55,12,53,"currentVersion"],[12,69,12,67],[12,71,12,69],[12,73,12,71],[13,6,13,4],[13,10,13,8,"length"],[13,16,13,14],[13,20,13,18,"exports"],[13,27,13,25],[13,28,13,26,"getCapacity"],[13,39,13,37],[13,40,13,38,"currentVersion"],[13,54,13,52],[13,56,13,54,"errorCorrectionLevel"],[13,76,13,74],[13,78,13,76,"mode"],[13,82,13,80],[13,83,13,81],[13,85,13,83],[14,8,14,6],[14,15,14,13,"currentVersion"],[14,29,14,27],[15,6,15,4],[16,4,16,2],[17,4,18,2],[17,11,18,9,"undefined"],[17,20,18,18],[18,2,19,0],[19,2,21,0],[19,11,21,9,"getReservedBitsCount"],[19,31,21,29,"getReservedBitsCount"],[19,32,21,31,"mode"],[19,36,21,35],[19,38,21,37,"version"],[19,45,21,44],[19,47,21,46],[20,4,22,2],[21,4,23,2],[21,11,23,9,"Mode"],[21,15,23,13],[21,16,23,14,"getCharCountIndicator"],[21,37,23,35],[21,38,23,36,"mode"],[21,42,23,40],[21,44,23,42,"version"],[21,51,23,49],[21,52,23,50],[21,55,23,53],[21,56,23,54],[22,2,24,0],[23,2,26,0],[23,11,26,9,"getTotalBitsFromDataArray"],[23,36,26,34,"getTotalBitsFromDataArray"],[23,37,26,36,"segments"],[23,45,26,44],[23,47,26,46,"version"],[23,54,26,53],[23,56,26,55],[24,4,27,2],[24,8,27,6,"totalBits"],[24,17,27,15],[24,20,27,18],[24,21,27,19],[25,4,29,2,"segments"],[25,12,29,10],[25,13,29,11,"forEach"],[25,20,29,18],[25,21,29,19],[25,31,29,29,"data"],[25,35,29,33],[25,37,29,35],[26,6,30,4],[26,12,30,10,"reservedBits"],[26,24,30,22],[26,27,30,25,"getReservedBitsCount"],[26,47,30,45],[26,48,30,46,"data"],[26,52,30,50],[26,53,30,51,"mode"],[26,57,30,55],[26,59,30,57,"version"],[26,66,30,64],[26,67,30,65],[27,6,31,4,"totalBits"],[27,15,31,13],[27,19,31,17,"reservedBits"],[27,31,31,29],[27,34,31,32,"data"],[27,38,31,36],[27,39,31,37,"getBitsLength"],[27,52,31,50],[27,53,31,51],[27,54,31,52],[28,4,32,2],[28,5,32,3],[28,6,32,4],[29,4,34,2],[29,11,34,9,"totalBits"],[29,20,34,18],[30,2,35,0],[31,2,37,0],[31,11,37,9,"getBestVersionForMixedData"],[31,37,37,35,"getBestVersionForMixedData"],[31,38,37,37,"segments"],[31,46,37,45],[31,48,37,47,"errorCorrectionLevel"],[31,68,37,67],[31,70,37,69],[32,4,38,2],[32,9,38,7],[32,13,38,11,"currentVersion"],[32,27,38,25],[32,30,38,28],[32,31,38,29],[32,33,38,31,"currentVersion"],[32,47,38,45],[32,51,38,49],[32,53,38,51],[32,55,38,53,"currentVersion"],[32,69,38,67],[32,71,38,69],[32,73,38,71],[33,6,39,4],[33,12,39,10,"length"],[33,18,39,16],[33,21,39,19,"getTotalBitsFromDataArray"],[33,46,39,44],[33,47,39,45,"segments"],[33,55,39,53],[33,57,39,55,"currentVersion"],[33,71,39,69],[33,72,39,70],[34,6,40,4],[34,10,40,8,"length"],[34,16,40,14],[34,20,40,18,"exports"],[34,27,40,25],[34,28,40,26,"getCapacity"],[34,39,40,37],[34,40,40,38,"currentVersion"],[34,54,40,52],[34,56,40,54,"errorCorrectionLevel"],[34,76,40,74],[34,78,40,76,"Mode"],[34,82,40,80],[34,83,40,81,"MIXED"],[34,88,40,86],[34,89,40,87],[34,91,40,89],[35,8,41,6],[35,15,41,13,"currentVersion"],[35,29,41,27],[36,6,42,4],[37,4,43,2],[38,4,45,2],[38,11,45,9,"undefined"],[38,20,45,18],[39,2,46,0],[41,2,48,0],[42,0,49,0],[43,0,50,0],[44,0,51,0],[45,0,52,0],[46,0,53,0],[47,0,54,0],[48,0,55,0],[49,2,56,0,"exports"],[49,9,56,7],[49,10,56,8,"from"],[49,14,56,12],[49,17,56,15],[49,26,56,24,"from"],[49,30,56,28,"from"],[49,31,56,30,"value"],[49,36,56,35],[49,38,56,37,"defaultValue"],[49,50,56,49],[49,52,56,51],[50,4,57,2],[50,8,57,6,"VersionCheck"],[50,20,57,18],[50,21,57,19,"isValid"],[50,28,57,26],[50,29,57,27,"value"],[50,34,57,32],[50,35,57,33],[50,37,57,35],[51,6,58,4],[51,13,58,11,"parseInt"],[51,21,58,19],[51,22,58,20,"value"],[51,27,58,25],[51,29,58,27],[51,31,58,29],[51,32,58,30],[52,4,59,2],[53,4,61,2],[53,11,61,9,"defaultValue"],[53,23,61,21],[54,2,62,0],[54,3,62,1],[56,2,64,0],[57,0,65,0],[58,0,66,0],[59,0,67,0],[60,0,68,0],[61,0,69,0],[62,0,70,0],[63,0,71,0],[64,0,72,0],[65,2,73,0,"exports"],[65,9,73,7],[65,10,73,8,"getCapacity"],[65,21,73,19],[65,24,73,22],[65,33,73,31,"getCapacity"],[65,44,73,42,"getCapacity"],[65,45,73,44,"version"],[65,52,73,51],[65,54,73,53,"errorCorrectionLevel"],[65,74,73,73],[65,76,73,75,"mode"],[65,80,73,79],[65,82,73,81],[66,4,74,2],[66,8,74,6],[66,9,74,7,"VersionCheck"],[66,21,74,19],[66,22,74,20,"isValid"],[66,29,74,27],[66,30,74,28,"version"],[66,37,74,35],[66,38,74,36],[66,40,74,38],[67,6,75,4],[67,12,75,10],[67,16,75,14,"Error"],[67,21,75,19],[67,22,75,20],[67,47,75,45],[67,48,75,46],[68,4,76,2],[70,4,78,2],[71,4,79,2],[71,8,79,6],[71,15,79,13,"mode"],[71,19,79,17],[71,24,79,22],[71,35,79,33],[71,37,79,35,"mode"],[71,41,79,39],[71,44,79,42,"Mode"],[71,48,79,46],[71,49,79,47,"BYTE"],[71,53,79,51],[73,4,81,2],[74,4,82,2],[74,10,82,8,"totalCodewords"],[74,24,82,22],[74,27,82,25,"Utils"],[74,32,82,30],[74,33,82,31,"getSymbolTotalCodewords"],[74,56,82,54],[74,57,82,55,"version"],[74,64,82,62],[74,65,82,63],[76,4,84,2],[77,4,85,2],[77,10,85,8,"ecTotalCodewords"],[77,26,85,24],[77,29,85,27,"ECCode"],[77,35,85,33],[77,36,85,34,"getTotalCodewordsCount"],[77,58,85,56],[77,59,85,57,"version"],[77,66,85,64],[77,68,85,66,"errorCorrectionLevel"],[77,88,85,86],[77,89,85,87],[79,4,87,2],[80,4,88,2],[80,10,88,8,"dataTotalCodewordsBits"],[80,32,88,30],[80,35,88,33],[80,36,88,34,"totalCodewords"],[80,50,88,48],[80,53,88,51,"ecTotalCodewords"],[80,69,88,67],[80,73,88,71],[80,74,88,72],[81,4,90,2],[81,8,90,6,"mode"],[81,12,90,10],[81,17,90,15,"Mode"],[81,21,90,19],[81,22,90,20,"MIXED"],[81,27,90,25],[81,29,90,27],[81,36,90,34,"dataTotalCodewordsBits"],[81,58,90,56],[82,4,92,2],[82,10,92,8,"usableBits"],[82,20,92,18],[82,23,92,21,"dataTotalCodewordsBits"],[82,45,92,43],[82,48,92,46,"getReservedBitsCount"],[82,68,92,66],[82,69,92,67,"mode"],[82,73,92,71],[82,75,92,73,"version"],[82,82,92,80],[82,83,92,81],[84,4,94,2],[85,4,95,2],[85,12,95,10,"mode"],[85,16,95,14],[86,6,96,4],[86,11,96,9,"Mode"],[86,15,96,13],[86,16,96,14,"NUMERIC"],[86,23,96,21],[87,8,97,6],[87,15,97,13,"Math"],[87,19,97,17],[87,20,97,18,"floor"],[87,25,97,23],[87,26,97,25,"usableBits"],[87,36,97,35],[87,39,97,38],[87,41,97,40],[87,44,97,44],[87,45,97,45],[87,46,97,46],[88,6,99,4],[88,11,99,9,"Mode"],[88,15,99,13],[88,16,99,14,"ALPHANUMERIC"],[88,28,99,26],[89,8,100,6],[89,15,100,13,"Math"],[89,19,100,17],[89,20,100,18,"floor"],[89,25,100,23],[89,26,100,25,"usableBits"],[89,36,100,35],[89,39,100,38],[89,41,100,40],[89,44,100,44],[89,45,100,45],[89,46,100,46],[90,6,102,4],[90,11,102,9,"Mode"],[90,15,102,13],[90,16,102,14,"KANJI"],[90,21,102,19],[91,8,103,6],[91,15,103,13,"Math"],[91,19,103,17],[91,20,103,18,"floor"],[91,25,103,23],[91,26,103,24,"usableBits"],[91,36,103,34],[91,39,103,37],[91,41,103,39],[91,42,103,40],[92,6,105,4],[92,11,105,9,"Mode"],[92,15,105,13],[92,16,105,14,"BYTE"],[92,20,105,18],[93,6,106,4],[94,8,107,6],[94,15,107,13,"Math"],[94,19,107,17],[94,20,107,18,"floor"],[94,25,107,23],[94,26,107,24,"usableBits"],[94,36,107,34],[94,39,107,37],[94,40,107,38],[94,41,107,39],[95,4,108,2],[96,2,109,0],[96,3,109,1],[98,2,111,0],[99,0,112,0],[100,0,113,0],[101,0,114,0],[102,0,115,0],[103,0,116,0],[104,0,117,0],[105,0,118,0],[106,2,119,0,"exports"],[106,9,119,7],[106,10,119,8,"getBestVersionForData"],[106,31,119,29],[106,34,119,32],[106,43,119,41,"getBestVersionForData"],[106,64,119,62,"getBestVersionForData"],[106,65,119,64,"data"],[106,69,119,68],[106,71,119,70,"errorCorrectionLevel"],[106,91,119,90],[106,93,119,92],[107,4,120,2],[107,8,120,6,"seg"],[107,11,120,9],[108,4,122,2],[108,10,122,8,"ecl"],[108,13,122,11],[108,16,122,14,"ECLevel"],[108,23,122,21],[108,24,122,22,"from"],[108,28,122,26],[108,29,122,27,"errorCorrectionLevel"],[108,49,122,47],[108,51,122,49,"ECLevel"],[108,58,122,56],[108,59,122,57,"M"],[108,60,122,58],[108,61,122,59],[109,4,124,2],[109,8,124,6,"Array"],[109,13,124,11],[109,14,124,12,"isArray"],[109,21,124,19],[109,22,124,20,"data"],[109,26,124,24],[109,27,124,25],[109,29,124,27],[110,6,125,4],[110,10,125,8,"data"],[110,14,125,12],[110,15,125,13,"length"],[110,21,125,19],[110,24,125,22],[110,25,125,23],[110,27,125,25],[111,8,126,6],[111,15,126,13,"getBestVersionForMixedData"],[111,41,126,39],[111,42,126,40,"data"],[111,46,126,44],[111,48,126,46,"ecl"],[111,51,126,49],[111,52,126,50],[112,6,127,4],[113,6,129,4],[113,10,129,8,"data"],[113,14,129,12],[113,15,129,13,"length"],[113,21,129,19],[113,26,129,24],[113,27,129,25],[113,29,129,27],[114,8,130,6],[114,15,130,13],[114,16,130,14],[115,6,131,4],[116,6,133,4,"seg"],[116,9,133,7],[116,12,133,10,"data"],[116,16,133,14],[116,17,133,15],[116,18,133,16],[116,19,133,17],[117,4,134,2],[117,5,134,3],[117,11,134,9],[118,6,135,4,"seg"],[118,9,135,7],[118,12,135,10,"data"],[118,16,135,14],[119,4,136,2],[120,4,138,2],[120,11,138,9,"getBestVersionForDataLength"],[120,38,138,36],[120,39,138,37,"seg"],[120,42,138,40],[120,43,138,41,"mode"],[120,47,138,45],[120,49,138,47,"seg"],[120,52,138,50],[120,53,138,51,"getLength"],[120,62,138,60],[120,63,138,61],[120,64,138,62],[120,66,138,64,"ecl"],[120,69,138,67],[120,70,138,68],[121,2,139,0],[121,3,139,1],[123,2,141,0],[124,0,142,0],[125,0,143,0],[126,0,144,0],[127,0,145,0],[128,0,146,0],[129,0,147,0],[130,0,148,0],[131,0,149,0],[132,0,150,0],[133,2,151,0,"exports"],[133,9,151,7],[133,10,151,8,"getEncodedBits"],[133,24,151,22],[133,27,151,25],[133,36,151,34,"getEncodedBits"],[133,50,151,48,"getEncodedBits"],[133,51,151,50,"version"],[133,58,151,57],[133,60,151,59],[134,4,152,2],[134,8,152,6],[134,9,152,7,"VersionCheck"],[134,21,152,19],[134,22,152,20,"isValid"],[134,29,152,27],[134,30,152,28,"version"],[134,37,152,35],[134,38,152,36],[134,42,152,40,"version"],[134,49,152,47],[134,52,152,50],[134,53,152,51],[134,55,152,53],[135,6,153,4],[135,12,153,10],[135,16,153,14,"Error"],[135,21,153,19],[135,22,153,20],[135,47,153,45],[135,48,153,46],[136,4,154,2],[137,4,156,2],[137,8,156,6,"d"],[137,9,156,7],[137,12,156,10,"version"],[137,19,156,17],[137,23,156,21],[137,25,156,23],[138,4,158,2],[138,11,158,9,"Utils"],[138,16,158,14],[138,17,158,15,"getBCHDigit"],[138,28,158,26],[138,29,158,27,"d"],[138,30,158,28],[138,31,158,29],[138,34,158,32,"G18_BCH"],[138,41,158,39],[138,45,158,43],[138,46,158,44],[138,48,158,46],[139,6,159,4,"d"],[139,7,159,5],[139,11,159,10,"G18"],[139,14,159,13],[139,18,159,18,"Utils"],[139,23,159,23],[139,24,159,24,"getBCHDigit"],[139,35,159,35],[139,36,159,36,"d"],[139,37,159,37],[139,38,159,38],[139,41,159,41,"G18_BCH"],[139,48,159,50],[140,4,160,2],[141,4,162,2],[141,11,162,10,"version"],[141,18,162,17],[141,22,162,21],[141,24,162,23],[141,27,162,27,"d"],[141,28,162,28],[142,2,163,0],[142,3,163,1],[143,0,163,1],[143,3]],"functionMap":{"names":["<global>","getBestVersionForDataLength","getReservedBitsCount","getTotalBitsFromDataArray","segments.forEach$argument_0","getBestVersionForMixedData","from","getCapacity","getBestVersionForData","getEncodedBits"],"mappings":"AAA;ACU;CDQ;AEE;CFG;AGE;mBCG;GDG;CHG;AKE;CLS;eMU;CNM;sBOW;CPoC;gCQU;CRoB;yBSY;CTY"},"hasCjsExports":true},"type":"js/module"}]}