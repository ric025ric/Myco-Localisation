{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"VelocityTracker\", {\n    enumerable: true,\n    get: function () {\n      return VelocityTracker;\n    }\n  });\n  /**\n   * Tracks and calculates velocity for scroll/drag movements\n   * Used to determine momentum scrolling behavior\n   */\n  class VelocityTracker {\n    constructor() {\n      /** Timestamp of the last velocity update */\n      this.lastUpdateTime = Date.now();\n      /** Current velocity vector with x and y components */\n      this.velocity = {\n        x: 0,\n        y: 0\n      };\n      /** Reference to the momentum end timeout */\n      this.timeoutId = null;\n    }\n    /**\n     * Calculates velocity based on position change over time\n     * @param newOffset Current position value\n     * @param oldOffset Previous position value\n     * @param isHorizontal Whether movement is horizontal (true) or vertical (false)\n     * @param isRTL Whether layout direction is right-to-left\n     * @param callback Function to call with velocity updates and momentum end signal\n     */\n    computeVelocity(newOffset, oldOffset, isHorizontal, callback) {\n      // Clear any pending momentum end timeout\n      this.cleanUp();\n      // Calculate time since last update\n      const currentTime = Date.now();\n      const timeSinceLastUpdate = Math.max(1, currentTime - this.lastUpdateTime);\n      // Calculate velocity as distance/time\n      const newVelocity = (newOffset - oldOffset) / timeSinceLastUpdate;\n      // console.log(\n      //   \"newVelocity\",\n      //   newOffset,\n      //   oldOffset,\n      //   currentTime,\n      //   this.lastUpdateTime,\n      //   timeSinceLastUpdate,\n      //   newVelocity\n      // );\n      this.lastUpdateTime = currentTime;\n      // Apply velocity to the correct axis\n      this.velocity.x = isHorizontal ? newVelocity : 0;\n      this.velocity.y = isHorizontal ? 0 : newVelocity;\n      // Trigger callback with current velocity\n      callback(this.velocity, false);\n      // Set timeout to signal momentum end after 100ms of no updates\n      this.timeoutId = setTimeout(() => {\n        this.cleanUp();\n        this.lastUpdateTime = Date.now();\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        callback(this.velocity, true);\n      }, 100);\n    }\n    /**\n     * Cleans up resources by clearing any pending timeout\n     */\n    cleanUp() {\n      if (this.timeoutId !== null) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = null;\n      }\n    }\n  }\n});","lineCount":79,"map":[[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"enumerable"],[8,14,5,0],[9,4,5,0,"get"],[9,7,5,0],[9,18,5,0,"get"],[9,19,5,0],[10,6,5,0],[10,13,5,0,"VelocityTracker"],[10,28,5,0],[11,4,5,0],[12,2,5,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,2,5,7],[17,8,5,13,"VelocityTracker"],[17,23,5,28],[17,24,5,29],[18,4,6,4,"constructor"],[18,15,6,15,"constructor"],[18,16,6,15],[18,18,6,18],[19,6,7,8],[20,6,8,8],[20,10,8,12],[20,11,8,13,"lastUpdateTime"],[20,25,8,27],[20,28,8,30,"Date"],[20,32,8,34],[20,33,8,35,"now"],[20,36,8,38],[20,37,8,39],[20,38,8,40],[21,6,9,8],[22,6,10,8],[22,10,10,12],[22,11,10,13,"velocity"],[22,19,10,21],[22,22,10,24],[23,8,10,26,"x"],[23,9,10,27],[23,11,10,29],[23,12,10,30],[24,8,10,32,"y"],[24,9,10,33],[24,11,10,35],[25,6,10,37],[25,7,10,38],[26,6,11,8],[27,6,12,8],[27,10,12,12],[27,11,12,13,"timeoutId"],[27,20,12,22],[27,23,12,25],[27,27,12,29],[28,4,13,4],[29,4,14,4],[30,0,15,0],[31,0,16,0],[32,0,17,0],[33,0,18,0],[34,0,19,0],[35,0,20,0],[36,0,21,0],[37,4,22,4,"computeVelocity"],[37,19,22,19,"computeVelocity"],[37,20,22,20,"newOffset"],[37,29,22,29],[37,31,22,31,"oldOffset"],[37,40,22,40],[37,42,22,42,"isHorizontal"],[37,54,22,54],[37,56,22,56,"callback"],[37,64,22,64],[37,66,22,66],[38,6,23,8],[39,6,24,8],[39,10,24,12],[39,11,24,13,"cleanUp"],[39,18,24,20],[39,19,24,21],[39,20,24,22],[40,6,25,8],[41,6,26,8],[41,12,26,14,"currentTime"],[41,23,26,25],[41,26,26,28,"Date"],[41,30,26,32],[41,31,26,33,"now"],[41,34,26,36],[41,35,26,37],[41,36,26,38],[42,6,27,8],[42,12,27,14,"timeSinceLastUpdate"],[42,31,27,33],[42,34,27,36,"Math"],[42,38,27,40],[42,39,27,41,"max"],[42,42,27,44],[42,43,27,45],[42,44,27,46],[42,46,27,48,"currentTime"],[42,57,27,59],[42,60,27,62],[42,64,27,66],[42,65,27,67,"lastUpdateTime"],[42,79,27,81],[42,80,27,82],[43,6,28,8],[44,6,29,8],[44,12,29,14,"newVelocity"],[44,23,29,25],[44,26,29,28],[44,27,29,29,"newOffset"],[44,36,29,38],[44,39,29,41,"oldOffset"],[44,48,29,50],[44,52,29,54,"timeSinceLastUpdate"],[44,71,29,73],[45,6,30,8],[46,6,31,8],[47,6,32,8],[48,6,33,8],[49,6,34,8],[50,6,35,8],[51,6,36,8],[52,6,37,8],[53,6,38,8],[54,6,39,8],[54,10,39,12],[54,11,39,13,"lastUpdateTime"],[54,25,39,27],[54,28,39,30,"currentTime"],[54,39,39,41],[55,6,40,8],[56,6,41,8],[56,10,41,12],[56,11,41,13,"velocity"],[56,19,41,21],[56,20,41,22,"x"],[56,21,41,23],[56,24,41,26,"isHorizontal"],[56,36,41,38],[56,39,41,41,"newVelocity"],[56,50,41,52],[56,53,41,55],[56,54,41,56],[57,6,42,8],[57,10,42,12],[57,11,42,13,"velocity"],[57,19,42,21],[57,20,42,22,"y"],[57,21,42,23],[57,24,42,26,"isHorizontal"],[57,36,42,38],[57,39,42,41],[57,40,42,42],[57,43,42,45,"newVelocity"],[57,54,42,56],[58,6,43,8],[59,6,44,8,"callback"],[59,14,44,16],[59,15,44,17],[59,19,44,21],[59,20,44,22,"velocity"],[59,28,44,30],[59,30,44,32],[59,35,44,37],[59,36,44,38],[60,6,45,8],[61,6,46,8],[61,10,46,12],[61,11,46,13,"timeoutId"],[61,20,46,22],[61,23,46,25,"setTimeout"],[61,33,46,35],[61,34,46,36],[61,40,46,42],[62,8,47,12],[62,12,47,16],[62,13,47,17,"cleanUp"],[62,20,47,24],[62,21,47,25],[62,22,47,26],[63,8,48,12],[63,12,48,16],[63,13,48,17,"lastUpdateTime"],[63,27,48,31],[63,30,48,34,"Date"],[63,34,48,38],[63,35,48,39,"now"],[63,38,48,42],[63,39,48,43],[63,40,48,44],[64,8,49,12],[64,12,49,16],[64,13,49,17,"velocity"],[64,21,49,25],[64,22,49,26,"x"],[64,23,49,27],[64,26,49,30],[64,27,49,31],[65,8,50,12],[65,12,50,16],[65,13,50,17,"velocity"],[65,21,50,25],[65,22,50,26,"y"],[65,23,50,27],[65,26,50,30],[65,27,50,31],[66,8,51,12,"callback"],[66,16,51,20],[66,17,51,21],[66,21,51,25],[66,22,51,26,"velocity"],[66,30,51,34],[66,32,51,36],[66,36,51,40],[66,37,51,41],[67,6,52,8],[67,7,52,9],[67,9,52,11],[67,12,52,14],[67,13,52,15],[68,4,53,4],[69,4,54,4],[70,0,55,0],[71,0,56,0],[72,4,57,4,"cleanUp"],[72,11,57,11,"cleanUp"],[72,12,57,11],[72,14,57,14],[73,6,58,8],[73,10,58,12],[73,14,58,16],[73,15,58,17,"timeoutId"],[73,24,58,26],[73,29,58,31],[73,33,58,35],[73,35,58,37],[74,8,59,12,"clearTimeout"],[74,20,59,24],[74,21,59,25],[74,25,59,29],[74,26,59,30,"timeoutId"],[74,35,59,39],[74,36,59,40],[75,8,60,12],[75,12,60,16],[75,13,60,17,"timeoutId"],[75,22,60,26],[75,25,60,29],[75,29,60,33],[76,6,61,8],[77,4,62,4],[78,2,63,0],[79,0,63,1],[79,3]],"functionMap":{"names":["<global>","VelocityTracker","constructor","computeVelocity","setTimeout$argument_0","cleanUp"],"mappings":"AAA;OCI;ICC;KDO;IES;oCCwB;SDM;KFC;III;KJK;CDC"},"hasCjsExports":false},"type":"js/module"}]}