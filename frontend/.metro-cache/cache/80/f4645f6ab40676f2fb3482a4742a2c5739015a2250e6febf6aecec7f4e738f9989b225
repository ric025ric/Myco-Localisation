{"dependencies":[{"name":"util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":11,"index":26},"end":{"line":3,"column":26,"index":41}}],"key":"plO20G0zye191TqKMAMeOagk9EI=","exportNames":["*"],"imports":1}},{"name":"zlib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":11,"index":54},"end":{"line":4,"column":26,"index":69}}],"key":"7ZGzBJgs2mS8aYt35oOcBHDVVuM=","exportNames":["*"],"imports":1}},{"name":"./chunkstream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":18,"index":89},"end":{"line":5,"column":42,"index":113}}],"key":"m8eez9Rwdm6lsFx8XFSxpfxTxok=","exportNames":["*"],"imports":1}},{"name":"./filter-parse-async","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":18,"index":133},"end":{"line":6,"column":49,"index":164}}],"key":"4nUgAmfOjLRyuxrqnWWS6XYDhZM=","exportNames":["*"],"imports":1}},{"name":"./parser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":13,"index":179},"end":{"line":7,"column":32,"index":198}}],"key":"FmGTSeJZ/sRo3ZQza+Wy1CXXMyM=","exportNames":["*"],"imports":1}},{"name":"./bitmapper","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":16,"index":216},"end":{"line":8,"column":38,"index":238}}],"key":"vi8139EPiWWyzftijfzSH1CHXks=","exportNames":["*"],"imports":1}},{"name":"./format-normaliser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":23,"index":263},"end":{"line":9,"column":53,"index":293}}],"key":"ypTMryKQtTShoBQSBqdvn+nzLUE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  let util = require(_dependencyMap[0], \"util\");\n  let zlib = require(_dependencyMap[1], \"zlib\");\n  let ChunkStream = require(_dependencyMap[2], \"./chunkstream\");\n  let FilterAsync = require(_dependencyMap[3], \"./filter-parse-async\");\n  let Parser = require(_dependencyMap[4], \"./parser\");\n  let bitmapper = require(_dependencyMap[5], \"./bitmapper\");\n  let formatNormaliser = require(_dependencyMap[6], \"./format-normaliser\");\n  let ParserAsync = module.exports = function (options) {\n    ChunkStream.call(this);\n    this._parser = new Parser(options, {\n      read: this.read.bind(this),\n      error: this._handleError.bind(this),\n      metadata: this._handleMetaData.bind(this),\n      gamma: this.emit.bind(this, \"gamma\"),\n      palette: this._handlePalette.bind(this),\n      transColor: this._handleTransColor.bind(this),\n      finished: this._finished.bind(this),\n      inflateData: this._inflateData.bind(this),\n      simpleTransparency: this._simpleTransparency.bind(this),\n      headersFinished: this._headersFinished.bind(this)\n    });\n    this._options = options;\n    this.writable = true;\n    this._parser.start();\n  };\n  util.inherits(ParserAsync, ChunkStream);\n  ParserAsync.prototype._handleError = function (err) {\n    this.emit(\"error\", err);\n    this.writable = false;\n    this.destroy();\n    if (this._inflate && this._inflate.destroy) {\n      this._inflate.destroy();\n    }\n    if (this._filter) {\n      this._filter.destroy();\n      // For backward compatibility with Node 7 and below.\n      // Suppress errors due to _inflate calling write() even after\n      // it's destroy()'ed.\n      this._filter.on(\"error\", function () {});\n    }\n    this.errord = true;\n  };\n  ParserAsync.prototype._inflateData = function (data) {\n    if (!this._inflate) {\n      if (this._bitmapInfo.interlace) {\n        this._inflate = zlib.createInflate();\n        this._inflate.on(\"error\", this.emit.bind(this, \"error\"));\n        this._filter.on(\"complete\", this._complete.bind(this));\n        this._inflate.pipe(this._filter);\n      } else {\n        let rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n        let imageSize = rowSize * this._bitmapInfo.height;\n        let chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n        this._inflate = zlib.createInflate({\n          chunkSize: chunkSize\n        });\n        let leftToInflate = imageSize;\n        let emitError = this.emit.bind(this, \"error\");\n        this._inflate.on(\"error\", function (err) {\n          if (!leftToInflate) {\n            return;\n          }\n          emitError(err);\n        });\n        this._filter.on(\"complete\", this._complete.bind(this));\n        let filterWrite = this._filter.write.bind(this._filter);\n        this._inflate.on(\"data\", function (chunk) {\n          if (!leftToInflate) {\n            return;\n          }\n          if (chunk.length > leftToInflate) {\n            chunk = chunk.slice(0, leftToInflate);\n          }\n          leftToInflate -= chunk.length;\n          filterWrite(chunk);\n        });\n        this._inflate.on(\"end\", this._filter.end.bind(this._filter));\n      }\n    }\n    this._inflate.write(data);\n  };\n  ParserAsync.prototype._handleMetaData = function (metaData) {\n    this._metaData = metaData;\n    this._bitmapInfo = Object.create(metaData);\n    this._filter = new FilterAsync(this._bitmapInfo);\n  };\n  ParserAsync.prototype._handleTransColor = function (transColor) {\n    this._bitmapInfo.transColor = transColor;\n  };\n  ParserAsync.prototype._handlePalette = function (palette) {\n    this._bitmapInfo.palette = palette;\n  };\n  ParserAsync.prototype._simpleTransparency = function () {\n    this._metaData.alpha = true;\n  };\n  ParserAsync.prototype._headersFinished = function () {\n    // Up until this point, we don't know if we have a tRNS chunk (alpha)\n    // so we can't emit metadata any earlier\n    this.emit(\"metadata\", this._metaData);\n  };\n  ParserAsync.prototype._finished = function () {\n    if (this.errord) {\n      return;\n    }\n    if (!this._inflate) {\n      this.emit(\"error\", \"No Inflate block\");\n    } else {\n      // no more data to inflate\n      this._inflate.end();\n    }\n  };\n  ParserAsync.prototype._complete = function (filteredData) {\n    if (this.errord) {\n      return;\n    }\n    let normalisedBitmapData;\n    try {\n      let bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n      normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n      bitmapData = null;\n    } catch (ex) {\n      this._handleError(ex);\n      return;\n    }\n    this.emit(\"parsed\", normalisedBitmapData);\n  };\n});","lineCount":130,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"util"],[4,10,3,8],[4,13,3,11,"require"],[4,20,3,18],[4,21,3,18,"_dependencyMap"],[4,35,3,18],[4,46,3,25],[4,47,3,26],[5,2,4,0],[5,6,4,4,"zlib"],[5,10,4,8],[5,13,4,11,"require"],[5,20,4,18],[5,21,4,18,"_dependencyMap"],[5,35,4,18],[5,46,4,25],[5,47,4,26],[6,2,5,0],[6,6,5,4,"ChunkStream"],[6,17,5,15],[6,20,5,18,"require"],[6,27,5,25],[6,28,5,25,"_dependencyMap"],[6,42,5,25],[6,62,5,41],[6,63,5,42],[7,2,6,0],[7,6,6,4,"FilterAsync"],[7,17,6,15],[7,20,6,18,"require"],[7,27,6,25],[7,28,6,25,"_dependencyMap"],[7,42,6,25],[7,69,6,48],[7,70,6,49],[8,2,7,0],[8,6,7,4,"Parser"],[8,12,7,10],[8,15,7,13,"require"],[8,22,7,20],[8,23,7,20,"_dependencyMap"],[8,37,7,20],[8,52,7,31],[8,53,7,32],[9,2,8,0],[9,6,8,4,"bitmapper"],[9,15,8,13],[9,18,8,16,"require"],[9,25,8,23],[9,26,8,23,"_dependencyMap"],[9,40,8,23],[9,58,8,37],[9,59,8,38],[10,2,9,0],[10,6,9,4,"formatNormaliser"],[10,22,9,20],[10,25,9,23,"require"],[10,32,9,30],[10,33,9,30,"_dependencyMap"],[10,47,9,30],[10,73,9,52],[10,74,9,53],[11,2,11,0],[11,6,11,4,"ParserAsync"],[11,17,11,15],[11,20,11,19,"module"],[11,26,11,25],[11,27,11,26,"exports"],[11,34,11,33],[11,37,11,36],[11,47,11,46,"options"],[11,54,11,53],[11,56,11,55],[12,4,12,2,"ChunkStream"],[12,15,12,13],[12,16,12,14,"call"],[12,20,12,18],[12,21,12,19],[12,25,12,23],[12,26,12,24],[13,4,14,2],[13,8,14,6],[13,9,14,7,"_parser"],[13,16,14,14],[13,19,14,17],[13,23,14,21,"Parser"],[13,29,14,27],[13,30,14,28,"options"],[13,37,14,35],[13,39,14,37],[14,6,15,4,"read"],[14,10,15,8],[14,12,15,10],[14,16,15,14],[14,17,15,15,"read"],[14,21,15,19],[14,22,15,20,"bind"],[14,26,15,24],[14,27,15,25],[14,31,15,29],[14,32,15,30],[15,6,16,4,"error"],[15,11,16,9],[15,13,16,11],[15,17,16,15],[15,18,16,16,"_handleError"],[15,30,16,28],[15,31,16,29,"bind"],[15,35,16,33],[15,36,16,34],[15,40,16,38],[15,41,16,39],[16,6,17,4,"metadata"],[16,14,17,12],[16,16,17,14],[16,20,17,18],[16,21,17,19,"_handleMetaData"],[16,36,17,34],[16,37,17,35,"bind"],[16,41,17,39],[16,42,17,40],[16,46,17,44],[16,47,17,45],[17,6,18,4,"gamma"],[17,11,18,9],[17,13,18,11],[17,17,18,15],[17,18,18,16,"emit"],[17,22,18,20],[17,23,18,21,"bind"],[17,27,18,25],[17,28,18,26],[17,32,18,30],[17,34,18,32],[17,41,18,39],[17,42,18,40],[18,6,19,4,"palette"],[18,13,19,11],[18,15,19,13],[18,19,19,17],[18,20,19,18,"_handlePalette"],[18,34,19,32],[18,35,19,33,"bind"],[18,39,19,37],[18,40,19,38],[18,44,19,42],[18,45,19,43],[19,6,20,4,"transColor"],[19,16,20,14],[19,18,20,16],[19,22,20,20],[19,23,20,21,"_handleTransColor"],[19,40,20,38],[19,41,20,39,"bind"],[19,45,20,43],[19,46,20,44],[19,50,20,48],[19,51,20,49],[20,6,21,4,"finished"],[20,14,21,12],[20,16,21,14],[20,20,21,18],[20,21,21,19,"_finished"],[20,30,21,28],[20,31,21,29,"bind"],[20,35,21,33],[20,36,21,34],[20,40,21,38],[20,41,21,39],[21,6,22,4,"inflateData"],[21,17,22,15],[21,19,22,17],[21,23,22,21],[21,24,22,22,"_inflateData"],[21,36,22,34],[21,37,22,35,"bind"],[21,41,22,39],[21,42,22,40],[21,46,22,44],[21,47,22,45],[22,6,23,4,"simpleTransparency"],[22,24,23,22],[22,26,23,24],[22,30,23,28],[22,31,23,29,"_simpleTransparency"],[22,50,23,48],[22,51,23,49,"bind"],[22,55,23,53],[22,56,23,54],[22,60,23,58],[22,61,23,59],[23,6,24,4,"headersFinished"],[23,21,24,19],[23,23,24,21],[23,27,24,25],[23,28,24,26,"_headersFinished"],[23,44,24,42],[23,45,24,43,"bind"],[23,49,24,47],[23,50,24,48],[23,54,24,52],[24,4,25,2],[24,5,25,3],[24,6,25,4],[25,4,26,2],[25,8,26,6],[25,9,26,7,"_options"],[25,17,26,15],[25,20,26,18,"options"],[25,27,26,25],[26,4,27,2],[26,8,27,6],[26,9,27,7,"writable"],[26,17,27,15],[26,20,27,18],[26,24,27,22],[27,4,29,2],[27,8,29,6],[27,9,29,7,"_parser"],[27,16,29,14],[27,17,29,15,"start"],[27,22,29,20],[27,23,29,21],[27,24,29,22],[28,2,30,0],[28,3,30,2],[29,2,31,0,"util"],[29,6,31,4],[29,7,31,5,"inherits"],[29,15,31,13],[29,16,31,14,"ParserAsync"],[29,27,31,25],[29,29,31,27,"ChunkStream"],[29,40,31,38],[29,41,31,39],[30,2,33,0,"ParserAsync"],[30,13,33,11],[30,14,33,12,"prototype"],[30,23,33,21],[30,24,33,22,"_handleError"],[30,36,33,34],[30,39,33,37],[30,49,33,47,"err"],[30,52,33,50],[30,54,33,52],[31,4,34,2],[31,8,34,6],[31,9,34,7,"emit"],[31,13,34,11],[31,14,34,12],[31,21,34,19],[31,23,34,21,"err"],[31,26,34,24],[31,27,34,25],[32,4,36,2],[32,8,36,6],[32,9,36,7,"writable"],[32,17,36,15],[32,20,36,18],[32,25,36,23],[33,4,38,2],[33,8,38,6],[33,9,38,7,"destroy"],[33,16,38,14],[33,17,38,15],[33,18,38,16],[34,4,40,2],[34,8,40,6],[34,12,40,10],[34,13,40,11,"_inflate"],[34,21,40,19],[34,25,40,23],[34,29,40,27],[34,30,40,28,"_inflate"],[34,38,40,36],[34,39,40,37,"destroy"],[34,46,40,44],[34,48,40,46],[35,6,41,4],[35,10,41,8],[35,11,41,9,"_inflate"],[35,19,41,17],[35,20,41,18,"destroy"],[35,27,41,25],[35,28,41,26],[35,29,41,27],[36,4,42,2],[37,4,44,2],[37,8,44,6],[37,12,44,10],[37,13,44,11,"_filter"],[37,20,44,18],[37,22,44,20],[38,6,45,4],[38,10,45,8],[38,11,45,9,"_filter"],[38,18,45,16],[38,19,45,17,"destroy"],[38,26,45,24],[38,27,45,25],[38,28,45,26],[39,6,46,4],[40,6,47,4],[41,6,48,4],[42,6,49,4],[42,10,49,8],[42,11,49,9,"_filter"],[42,18,49,16],[42,19,49,17,"on"],[42,21,49,19],[42,22,49,20],[42,29,49,27],[42,31,49,29],[42,43,49,41],[42,44,49,42],[42,45,49,43],[42,46,49,44],[43,4,50,2],[44,4,52,2],[44,8,52,6],[44,9,52,7,"errord"],[44,15,52,13],[44,18,52,16],[44,22,52,20],[45,2,53,0],[45,3,53,1],[46,2,55,0,"ParserAsync"],[46,13,55,11],[46,14,55,12,"prototype"],[46,23,55,21],[46,24,55,22,"_inflateData"],[46,36,55,34],[46,39,55,37],[46,49,55,47,"data"],[46,53,55,51],[46,55,55,53],[47,4,56,2],[47,8,56,6],[47,9,56,7],[47,13,56,11],[47,14,56,12,"_inflate"],[47,22,56,20],[47,24,56,22],[48,6,57,4],[48,10,57,8],[48,14,57,12],[48,15,57,13,"_bitmapInfo"],[48,26,57,24],[48,27,57,25,"interlace"],[48,36,57,34],[48,38,57,36],[49,8,58,6],[49,12,58,10],[49,13,58,11,"_inflate"],[49,21,58,19],[49,24,58,22,"zlib"],[49,28,58,26],[49,29,58,27,"createInflate"],[49,42,58,40],[49,43,58,41],[49,44,58,42],[50,8,60,6],[50,12,60,10],[50,13,60,11,"_inflate"],[50,21,60,19],[50,22,60,20,"on"],[50,24,60,22],[50,25,60,23],[50,32,60,30],[50,34,60,32],[50,38,60,36],[50,39,60,37,"emit"],[50,43,60,41],[50,44,60,42,"bind"],[50,48,60,46],[50,49,60,47],[50,53,60,51],[50,55,60,53],[50,62,60,60],[50,63,60,61],[50,64,60,62],[51,8,61,6],[51,12,61,10],[51,13,61,11,"_filter"],[51,20,61,18],[51,21,61,19,"on"],[51,23,61,21],[51,24,61,22],[51,34,61,32],[51,36,61,34],[51,40,61,38],[51,41,61,39,"_complete"],[51,50,61,48],[51,51,61,49,"bind"],[51,55,61,53],[51,56,61,54],[51,60,61,58],[51,61,61,59],[51,62,61,60],[52,8,63,6],[52,12,63,10],[52,13,63,11,"_inflate"],[52,21,63,19],[52,22,63,20,"pipe"],[52,26,63,24],[52,27,63,25],[52,31,63,29],[52,32,63,30,"_filter"],[52,39,63,37],[52,40,63,38],[53,6,64,4],[53,7,64,5],[53,13,64,11],[54,8,65,6],[54,12,65,10,"rowSize"],[54,19,65,17],[54,22,66,8],[54,23,66,10],[54,27,66,14],[54,28,66,15,"_bitmapInfo"],[54,39,66,26],[54,40,66,27,"width"],[54,45,66,32],[54,48,67,10],[54,52,67,14],[54,53,67,15,"_bitmapInfo"],[54,64,67,26],[54,65,67,27,"bpp"],[54,68,67,30],[54,71,68,10],[54,75,68,14],[54,76,68,15,"_bitmapInfo"],[54,87,68,26],[54,88,68,27,"depth"],[54,93,68,32],[54,96,69,10],[54,97,69,11],[54,101,70,10],[54,102,70,11],[54,106,71,8],[54,107,71,9],[55,8,72,6],[55,12,72,10,"imageSize"],[55,21,72,19],[55,24,72,22,"rowSize"],[55,31,72,29],[55,34,72,32],[55,38,72,36],[55,39,72,37,"_bitmapInfo"],[55,50,72,48],[55,51,72,49,"height"],[55,57,72,55],[56,8,73,6],[56,12,73,10,"chunkSize"],[56,21,73,19],[56,24,73,22,"Math"],[56,28,73,26],[56,29,73,27,"max"],[56,32,73,30],[56,33,73,31,"imageSize"],[56,42,73,40],[56,44,73,42,"zlib"],[56,48,73,46],[56,49,73,47,"Z_MIN_CHUNK"],[56,60,73,58],[56,61,73,59],[57,8,75,6],[57,12,75,10],[57,13,75,11,"_inflate"],[57,21,75,19],[57,24,75,22,"zlib"],[57,28,75,26],[57,29,75,27,"createInflate"],[57,42,75,40],[57,43,75,41],[58,10,75,43,"chunkSize"],[58,19,75,52],[58,21,75,54,"chunkSize"],[59,8,75,64],[59,9,75,65],[59,10,75,66],[60,8,76,6],[60,12,76,10,"leftToInflate"],[60,25,76,23],[60,28,76,26,"imageSize"],[60,37,76,35],[61,8,78,6],[61,12,78,10,"emitError"],[61,21,78,19],[61,24,78,22],[61,28,78,26],[61,29,78,27,"emit"],[61,33,78,31],[61,34,78,32,"bind"],[61,38,78,36],[61,39,78,37],[61,43,78,41],[61,45,78,43],[61,52,78,50],[61,53,78,51],[62,8,79,6],[62,12,79,10],[62,13,79,11,"_inflate"],[62,21,79,19],[62,22,79,20,"on"],[62,24,79,22],[62,25,79,23],[62,32,79,30],[62,34,79,32],[62,44,79,42,"err"],[62,47,79,45],[62,49,79,47],[63,10,80,8],[63,14,80,12],[63,15,80,13,"leftToInflate"],[63,28,80,26],[63,30,80,28],[64,12,81,10],[65,10,82,8],[66,10,84,8,"emitError"],[66,19,84,17],[66,20,84,18,"err"],[66,23,84,21],[66,24,84,22],[67,8,85,6],[67,9,85,7],[67,10,85,8],[68,8,86,6],[68,12,86,10],[68,13,86,11,"_filter"],[68,20,86,18],[68,21,86,19,"on"],[68,23,86,21],[68,24,86,22],[68,34,86,32],[68,36,86,34],[68,40,86,38],[68,41,86,39,"_complete"],[68,50,86,48],[68,51,86,49,"bind"],[68,55,86,53],[68,56,86,54],[68,60,86,58],[68,61,86,59],[68,62,86,60],[69,8,88,6],[69,12,88,10,"filterWrite"],[69,23,88,21],[69,26,88,24],[69,30,88,28],[69,31,88,29,"_filter"],[69,38,88,36],[69,39,88,37,"write"],[69,44,88,42],[69,45,88,43,"bind"],[69,49,88,47],[69,50,88,48],[69,54,88,52],[69,55,88,53,"_filter"],[69,62,88,60],[69,63,88,61],[70,8,89,6],[70,12,89,10],[70,13,89,11,"_inflate"],[70,21,89,19],[70,22,89,20,"on"],[70,24,89,22],[70,25,89,23],[70,31,89,29],[70,33,89,31],[70,43,89,41,"chunk"],[70,48,89,46],[70,50,89,48],[71,10,90,8],[71,14,90,12],[71,15,90,13,"leftToInflate"],[71,28,90,26],[71,30,90,28],[72,12,91,10],[73,10,92,8],[74,10,94,8],[74,14,94,12,"chunk"],[74,19,94,17],[74,20,94,18,"length"],[74,26,94,24],[74,29,94,27,"leftToInflate"],[74,42,94,40],[74,44,94,42],[75,12,95,10,"chunk"],[75,17,95,15],[75,20,95,18,"chunk"],[75,25,95,23],[75,26,95,24,"slice"],[75,31,95,29],[75,32,95,30],[75,33,95,31],[75,35,95,33,"leftToInflate"],[75,48,95,46],[75,49,95,47],[76,10,96,8],[77,10,98,8,"leftToInflate"],[77,23,98,21],[77,27,98,25,"chunk"],[77,32,98,30],[77,33,98,31,"length"],[77,39,98,37],[78,10,100,8,"filterWrite"],[78,21,100,19],[78,22,100,20,"chunk"],[78,27,100,25],[78,28,100,26],[79,8,101,6],[79,9,101,7],[79,10,101,8],[80,8,103,6],[80,12,103,10],[80,13,103,11,"_inflate"],[80,21,103,19],[80,22,103,20,"on"],[80,24,103,22],[80,25,103,23],[80,30,103,28],[80,32,103,30],[80,36,103,34],[80,37,103,35,"_filter"],[80,44,103,42],[80,45,103,43,"end"],[80,48,103,46],[80,49,103,47,"bind"],[80,53,103,51],[80,54,103,52],[80,58,103,56],[80,59,103,57,"_filter"],[80,66,103,64],[80,67,103,65],[80,68,103,66],[81,6,104,4],[82,4,105,2],[83,4,106,2],[83,8,106,6],[83,9,106,7,"_inflate"],[83,17,106,15],[83,18,106,16,"write"],[83,23,106,21],[83,24,106,22,"data"],[83,28,106,26],[83,29,106,27],[84,2,107,0],[84,3,107,1],[85,2,109,0,"ParserAsync"],[85,13,109,11],[85,14,109,12,"prototype"],[85,23,109,21],[85,24,109,22,"_handleMetaData"],[85,39,109,37],[85,42,109,40],[85,52,109,50,"metaData"],[85,60,109,58],[85,62,109,60],[86,4,110,2],[86,8,110,6],[86,9,110,7,"_metaData"],[86,18,110,16],[86,21,110,19,"metaData"],[86,29,110,27],[87,4,111,2],[87,8,111,6],[87,9,111,7,"_bitmapInfo"],[87,20,111,18],[87,23,111,21,"Object"],[87,29,111,27],[87,30,111,28,"create"],[87,36,111,34],[87,37,111,35,"metaData"],[87,45,111,43],[87,46,111,44],[88,4,113,2],[88,8,113,6],[88,9,113,7,"_filter"],[88,16,113,14],[88,19,113,17],[88,23,113,21,"FilterAsync"],[88,34,113,32],[88,35,113,33],[88,39,113,37],[88,40,113,38,"_bitmapInfo"],[88,51,113,49],[88,52,113,50],[89,2,114,0],[89,3,114,1],[90,2,116,0,"ParserAsync"],[90,13,116,11],[90,14,116,12,"prototype"],[90,23,116,21],[90,24,116,22,"_handleTransColor"],[90,41,116,39],[90,44,116,42],[90,54,116,52,"transColor"],[90,64,116,62],[90,66,116,64],[91,4,117,2],[91,8,117,6],[91,9,117,7,"_bitmapInfo"],[91,20,117,18],[91,21,117,19,"transColor"],[91,31,117,29],[91,34,117,32,"transColor"],[91,44,117,42],[92,2,118,0],[92,3,118,1],[93,2,120,0,"ParserAsync"],[93,13,120,11],[93,14,120,12,"prototype"],[93,23,120,21],[93,24,120,22,"_handlePalette"],[93,38,120,36],[93,41,120,39],[93,51,120,49,"palette"],[93,58,120,56],[93,60,120,58],[94,4,121,2],[94,8,121,6],[94,9,121,7,"_bitmapInfo"],[94,20,121,18],[94,21,121,19,"palette"],[94,28,121,26],[94,31,121,29,"palette"],[94,38,121,36],[95,2,122,0],[95,3,122,1],[96,2,124,0,"ParserAsync"],[96,13,124,11],[96,14,124,12,"prototype"],[96,23,124,21],[96,24,124,22,"_simpleTransparency"],[96,43,124,41],[96,46,124,44],[96,58,124,56],[97,4,125,2],[97,8,125,6],[97,9,125,7,"_metaData"],[97,18,125,16],[97,19,125,17,"alpha"],[97,24,125,22],[97,27,125,25],[97,31,125,29],[98,2,126,0],[98,3,126,1],[99,2,128,0,"ParserAsync"],[99,13,128,11],[99,14,128,12,"prototype"],[99,23,128,21],[99,24,128,22,"_headersFinished"],[99,40,128,38],[99,43,128,41],[99,55,128,53],[100,4,129,2],[101,4,130,2],[102,4,131,2],[102,8,131,6],[102,9,131,7,"emit"],[102,13,131,11],[102,14,131,12],[102,24,131,22],[102,26,131,24],[102,30,131,28],[102,31,131,29,"_metaData"],[102,40,131,38],[102,41,131,39],[103,2,132,0],[103,3,132,1],[104,2,134,0,"ParserAsync"],[104,13,134,11],[104,14,134,12,"prototype"],[104,23,134,21],[104,24,134,22,"_finished"],[104,33,134,31],[104,36,134,34],[104,48,134,46],[105,4,135,2],[105,8,135,6],[105,12,135,10],[105,13,135,11,"errord"],[105,19,135,17],[105,21,135,19],[106,6,136,4],[107,4,137,2],[108,4,139,2],[108,8,139,6],[108,9,139,7],[108,13,139,11],[108,14,139,12,"_inflate"],[108,22,139,20],[108,24,139,22],[109,6,140,4],[109,10,140,8],[109,11,140,9,"emit"],[109,15,140,13],[109,16,140,14],[109,23,140,21],[109,25,140,23],[109,43,140,41],[109,44,140,42],[110,4,141,2],[110,5,141,3],[110,11,141,9],[111,6,142,4],[112,6,143,4],[112,10,143,8],[112,11,143,9,"_inflate"],[112,19,143,17],[112,20,143,18,"end"],[112,23,143,21],[112,24,143,22],[112,25,143,23],[113,4,144,2],[114,2,145,0],[114,3,145,1],[115,2,147,0,"ParserAsync"],[115,13,147,11],[115,14,147,12,"prototype"],[115,23,147,21],[115,24,147,22,"_complete"],[115,33,147,31],[115,36,147,34],[115,46,147,44,"filteredData"],[115,58,147,56],[115,60,147,58],[116,4,148,2],[116,8,148,6],[116,12,148,10],[116,13,148,11,"errord"],[116,19,148,17],[116,21,148,19],[117,6,149,4],[118,4,150,2],[119,4,152,2],[119,8,152,6,"normalisedBitmapData"],[119,28,152,26],[120,4,154,2],[120,8,154,6],[121,6,155,4],[121,10,155,8,"bitmapData"],[121,20,155,18],[121,23,155,21,"bitmapper"],[121,32,155,30],[121,33,155,31,"dataToBitMap"],[121,45,155,43],[121,46,155,44,"filteredData"],[121,58,155,56],[121,60,155,58],[121,64,155,62],[121,65,155,63,"_bitmapInfo"],[121,76,155,74],[121,77,155,75],[122,6,157,4,"normalisedBitmapData"],[122,26,157,24],[122,29,157,27,"formatNormaliser"],[122,45,157,43],[122,46,157,44,"bitmapData"],[122,56,157,54],[122,58,157,56],[122,62,157,60],[122,63,157,61,"_bitmapInfo"],[122,74,157,72],[122,75,157,73],[123,6,158,4,"bitmapData"],[123,16,158,14],[123,19,158,17],[123,23,158,21],[124,4,159,2],[124,5,159,3],[124,6,159,4],[124,13,159,11,"ex"],[124,15,159,13],[124,17,159,15],[125,6,160,4],[125,10,160,8],[125,11,160,9,"_handleError"],[125,23,160,21],[125,24,160,22,"ex"],[125,26,160,24],[125,27,160,25],[126,6,161,4],[127,4,162,2],[128,4,164,2],[128,8,164,6],[128,9,164,7,"emit"],[128,13,164,11],[128,14,164,12],[128,22,164,20],[128,24,164,22,"normalisedBitmapData"],[128,44,164,42],[128,45,164,43],[129,2,165,0],[129,3,165,1],[130,0,165,2],[130,3]],"functionMap":{"names":["<global>","module.exports","ParserAsync.prototype._handleError","_filter.on$argument_1","ParserAsync.prototype._inflateData","_inflate.on$argument_1","ParserAsync.prototype._handleMetaData","ParserAsync.prototype._handleTransColor","ParserAsync.prototype._handlePalette","ParserAsync.prototype._simpleTransparency","ParserAsync.prototype._headersFinished","ParserAsync.prototype._finished","ParserAsync.prototype._complete"],"mappings":"AAA;oCCU;CDmB;qCEG;6BCgB,cD;CFI;qCIE;gCCwB;ODM;+BCI;ODY;CJM;wCME;CNK;0COE;CPE;uCQE;CRE;4CSE;CTE;yCUE;CVI;kCWE;CXW;kCYE;CZkB"},"hasCjsExports":true},"type":"js/module"}]}