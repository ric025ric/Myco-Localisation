{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function BitBuffer() {\n    this.buffer = [];\n    this.length = 0;\n  }\n  BitBuffer.prototype = {\n    get: function (index) {\n      const bufIndex = Math.floor(index / 8);\n      return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n    },\n    put: function (num, length) {\n      for (let i = 0; i < length; i++) {\n        this.putBit((num >>> length - i - 1 & 1) === 1);\n      }\n    },\n    getLengthInBits: function () {\n      return this.length;\n    },\n    putBit: function (bit) {\n      const bufIndex = Math.floor(this.length / 8);\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n      this.length++;\n    }\n  };\n  module.exports = BitBuffer;\n});","lineCount":31,"map":[[2,2,1,0],[2,11,1,9,"BitBuffer"],[2,20,1,18,"BitBuffer"],[2,21,1,18],[2,23,1,22],[3,4,2,2],[3,8,2,6],[3,9,2,7,"buffer"],[3,15,2,13],[3,18,2,16],[3,20,2,18],[4,4,3,2],[4,8,3,6],[4,9,3,7,"length"],[4,15,3,13],[4,18,3,16],[4,19,3,17],[5,2,4,0],[6,2,6,0,"BitBuffer"],[6,11,6,9],[6,12,6,10,"prototype"],[6,21,6,19],[6,24,6,22],[7,4,8,2,"get"],[7,7,8,5],[7,9,8,7],[7,18,8,7,"get"],[7,19,8,17,"index"],[7,24,8,22],[7,26,8,24],[8,6,9,4],[8,12,9,10,"bufIndex"],[8,20,9,18],[8,23,9,21,"Math"],[8,27,9,25],[8,28,9,26,"floor"],[8,33,9,31],[8,34,9,32,"index"],[8,39,9,37],[8,42,9,40],[8,43,9,41],[8,44,9,42],[9,6,10,4],[9,13,10,11],[9,14,10,13],[9,18,10,17],[9,19,10,18,"buffer"],[9,25,10,24],[9,26,10,25,"bufIndex"],[9,34,10,33],[9,35,10,34],[9,40,10,40],[9,41,10,41],[9,44,10,44,"index"],[9,49,10,49],[9,52,10,52],[9,53,10,54],[9,56,10,58],[9,57,10,59],[9,63,10,65],[9,64,10,66],[10,4,11,2],[10,5,11,3],[11,4,13,2,"put"],[11,7,13,5],[11,9,13,7],[11,18,13,7,"put"],[11,19,13,17,"num"],[11,22,13,20],[11,24,13,22,"length"],[11,30,13,28],[11,32,13,30],[12,6,14,4],[12,11,14,9],[12,15,14,13,"i"],[12,16,14,14],[12,19,14,17],[12,20,14,18],[12,22,14,20,"i"],[12,23,14,21],[12,26,14,24,"length"],[12,32,14,30],[12,34,14,32,"i"],[12,35,14,33],[12,37,14,35],[12,39,14,37],[13,8,15,6],[13,12,15,10],[13,13,15,11,"putBit"],[13,19,15,17],[13,20,15,18],[13,21,15,20,"num"],[13,24,15,23],[13,29,15,29,"length"],[13,35,15,35],[13,38,15,38,"i"],[13,39,15,39],[13,42,15,42],[13,43,15,44],[13,46,15,48],[13,47,15,49],[13,53,15,55],[13,54,15,56],[13,55,15,57],[14,6,16,4],[15,4,17,2],[15,5,17,3],[16,4,19,2,"getLengthInBits"],[16,19,19,17],[16,21,19,19],[16,30,19,19,"getLengthInBits"],[16,31,19,19],[16,33,19,31],[17,6,20,4],[17,13,20,11],[17,17,20,15],[17,18,20,16,"length"],[17,24,20,22],[18,4,21,2],[18,5,21,3],[19,4,23,2,"putBit"],[19,10,23,8],[19,12,23,10],[19,21,23,10,"putBit"],[19,22,23,20,"bit"],[19,25,23,23],[19,27,23,25],[20,6,24,4],[20,12,24,10,"bufIndex"],[20,20,24,18],[20,23,24,21,"Math"],[20,27,24,25],[20,28,24,26,"floor"],[20,33,24,31],[20,34,24,32],[20,38,24,36],[20,39,24,37,"length"],[20,45,24,43],[20,48,24,46],[20,49,24,47],[20,50,24,48],[21,6,25,4],[21,10,25,8],[21,14,25,12],[21,15,25,13,"buffer"],[21,21,25,19],[21,22,25,20,"length"],[21,28,25,26],[21,32,25,30,"bufIndex"],[21,40,25,38],[21,42,25,40],[22,8,26,6],[22,12,26,10],[22,13,26,11,"buffer"],[22,19,26,17],[22,20,26,18,"push"],[22,24,26,22],[22,25,26,23],[22,26,26,24],[22,27,26,25],[23,6,27,4],[24,6,29,4],[24,10,29,8,"bit"],[24,13,29,11],[24,15,29,13],[25,8,30,6],[25,12,30,10],[25,13,30,11,"buffer"],[25,19,30,17],[25,20,30,18,"bufIndex"],[25,28,30,26],[25,29,30,27],[25,33,30,32],[25,37,30,36],[25,42,30,42],[25,46,30,46],[25,47,30,47,"length"],[25,53,30,53],[25,56,30,56],[25,57,30,59],[26,6,31,4],[27,6,33,4],[27,10,33,8],[27,11,33,9,"length"],[27,17,33,15],[27,19,33,17],[28,4,34,2],[29,2,35,0],[29,3,35,1],[30,2,37,0,"module"],[30,8,37,6],[30,9,37,7,"exports"],[30,16,37,14],[30,19,37,17,"BitBuffer"],[30,28,37,26],[31,0,37,26],[31,3]],"functionMap":{"names":["BitBuffer","<global>","BitBuffer.prototype.get","BitBuffer.prototype.put","BitBuffer.prototype.getLengthInBits","BitBuffer.prototype.putBit"],"mappings":"AAA;CCG;OCI;GDG;OEE;GFI;mBGE;GHE;UIE;GJW"},"hasCjsExports":true},"type":"js/module"}]}