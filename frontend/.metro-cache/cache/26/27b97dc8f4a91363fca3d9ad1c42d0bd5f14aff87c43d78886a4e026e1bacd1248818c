{"dependencies":[{"name":"./LayoutManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"8kHEUlKQMmxShjK4DMjntIDDVoM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"RVMasonryLayoutManagerImpl\", {\n    enumerable: true,\n    get: function () {\n      return RVMasonryLayoutManagerImpl;\n    }\n  });\n  var _LayoutManager = require(_dependencyMap[0], \"./LayoutManager\");\n  /**\n   * MasonryLayoutManager implementation that arranges items in a masonry/pinterest-style layout.\n   * Items are placed in columns, with support for items spanning multiple columns.\n   * Can optimize item placement to minimize column height differences.\n   */\n  class RVMasonryLayoutManagerImpl extends _LayoutManager.RVLayoutManager {\n    constructor(params, previousLayoutManager) {\n      var _a;\n      super(params, previousLayoutManager);\n      /** Current column index for sequential placement */\n      this.currentColumn = 0;\n      /** If there's a span change for masonry layout, we need to recompute all the widths */\n      this.fullRelayoutRequired = false;\n      this.boundedSize = params.windowSize.width;\n      this.optimizeItemArrangement = params.optimizeItemArrangement;\n      this.columnHeights = (_a = this.columnHeights) !== null && _a !== void 0 ? _a : Array(this.maxColumns).fill(0);\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    updateLayoutParams(params) {\n      const prevMaxColumns = this.maxColumns;\n      const prevOptimizeItemArrangement = this.optimizeItemArrangement;\n      super.updateLayoutParams(params);\n      if (this.boundedSize !== params.windowSize.width || prevMaxColumns !== params.maxColumns || prevOptimizeItemArrangement !== params.optimizeItemArrangement) {\n        this.boundedSize = params.windowSize.width;\n        if (this.layouts.length > 0) {\n          // console.log(\"-----> recomputeLayouts\");\n          // update all widths\n          this.updateAllWidths();\n          this.recomputeLayouts(0, this.layouts.length - 1);\n          this.requiresRepaint = true;\n        }\n      }\n    }\n    /**\n     * Processes layout information for items, updating their dimensions.\n     * @param layoutInfo Array of layout information for items (real measurements)\n     * @param itemCount Total number of items in the list\n     */\n    processLayoutInfo(layoutInfo, itemCount) {\n      // Update layout information\n      for (const info of layoutInfo) {\n        const {\n          index,\n          dimensions\n        } = info;\n        const layout = this.layouts[index];\n        layout.height = dimensions.height;\n        layout.isHeightMeasured = true;\n        layout.isWidthMeasured = true;\n        this.layouts[index] = layout;\n      }\n      // TODO: Can be optimized\n      if (this.fullRelayoutRequired) {\n        this.updateAllWidths();\n        this.fullRelayoutRequired = false;\n        return 0;\n      }\n    }\n    /**\n     * Estimates layout dimensions for an item at the given index.\n     * Can be called by base class if estimate is required.\n     * @param index Index of the item to estimate layout for\n     */\n    estimateLayout(index) {\n      const layout = this.layouts[index];\n      // Set width based on columns and span\n      layout.width = this.getWidth(index);\n      layout.height = this.getEstimatedHeight(index);\n      layout.isWidthMeasured = true;\n      layout.enforcedWidth = true;\n    }\n    /**\n     * Handles span change for an item.\n     * @param index Index of the item\n     */\n    handleSpanChange(index) {\n      this.fullRelayoutRequired = true;\n    }\n    /**\n     * Returns the total size of the layout area.\n     * @returns RVDimension containing width and height of the layout\n     */\n    getLayoutSize() {\n      if (this.layouts.length === 0) return {\n        width: 0,\n        height: 0\n      };\n      // Find the tallest column\n      const maxHeight = Math.max(...this.columnHeights);\n      return {\n        width: this.boundedSize,\n        height: maxHeight\n      };\n    }\n    /**\n     * Recomputes layouts for items in the given range.\n     * Uses different placement strategies based on optimization settings.\n     * @param startIndex Starting index of items to recompute\n     * @param endIndex Ending index of items to recompute\n     */\n    recomputeLayouts(startIndex, endIndex) {\n      // Reset column heights if starting from the beginning\n      if (startIndex === 0) {\n        this.columnHeights = Array(this.maxColumns).fill(0);\n        this.currentColumn = 0;\n      } else {\n        // Find the y-position of the first item to recompute\n        // and adjust column heights accordingly\n        this.updateColumnHeightsToIndex(startIndex);\n      }\n      const itemCount = this.layouts.length;\n      for (let i = startIndex; i < itemCount; i++) {\n        const layout = this.getLayout(i);\n        // Skip tracking span because we're not changing widths\n        const span = this.getSpan(i, true);\n        if (this.optimizeItemArrangement) {\n          if (span === 1) {\n            // For single column items, place in the shortest column\n            this.placeSingleColumnItem(layout);\n          } else {\n            // For multi-column items, find the best position\n            this.placeOptimizedMultiColumnItem(layout, span);\n          }\n        } else {\n          // No optimization - place items sequentially\n          this.placeItemSequentially(layout, span);\n        }\n      }\n    }\n    /**\n     * Calculates the width of an item based on its span.\n     * @param index Index of the item\n     * @returns Width of the item\n     */\n    getWidth(index) {\n      return this.boundedSize / this.maxColumns * this.getSpan(index);\n    }\n    updateAllWidths() {\n      for (let i = 0; i < this.layouts.length; i++) {\n        this.layouts[i].width = this.getWidth(i);\n        this.layouts[i].minHeight = undefined;\n      }\n    }\n    /**\n     * Places an item sequentially in the next available position.\n     * @param layout Layout information for the item\n     * @param span Number of columns the item spans\n     */\n    placeItemSequentially(layout, span) {\n      // Check if the item can fit in the current row\n      if (this.currentColumn + span > this.maxColumns) {\n        // Move to the next row\n        this.currentColumn = 0;\n      }\n      // Find the maximum height of the columns this item will span\n      let maxHeight = this.columnHeights[this.currentColumn];\n      for (let col = this.currentColumn + 1; col < this.currentColumn + span; col++) {\n        if (col < this.maxColumns) {\n          maxHeight = Math.max(maxHeight, this.columnHeights[col]);\n        }\n      }\n      // Place the item\n      layout.x = this.boundedSize / this.maxColumns * this.currentColumn;\n      layout.y = maxHeight;\n      // Update column heights\n      for (let col = this.currentColumn; col < this.currentColumn + span; col++) {\n        if (col < this.maxColumns) {\n          this.columnHeights[col] = maxHeight + layout.height;\n        }\n      }\n      // Move to the next column\n      this.currentColumn += span;\n      if (this.currentColumn >= this.maxColumns) {\n        this.currentColumn = 0;\n      }\n    }\n    /**\n     * Places a single-column item in the shortest available column.\n     * @param layout Layout information for the item\n     */\n    placeSingleColumnItem(layout) {\n      // Find the shortest column\n      let shortestColumnIndex = 0;\n      let minHeight = this.columnHeights[0];\n      for (let i = 1; i < this.maxColumns; i++) {\n        if (this.columnHeights[i] < minHeight) {\n          minHeight = this.columnHeights[i];\n          shortestColumnIndex = i;\n        }\n      }\n      // Place the item in the shortest column\n      layout.x = this.boundedSize / this.maxColumns * shortestColumnIndex;\n      layout.y = this.columnHeights[shortestColumnIndex];\n      // Update the column height\n      this.columnHeights[shortestColumnIndex] += layout.height;\n    }\n    /**\n     * Places a multi-column item in the position that minimizes total column heights.\n     * @param layout Layout information for the item\n     * @param span Number of columns the item spans\n     */\n    placeOptimizedMultiColumnItem(layout, span) {\n      let bestStartColumn = 0;\n      let minTotalHeight = Number.MAX_VALUE;\n      // Try all possible positions\n      for (let startCol = 0; startCol <= this.maxColumns - span; startCol++) {\n        // Find the maximum height among the columns this item would span\n        let maxHeight = this.columnHeights[startCol];\n        for (let col = startCol + 1; col < startCol + span; col++) {\n          maxHeight = Math.max(maxHeight, this.columnHeights[col]);\n        }\n        // Calculate the total height after placing the item\n        let totalHeight = 0;\n        for (let col = 0; col < this.maxColumns; col++) {\n          if (col >= startCol && col < startCol + span) {\n            totalHeight += maxHeight + layout.height;\n          } else {\n            totalHeight += this.columnHeights[col];\n          }\n        }\n        // Update best position if this is better\n        if (totalHeight < minTotalHeight) {\n          minTotalHeight = totalHeight;\n          bestStartColumn = startCol;\n        }\n      }\n      // Place the item at the best position\n      const maxHeight = Math.max(...this.columnHeights.slice(bestStartColumn, bestStartColumn + span));\n      layout.x = this.boundedSize / this.maxColumns * bestStartColumn;\n      layout.y = maxHeight;\n      // Update column heights\n      for (let col = bestStartColumn; col < bestStartColumn + span; col++) {\n        this.columnHeights[col] = maxHeight + layout.height;\n      }\n    }\n    /**\n     * Updates column heights up to a given index by recalculating item positions.\n     * @param index Index to update column heights up to\n     */\n    updateColumnHeightsToIndex(index) {\n      // Reset column heights\n      this.columnHeights = Array(this.maxColumns).fill(0);\n      this.currentColumn = 0;\n      // Recalculate column heights up to the given index\n      for (let i = 0; i < index; i++) {\n        const layout = this.layouts[i];\n        const itemWidth = layout.width;\n        const columnWidth = this.boundedSize / this.maxColumns;\n        const span = Math.round(itemWidth / columnWidth);\n        // Find which columns this item spans\n        const startColumn = Math.round(layout.x / columnWidth);\n        const endColumn = Math.min(startColumn + span, this.maxColumns);\n        // Update column heights\n        for (let col = startColumn; col < endColumn; col++) {\n          this.columnHeights[col] = Math.max(this.columnHeights[col], layout.y + layout.height);\n        }\n        // Update current column for non-optimized layout\n        if (!this.optimizeItemArrangement) {\n          this.currentColumn = (startColumn + span) % this.maxColumns;\n        }\n      }\n    }\n  }\n});","lineCount":280,"map":[[7,2,7,0,"Object"],[7,8,7,0],[7,9,7,0,"defineProperty"],[7,23,7,0],[7,24,7,0,"exports"],[7,31,7,0],[8,4,7,0,"enumerable"],[8,14,7,0],[9,4,7,0,"get"],[9,7,7,0],[9,18,7,0,"get"],[9,19,7,0],[10,6,7,0],[10,13,7,0,"RVMasonryLayoutManagerImpl"],[10,39,7,0],[11,4,7,0],[12,2,7,0],[13,2,1,0],[13,6,1,0,"_LayoutManager"],[13,20,1,0],[13,23,1,0,"require"],[13,30,1,0],[13,31,1,0,"_dependencyMap"],[13,45,1,0],[14,2,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,2,7,7],[19,8,7,13,"RVMasonryLayoutManagerImpl"],[19,34,7,39],[19,43,7,48,"RVLayoutManager"],[19,57,7,63],[19,58,7,63,"RVLayoutManager"],[19,73,7,63],[19,74,7,64],[20,4,8,4,"constructor"],[20,15,8,15,"constructor"],[20,16,8,16,"params"],[20,22,8,22],[20,24,8,24,"previousLayoutManager"],[20,45,8,45],[20,47,8,47],[21,6,9,8],[21,10,9,12,"_a"],[21,12,9,14],[22,6,10,8],[22,11,10,13],[22,12,10,14,"params"],[22,18,10,20],[22,20,10,22,"previousLayoutManager"],[22,41,10,43],[22,42,10,44],[23,6,11,8],[24,6,12,8],[24,10,12,12],[24,11,12,13,"currentColumn"],[24,24,12,26],[24,27,12,29],[24,28,12,30],[25,6,13,8],[26,6,14,8],[26,10,14,12],[26,11,14,13,"fullRelayoutRequired"],[26,31,14,33],[26,34,14,36],[26,39,14,41],[27,6,15,8],[27,10,15,12],[27,11,15,13,"boundedSize"],[27,22,15,24],[27,25,15,27,"params"],[27,31,15,33],[27,32,15,34,"windowSize"],[27,42,15,44],[27,43,15,45,"width"],[27,48,15,50],[28,6,16,8],[28,10,16,12],[28,11,16,13,"optimizeItemArrangement"],[28,34,16,36],[28,37,16,39,"params"],[28,43,16,45],[28,44,16,46,"optimizeItemArrangement"],[28,67,16,69],[29,6,17,8],[29,10,17,12],[29,11,17,13,"columnHeights"],[29,24,17,26],[29,27,17,29],[29,28,17,30,"_a"],[29,30,17,32],[29,33,17,35],[29,37,17,39],[29,38,17,40,"columnHeights"],[29,51,17,53],[29,57,17,59],[29,61,17,63],[29,65,17,67,"_a"],[29,67,17,69],[29,72,17,74],[29,77,17,79],[29,78,17,80],[29,81,17,83,"_a"],[29,83,17,85],[29,86,17,88,"Array"],[29,91,17,93],[29,92,17,94],[29,96,17,98],[29,97,17,99,"maxColumns"],[29,107,17,109],[29,108,17,110],[29,109,17,111,"fill"],[29,113,17,115],[29,114,17,116],[29,115,17,117],[29,116,17,118],[30,4,18,4],[31,4,19,4],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,4,23,4,"updateLayoutParams"],[35,22,23,22,"updateLayoutParams"],[35,23,23,23,"params"],[35,29,23,29],[35,31,23,31],[36,6,24,8],[36,12,24,14,"prevMaxColumns"],[36,26,24,28],[36,29,24,31],[36,33,24,35],[36,34,24,36,"maxColumns"],[36,44,24,46],[37,6,25,8],[37,12,25,14,"prevOptimizeItemArrangement"],[37,39,25,41],[37,42,25,44],[37,46,25,48],[37,47,25,49,"optimizeItemArrangement"],[37,70,25,72],[38,6,26,8],[38,11,26,13],[38,12,26,14,"updateLayoutParams"],[38,30,26,32],[38,31,26,33,"params"],[38,37,26,39],[38,38,26,40],[39,6,27,8],[39,10,27,12],[39,14,27,16],[39,15,27,17,"boundedSize"],[39,26,27,28],[39,31,27,33,"params"],[39,37,27,39],[39,38,27,40,"windowSize"],[39,48,27,50],[39,49,27,51,"width"],[39,54,27,56],[39,58,28,12,"prevMaxColumns"],[39,72,28,26],[39,77,28,31,"params"],[39,83,28,37],[39,84,28,38,"maxColumns"],[39,94,28,48],[39,98,29,12,"prevOptimizeItemArrangement"],[39,125,29,39],[39,130,29,44,"params"],[39,136,29,50],[39,137,29,51,"optimizeItemArrangement"],[39,160,29,74],[39,162,29,76],[40,8,30,12],[40,12,30,16],[40,13,30,17,"boundedSize"],[40,24,30,28],[40,27,30,31,"params"],[40,33,30,37],[40,34,30,38,"windowSize"],[40,44,30,48],[40,45,30,49,"width"],[40,50,30,54],[41,8,31,12],[41,12,31,16],[41,16,31,20],[41,17,31,21,"layouts"],[41,24,31,28],[41,25,31,29,"length"],[41,31,31,35],[41,34,31,38],[41,35,31,39],[41,37,31,41],[42,10,32,16],[43,10,33,16],[44,10,34,16],[44,14,34,20],[44,15,34,21,"updateAllWidths"],[44,30,34,36],[44,31,34,37],[44,32,34,38],[45,10,35,16],[45,14,35,20],[45,15,35,21,"recomputeLayouts"],[45,31,35,37],[45,32,35,38],[45,33,35,39],[45,35,35,41],[45,39,35,45],[45,40,35,46,"layouts"],[45,47,35,53],[45,48,35,54,"length"],[45,54,35,60],[45,57,35,63],[45,58,35,64],[45,59,35,65],[46,10,36,16],[46,14,36,20],[46,15,36,21,"requiresRepaint"],[46,30,36,36],[46,33,36,39],[46,37,36,43],[47,8,37,12],[48,6,38,8],[49,4,39,4],[50,4,40,4],[51,0,41,0],[52,0,42,0],[53,0,43,0],[54,0,44,0],[55,4,45,4,"processLayoutInfo"],[55,21,45,21,"processLayoutInfo"],[55,22,45,22,"layoutInfo"],[55,32,45,32],[55,34,45,34,"itemCount"],[55,43,45,43],[55,45,45,45],[56,6,46,8],[57,6,47,8],[57,11,47,13],[57,17,47,19,"info"],[57,21,47,23],[57,25,47,27,"layoutInfo"],[57,35,47,37],[57,37,47,39],[58,8,48,12],[58,14,48,18],[59,10,48,20,"index"],[59,15,48,25],[60,10,48,27,"dimensions"],[61,8,48,38],[61,9,48,39],[61,12,48,42,"info"],[61,16,48,46],[62,8,49,12],[62,14,49,18,"layout"],[62,20,49,24],[62,23,49,27],[62,27,49,31],[62,28,49,32,"layouts"],[62,35,49,39],[62,36,49,40,"index"],[62,41,49,45],[62,42,49,46],[63,8,50,12,"layout"],[63,14,50,18],[63,15,50,19,"height"],[63,21,50,25],[63,24,50,28,"dimensions"],[63,34,50,38],[63,35,50,39,"height"],[63,41,50,45],[64,8,51,12,"layout"],[64,14,51,18],[64,15,51,19,"isHeightMeasured"],[64,31,51,35],[64,34,51,38],[64,38,51,42],[65,8,52,12,"layout"],[65,14,52,18],[65,15,52,19,"isWidthMeasured"],[65,30,52,34],[65,33,52,37],[65,37,52,41],[66,8,53,12],[66,12,53,16],[66,13,53,17,"layouts"],[66,20,53,24],[66,21,53,25,"index"],[66,26,53,30],[66,27,53,31],[66,30,53,34,"layout"],[66,36,53,40],[67,6,54,8],[68,6,55,8],[69,6,56,8],[69,10,56,12],[69,14,56,16],[69,15,56,17,"fullRelayoutRequired"],[69,35,56,37],[69,37,56,39],[70,8,57,12],[70,12,57,16],[70,13,57,17,"updateAllWidths"],[70,28,57,32],[70,29,57,33],[70,30,57,34],[71,8,58,12],[71,12,58,16],[71,13,58,17,"fullRelayoutRequired"],[71,33,58,37],[71,36,58,40],[71,41,58,45],[72,8,59,12],[72,15,59,19],[72,16,59,20],[73,6,60,8],[74,4,61,4],[75,4,62,4],[76,0,63,0],[77,0,64,0],[78,0,65,0],[79,0,66,0],[80,4,67,4,"estimateLayout"],[80,18,67,18,"estimateLayout"],[80,19,67,19,"index"],[80,24,67,24],[80,26,67,26],[81,6,68,8],[81,12,68,14,"layout"],[81,18,68,20],[81,21,68,23],[81,25,68,27],[81,26,68,28,"layouts"],[81,33,68,35],[81,34,68,36,"index"],[81,39,68,41],[81,40,68,42],[82,6,69,8],[83,6,70,8,"layout"],[83,12,70,14],[83,13,70,15,"width"],[83,18,70,20],[83,21,70,23],[83,25,70,27],[83,26,70,28,"getWidth"],[83,34,70,36],[83,35,70,37,"index"],[83,40,70,42],[83,41,70,43],[84,6,71,8,"layout"],[84,12,71,14],[84,13,71,15,"height"],[84,19,71,21],[84,22,71,24],[84,26,71,28],[84,27,71,29,"getEstimatedHeight"],[84,45,71,47],[84,46,71,48,"index"],[84,51,71,53],[84,52,71,54],[85,6,72,8,"layout"],[85,12,72,14],[85,13,72,15,"isWidthMeasured"],[85,28,72,30],[85,31,72,33],[85,35,72,37],[86,6,73,8,"layout"],[86,12,73,14],[86,13,73,15,"enforcedWidth"],[86,26,73,28],[86,29,73,31],[86,33,73,35],[87,4,74,4],[88,4,75,4],[89,0,76,0],[90,0,77,0],[91,0,78,0],[92,4,79,4,"handleSpanChange"],[92,20,79,20,"handleSpanChange"],[92,21,79,21,"index"],[92,26,79,26],[92,28,79,28],[93,6,80,8],[93,10,80,12],[93,11,80,13,"fullRelayoutRequired"],[93,31,80,33],[93,34,80,36],[93,38,80,40],[94,4,81,4],[95,4,82,4],[96,0,83,0],[97,0,84,0],[98,0,85,0],[99,4,86,4,"getLayoutSize"],[99,17,86,17,"getLayoutSize"],[99,18,86,17],[99,20,86,20],[100,6,87,8],[100,10,87,12],[100,14,87,16],[100,15,87,17,"layouts"],[100,22,87,24],[100,23,87,25,"length"],[100,29,87,31],[100,34,87,36],[100,35,87,37],[100,37,88,12],[100,44,88,19],[101,8,88,21,"width"],[101,13,88,26],[101,15,88,28],[101,16,88,29],[102,8,88,31,"height"],[102,14,88,37],[102,16,88,39],[103,6,88,41],[103,7,88,42],[104,6,89,8],[105,6,90,8],[105,12,90,14,"maxHeight"],[105,21,90,23],[105,24,90,26,"Math"],[105,28,90,30],[105,29,90,31,"max"],[105,32,90,34],[105,33,90,35],[105,36,90,38],[105,40,90,42],[105,41,90,43,"columnHeights"],[105,54,90,56],[105,55,90,57],[106,6,91,8],[106,13,91,15],[107,8,92,12,"width"],[107,13,92,17],[107,15,92,19],[107,19,92,23],[107,20,92,24,"boundedSize"],[107,31,92,35],[108,8,93,12,"height"],[108,14,93,18],[108,16,93,20,"maxHeight"],[109,6,94,8],[109,7,94,9],[110,4,95,4],[111,4,96,4],[112,0,97,0],[113,0,98,0],[114,0,99,0],[115,0,100,0],[116,0,101,0],[117,4,102,4,"recomputeLayouts"],[117,20,102,20,"recomputeLayouts"],[117,21,102,21,"startIndex"],[117,31,102,31],[117,33,102,33,"endIndex"],[117,41,102,41],[117,43,102,43],[118,6,103,8],[119,6,104,8],[119,10,104,12,"startIndex"],[119,20,104,22],[119,25,104,27],[119,26,104,28],[119,28,104,30],[120,8,105,12],[120,12,105,16],[120,13,105,17,"columnHeights"],[120,26,105,30],[120,29,105,33,"Array"],[120,34,105,38],[120,35,105,39],[120,39,105,43],[120,40,105,44,"maxColumns"],[120,50,105,54],[120,51,105,55],[120,52,105,56,"fill"],[120,56,105,60],[120,57,105,61],[120,58,105,62],[120,59,105,63],[121,8,106,12],[121,12,106,16],[121,13,106,17,"currentColumn"],[121,26,106,30],[121,29,106,33],[121,30,106,34],[122,6,107,8],[122,7,107,9],[122,13,108,13],[123,8,109,12],[124,8,110,12],[125,8,111,12],[125,12,111,16],[125,13,111,17,"updateColumnHeightsToIndex"],[125,39,111,43],[125,40,111,44,"startIndex"],[125,50,111,54],[125,51,111,55],[126,6,112,8],[127,6,113,8],[127,12,113,14,"itemCount"],[127,21,113,23],[127,24,113,26],[127,28,113,30],[127,29,113,31,"layouts"],[127,36,113,38],[127,37,113,39,"length"],[127,43,113,45],[128,6,114,8],[128,11,114,13],[128,15,114,17,"i"],[128,16,114,18],[128,19,114,21,"startIndex"],[128,29,114,31],[128,31,114,33,"i"],[128,32,114,34],[128,35,114,37,"itemCount"],[128,44,114,46],[128,46,114,48,"i"],[128,47,114,49],[128,49,114,51],[128,51,114,53],[129,8,115,12],[129,14,115,18,"layout"],[129,20,115,24],[129,23,115,27],[129,27,115,31],[129,28,115,32,"getLayout"],[129,37,115,41],[129,38,115,42,"i"],[129,39,115,43],[129,40,115,44],[130,8,116,12],[131,8,117,12],[131,14,117,18,"span"],[131,18,117,22],[131,21,117,25],[131,25,117,29],[131,26,117,30,"getSpan"],[131,33,117,37],[131,34,117,38,"i"],[131,35,117,39],[131,37,117,41],[131,41,117,45],[131,42,117,46],[132,8,118,12],[132,12,118,16],[132,16,118,20],[132,17,118,21,"optimizeItemArrangement"],[132,40,118,44],[132,42,118,46],[133,10,119,16],[133,14,119,20,"span"],[133,18,119,24],[133,23,119,29],[133,24,119,30],[133,26,119,32],[134,12,120,20],[135,12,121,20],[135,16,121,24],[135,17,121,25,"placeSingleColumnItem"],[135,38,121,46],[135,39,121,47,"layout"],[135,45,121,53],[135,46,121,54],[136,10,122,16],[136,11,122,17],[136,17,123,21],[137,12,124,20],[138,12,125,20],[138,16,125,24],[138,17,125,25,"placeOptimizedMultiColumnItem"],[138,46,125,54],[138,47,125,55,"layout"],[138,53,125,61],[138,55,125,63,"span"],[138,59,125,67],[138,60,125,68],[139,10,126,16],[140,8,127,12],[140,9,127,13],[140,15,128,17],[141,10,129,16],[142,10,130,16],[142,14,130,20],[142,15,130,21,"placeItemSequentially"],[142,36,130,42],[142,37,130,43,"layout"],[142,43,130,49],[142,45,130,51,"span"],[142,49,130,55],[142,50,130,56],[143,8,131,12],[144,6,132,8],[145,4,133,4],[146,4,134,4],[147,0,135,0],[148,0,136,0],[149,0,137,0],[150,0,138,0],[151,4,139,4,"getWidth"],[151,12,139,12,"getWidth"],[151,13,139,13,"index"],[151,18,139,18],[151,20,139,20],[152,6,140,8],[152,13,140,16],[152,17,140,20],[152,18,140,21,"boundedSize"],[152,29,140,32],[152,32,140,35],[152,36,140,39],[152,37,140,40,"maxColumns"],[152,47,140,50],[152,50,140,54],[152,54,140,58],[152,55,140,59,"getSpan"],[152,62,140,66],[152,63,140,67,"index"],[152,68,140,72],[152,69,140,73],[153,4,141,4],[154,4,142,4,"updateAllWidths"],[154,19,142,19,"updateAllWidths"],[154,20,142,19],[154,22,142,22],[155,6,143,8],[155,11,143,13],[155,15,143,17,"i"],[155,16,143,18],[155,19,143,21],[155,20,143,22],[155,22,143,24,"i"],[155,23,143,25],[155,26,143,28],[155,30,143,32],[155,31,143,33,"layouts"],[155,38,143,40],[155,39,143,41,"length"],[155,45,143,47],[155,47,143,49,"i"],[155,48,143,50],[155,50,143,52],[155,52,143,54],[156,8,144,12],[156,12,144,16],[156,13,144,17,"layouts"],[156,20,144,24],[156,21,144,25,"i"],[156,22,144,26],[156,23,144,27],[156,24,144,28,"width"],[156,29,144,33],[156,32,144,36],[156,36,144,40],[156,37,144,41,"getWidth"],[156,45,144,49],[156,46,144,50,"i"],[156,47,144,51],[156,48,144,52],[157,8,145,12],[157,12,145,16],[157,13,145,17,"layouts"],[157,20,145,24],[157,21,145,25,"i"],[157,22,145,26],[157,23,145,27],[157,24,145,28,"minHeight"],[157,33,145,37],[157,36,145,40,"undefined"],[157,45,145,49],[158,6,146,8],[159,4,147,4],[160,4,148,4],[161,0,149,0],[162,0,150,0],[163,0,151,0],[164,0,152,0],[165,4,153,4,"placeItemSequentially"],[165,25,153,25,"placeItemSequentially"],[165,26,153,26,"layout"],[165,32,153,32],[165,34,153,34,"span"],[165,38,153,38],[165,40,153,40],[166,6,154,8],[167,6,155,8],[167,10,155,12],[167,14,155,16],[167,15,155,17,"currentColumn"],[167,28,155,30],[167,31,155,33,"span"],[167,35,155,37],[167,38,155,40],[167,42,155,44],[167,43,155,45,"maxColumns"],[167,53,155,55],[167,55,155,57],[168,8,156,12],[169,8,157,12],[169,12,157,16],[169,13,157,17,"currentColumn"],[169,26,157,30],[169,29,157,33],[169,30,157,34],[170,6,158,8],[171,6,159,8],[172,6,160,8],[172,10,160,12,"maxHeight"],[172,19,160,21],[172,22,160,24],[172,26,160,28],[172,27,160,29,"columnHeights"],[172,40,160,42],[172,41,160,43],[172,45,160,47],[172,46,160,48,"currentColumn"],[172,59,160,61],[172,60,160,62],[173,6,161,8],[173,11,161,13],[173,15,161,17,"col"],[173,18,161,20],[173,21,161,23],[173,25,161,27],[173,26,161,28,"currentColumn"],[173,39,161,41],[173,42,161,44],[173,43,161,45],[173,45,161,47,"col"],[173,48,161,50],[173,51,161,53],[173,55,161,57],[173,56,161,58,"currentColumn"],[173,69,161,71],[173,72,161,74,"span"],[173,76,161,78],[173,78,161,80,"col"],[173,81,161,83],[173,83,161,85],[173,85,161,87],[174,8,162,12],[174,12,162,16,"col"],[174,15,162,19],[174,18,162,22],[174,22,162,26],[174,23,162,27,"maxColumns"],[174,33,162,37],[174,35,162,39],[175,10,163,16,"maxHeight"],[175,19,163,25],[175,22,163,28,"Math"],[175,26,163,32],[175,27,163,33,"max"],[175,30,163,36],[175,31,163,37,"maxHeight"],[175,40,163,46],[175,42,163,48],[175,46,163,52],[175,47,163,53,"columnHeights"],[175,60,163,66],[175,61,163,67,"col"],[175,64,163,70],[175,65,163,71],[175,66,163,72],[176,8,164,12],[177,6,165,8],[178,6,166,8],[179,6,167,8,"layout"],[179,12,167,14],[179,13,167,15,"x"],[179,14,167,16],[179,17,167,20],[179,21,167,24],[179,22,167,25,"boundedSize"],[179,33,167,36],[179,36,167,39],[179,40,167,43],[179,41,167,44,"maxColumns"],[179,51,167,54],[179,54,167,58],[179,58,167,62],[179,59,167,63,"currentColumn"],[179,72,167,76],[180,6,168,8,"layout"],[180,12,168,14],[180,13,168,15,"y"],[180,14,168,16],[180,17,168,19,"maxHeight"],[180,26,168,28],[181,6,169,8],[182,6,170,8],[182,11,170,13],[182,15,170,17,"col"],[182,18,170,20],[182,21,170,23],[182,25,170,27],[182,26,170,28,"currentColumn"],[182,39,170,41],[182,41,170,43,"col"],[182,44,170,46],[182,47,170,49],[182,51,170,53],[182,52,170,54,"currentColumn"],[182,65,170,67],[182,68,170,70,"span"],[182,72,170,74],[182,74,170,76,"col"],[182,77,170,79],[182,79,170,81],[182,81,170,83],[183,8,171,12],[183,12,171,16,"col"],[183,15,171,19],[183,18,171,22],[183,22,171,26],[183,23,171,27,"maxColumns"],[183,33,171,37],[183,35,171,39],[184,10,172,16],[184,14,172,20],[184,15,172,21,"columnHeights"],[184,28,172,34],[184,29,172,35,"col"],[184,32,172,38],[184,33,172,39],[184,36,172,42,"maxHeight"],[184,45,172,51],[184,48,172,54,"layout"],[184,54,172,60],[184,55,172,61,"height"],[184,61,172,67],[185,8,173,12],[186,6,174,8],[187,6,175,8],[188,6,176,8],[188,10,176,12],[188,11,176,13,"currentColumn"],[188,24,176,26],[188,28,176,30,"span"],[188,32,176,34],[189,6,177,8],[189,10,177,12],[189,14,177,16],[189,15,177,17,"currentColumn"],[189,28,177,30],[189,32,177,34],[189,36,177,38],[189,37,177,39,"maxColumns"],[189,47,177,49],[189,49,177,51],[190,8,178,12],[190,12,178,16],[190,13,178,17,"currentColumn"],[190,26,178,30],[190,29,178,33],[190,30,178,34],[191,6,179,8],[192,4,180,4],[193,4,181,4],[194,0,182,0],[195,0,183,0],[196,0,184,0],[197,4,185,4,"placeSingleColumnItem"],[197,25,185,25,"placeSingleColumnItem"],[197,26,185,26,"layout"],[197,32,185,32],[197,34,185,34],[198,6,186,8],[199,6,187,8],[199,10,187,12,"shortestColumnIndex"],[199,29,187,31],[199,32,187,34],[199,33,187,35],[200,6,188,8],[200,10,188,12,"minHeight"],[200,19,188,21],[200,22,188,24],[200,26,188,28],[200,27,188,29,"columnHeights"],[200,40,188,42],[200,41,188,43],[200,42,188,44],[200,43,188,45],[201,6,189,8],[201,11,189,13],[201,15,189,17,"i"],[201,16,189,18],[201,19,189,21],[201,20,189,22],[201,22,189,24,"i"],[201,23,189,25],[201,26,189,28],[201,30,189,32],[201,31,189,33,"maxColumns"],[201,41,189,43],[201,43,189,45,"i"],[201,44,189,46],[201,46,189,48],[201,48,189,50],[202,8,190,12],[202,12,190,16],[202,16,190,20],[202,17,190,21,"columnHeights"],[202,30,190,34],[202,31,190,35,"i"],[202,32,190,36],[202,33,190,37],[202,36,190,40,"minHeight"],[202,45,190,49],[202,47,190,51],[203,10,191,16,"minHeight"],[203,19,191,25],[203,22,191,28],[203,26,191,32],[203,27,191,33,"columnHeights"],[203,40,191,46],[203,41,191,47,"i"],[203,42,191,48],[203,43,191,49],[204,10,192,16,"shortestColumnIndex"],[204,29,192,35],[204,32,192,38,"i"],[204,33,192,39],[205,8,193,12],[206,6,194,8],[207,6,195,8],[208,6,196,8,"layout"],[208,12,196,14],[208,13,196,15,"x"],[208,14,196,16],[208,17,196,20],[208,21,196,24],[208,22,196,25,"boundedSize"],[208,33,196,36],[208,36,196,39],[208,40,196,43],[208,41,196,44,"maxColumns"],[208,51,196,54],[208,54,196,58,"shortestColumnIndex"],[208,73,196,77],[209,6,197,8,"layout"],[209,12,197,14],[209,13,197,15,"y"],[209,14,197,16],[209,17,197,19],[209,21,197,23],[209,22,197,24,"columnHeights"],[209,35,197,37],[209,36,197,38,"shortestColumnIndex"],[209,55,197,57],[209,56,197,58],[210,6,198,8],[211,6,199,8],[211,10,199,12],[211,11,199,13,"columnHeights"],[211,24,199,26],[211,25,199,27,"shortestColumnIndex"],[211,44,199,46],[211,45,199,47],[211,49,199,51,"layout"],[211,55,199,57],[211,56,199,58,"height"],[211,62,199,64],[212,4,200,4],[213,4,201,4],[214,0,202,0],[215,0,203,0],[216,0,204,0],[217,0,205,0],[218,4,206,4,"placeOptimizedMultiColumnItem"],[218,33,206,33,"placeOptimizedMultiColumnItem"],[218,34,206,34,"layout"],[218,40,206,40],[218,42,206,42,"span"],[218,46,206,46],[218,48,206,48],[219,6,207,8],[219,10,207,12,"bestStartColumn"],[219,25,207,27],[219,28,207,30],[219,29,207,31],[220,6,208,8],[220,10,208,12,"minTotalHeight"],[220,24,208,26],[220,27,208,29,"Number"],[220,33,208,35],[220,34,208,36,"MAX_VALUE"],[220,43,208,45],[221,6,209,8],[222,6,210,8],[222,11,210,13],[222,15,210,17,"startCol"],[222,23,210,25],[222,26,210,28],[222,27,210,29],[222,29,210,31,"startCol"],[222,37,210,39],[222,41,210,43],[222,45,210,47],[222,46,210,48,"maxColumns"],[222,56,210,58],[222,59,210,61,"span"],[222,63,210,65],[222,65,210,67,"startCol"],[222,73,210,75],[222,75,210,77],[222,77,210,79],[223,8,211,12],[224,8,212,12],[224,12,212,16,"maxHeight"],[224,21,212,25],[224,24,212,28],[224,28,212,32],[224,29,212,33,"columnHeights"],[224,42,212,46],[224,43,212,47,"startCol"],[224,51,212,55],[224,52,212,56],[225,8,213,12],[225,13,213,17],[225,17,213,21,"col"],[225,20,213,24],[225,23,213,27,"startCol"],[225,31,213,35],[225,34,213,38],[225,35,213,39],[225,37,213,41,"col"],[225,40,213,44],[225,43,213,47,"startCol"],[225,51,213,55],[225,54,213,58,"span"],[225,58,213,62],[225,60,213,64,"col"],[225,63,213,67],[225,65,213,69],[225,67,213,71],[226,10,214,16,"maxHeight"],[226,19,214,25],[226,22,214,28,"Math"],[226,26,214,32],[226,27,214,33,"max"],[226,30,214,36],[226,31,214,37,"maxHeight"],[226,40,214,46],[226,42,214,48],[226,46,214,52],[226,47,214,53,"columnHeights"],[226,60,214,66],[226,61,214,67,"col"],[226,64,214,70],[226,65,214,71],[226,66,214,72],[227,8,215,12],[228,8,216,12],[229,8,217,12],[229,12,217,16,"totalHeight"],[229,23,217,27],[229,26,217,30],[229,27,217,31],[230,8,218,12],[230,13,218,17],[230,17,218,21,"col"],[230,20,218,24],[230,23,218,27],[230,24,218,28],[230,26,218,30,"col"],[230,29,218,33],[230,32,218,36],[230,36,218,40],[230,37,218,41,"maxColumns"],[230,47,218,51],[230,49,218,53,"col"],[230,52,218,56],[230,54,218,58],[230,56,218,60],[231,10,219,16],[231,14,219,20,"col"],[231,17,219,23],[231,21,219,27,"startCol"],[231,29,219,35],[231,33,219,39,"col"],[231,36,219,42],[231,39,219,45,"startCol"],[231,47,219,53],[231,50,219,56,"span"],[231,54,219,60],[231,56,219,62],[232,12,220,20,"totalHeight"],[232,23,220,31],[232,27,220,35,"maxHeight"],[232,36,220,44],[232,39,220,47,"layout"],[232,45,220,53],[232,46,220,54,"height"],[232,52,220,60],[233,10,221,16],[233,11,221,17],[233,17,222,21],[234,12,223,20,"totalHeight"],[234,23,223,31],[234,27,223,35],[234,31,223,39],[234,32,223,40,"columnHeights"],[234,45,223,53],[234,46,223,54,"col"],[234,49,223,57],[234,50,223,58],[235,10,224,16],[236,8,225,12],[237,8,226,12],[238,8,227,12],[238,12,227,16,"totalHeight"],[238,23,227,27],[238,26,227,30,"minTotalHeight"],[238,40,227,44],[238,42,227,46],[239,10,228,16,"minTotalHeight"],[239,24,228,30],[239,27,228,33,"totalHeight"],[239,38,228,44],[240,10,229,16,"bestStartColumn"],[240,25,229,31],[240,28,229,34,"startCol"],[240,36,229,42],[241,8,230,12],[242,6,231,8],[243,6,232,8],[244,6,233,8],[244,12,233,14,"maxHeight"],[244,21,233,23],[244,24,233,26,"Math"],[244,28,233,30],[244,29,233,31,"max"],[244,32,233,34],[244,33,233,35],[244,36,233,38],[244,40,233,42],[244,41,233,43,"columnHeights"],[244,54,233,56],[244,55,233,57,"slice"],[244,60,233,62],[244,61,233,63,"bestStartColumn"],[244,76,233,78],[244,78,233,80,"bestStartColumn"],[244,93,233,95],[244,96,233,98,"span"],[244,100,233,102],[244,101,233,103],[244,102,233,104],[245,6,234,8,"layout"],[245,12,234,14],[245,13,234,15,"x"],[245,14,234,16],[245,17,234,20],[245,21,234,24],[245,22,234,25,"boundedSize"],[245,33,234,36],[245,36,234,39],[245,40,234,43],[245,41,234,44,"maxColumns"],[245,51,234,54],[245,54,234,58,"bestStartColumn"],[245,69,234,73],[246,6,235,8,"layout"],[246,12,235,14],[246,13,235,15,"y"],[246,14,235,16],[246,17,235,19,"maxHeight"],[246,26,235,28],[247,6,236,8],[248,6,237,8],[248,11,237,13],[248,15,237,17,"col"],[248,18,237,20],[248,21,237,23,"bestStartColumn"],[248,36,237,38],[248,38,237,40,"col"],[248,41,237,43],[248,44,237,46,"bestStartColumn"],[248,59,237,61],[248,62,237,64,"span"],[248,66,237,68],[248,68,237,70,"col"],[248,71,237,73],[248,73,237,75],[248,75,237,77],[249,8,238,12],[249,12,238,16],[249,13,238,17,"columnHeights"],[249,26,238,30],[249,27,238,31,"col"],[249,30,238,34],[249,31,238,35],[249,34,238,38,"maxHeight"],[249,43,238,47],[249,46,238,50,"layout"],[249,52,238,56],[249,53,238,57,"height"],[249,59,238,63],[250,6,239,8],[251,4,240,4],[252,4,241,4],[253,0,242,0],[254,0,243,0],[255,0,244,0],[256,4,245,4,"updateColumnHeightsToIndex"],[256,30,245,30,"updateColumnHeightsToIndex"],[256,31,245,31,"index"],[256,36,245,36],[256,38,245,38],[257,6,246,8],[258,6,247,8],[258,10,247,12],[258,11,247,13,"columnHeights"],[258,24,247,26],[258,27,247,29,"Array"],[258,32,247,34],[258,33,247,35],[258,37,247,39],[258,38,247,40,"maxColumns"],[258,48,247,50],[258,49,247,51],[258,50,247,52,"fill"],[258,54,247,56],[258,55,247,57],[258,56,247,58],[258,57,247,59],[259,6,248,8],[259,10,248,12],[259,11,248,13,"currentColumn"],[259,24,248,26],[259,27,248,29],[259,28,248,30],[260,6,249,8],[261,6,250,8],[261,11,250,13],[261,15,250,17,"i"],[261,16,250,18],[261,19,250,21],[261,20,250,22],[261,22,250,24,"i"],[261,23,250,25],[261,26,250,28,"index"],[261,31,250,33],[261,33,250,35,"i"],[261,34,250,36],[261,36,250,38],[261,38,250,40],[262,8,251,12],[262,14,251,18,"layout"],[262,20,251,24],[262,23,251,27],[262,27,251,31],[262,28,251,32,"layouts"],[262,35,251,39],[262,36,251,40,"i"],[262,37,251,41],[262,38,251,42],[263,8,252,12],[263,14,252,18,"itemWidth"],[263,23,252,27],[263,26,252,30,"layout"],[263,32,252,36],[263,33,252,37,"width"],[263,38,252,42],[264,8,253,12],[264,14,253,18,"columnWidth"],[264,25,253,29],[264,28,253,32],[264,32,253,36],[264,33,253,37,"boundedSize"],[264,44,253,48],[264,47,253,51],[264,51,253,55],[264,52,253,56,"maxColumns"],[264,62,253,66],[265,8,254,12],[265,14,254,18,"span"],[265,18,254,22],[265,21,254,25,"Math"],[265,25,254,29],[265,26,254,30,"round"],[265,31,254,35],[265,32,254,36,"itemWidth"],[265,41,254,45],[265,44,254,48,"columnWidth"],[265,55,254,59],[265,56,254,60],[266,8,255,12],[267,8,256,12],[267,14,256,18,"startColumn"],[267,25,256,29],[267,28,256,32,"Math"],[267,32,256,36],[267,33,256,37,"round"],[267,38,256,42],[267,39,256,43,"layout"],[267,45,256,49],[267,46,256,50,"x"],[267,47,256,51],[267,50,256,54,"columnWidth"],[267,61,256,65],[267,62,256,66],[268,8,257,12],[268,14,257,18,"endColumn"],[268,23,257,27],[268,26,257,30,"Math"],[268,30,257,34],[268,31,257,35,"min"],[268,34,257,38],[268,35,257,39,"startColumn"],[268,46,257,50],[268,49,257,53,"span"],[268,53,257,57],[268,55,257,59],[268,59,257,63],[268,60,257,64,"maxColumns"],[268,70,257,74],[268,71,257,75],[269,8,258,12],[270,8,259,12],[270,13,259,17],[270,17,259,21,"col"],[270,20,259,24],[270,23,259,27,"startColumn"],[270,34,259,38],[270,36,259,40,"col"],[270,39,259,43],[270,42,259,46,"endColumn"],[270,51,259,55],[270,53,259,57,"col"],[270,56,259,60],[270,58,259,62],[270,60,259,64],[271,10,260,16],[271,14,260,20],[271,15,260,21,"columnHeights"],[271,28,260,34],[271,29,260,35,"col"],[271,32,260,38],[271,33,260,39],[271,36,260,42,"Math"],[271,40,260,46],[271,41,260,47,"max"],[271,44,260,50],[271,45,260,51],[271,49,260,55],[271,50,260,56,"columnHeights"],[271,63,260,69],[271,64,260,70,"col"],[271,67,260,73],[271,68,260,74],[271,70,260,76,"layout"],[271,76,260,82],[271,77,260,83,"y"],[271,78,260,84],[271,81,260,87,"layout"],[271,87,260,93],[271,88,260,94,"height"],[271,94,260,100],[271,95,260,101],[272,8,261,12],[273,8,262,12],[274,8,263,12],[274,12,263,16],[274,13,263,17],[274,17,263,21],[274,18,263,22,"optimizeItemArrangement"],[274,41,263,45],[274,43,263,47],[275,10,264,16],[275,14,264,20],[275,15,264,21,"currentColumn"],[275,28,264,34],[275,31,264,37],[275,32,264,38,"startColumn"],[275,43,264,49],[275,46,264,52,"span"],[275,50,264,56],[275,54,264,60],[275,58,264,64],[275,59,264,65,"maxColumns"],[275,69,264,75],[276,8,265,12],[277,6,266,8],[278,4,267,4],[279,2,268,0],[280,0,268,1],[280,3]],"functionMap":{"names":["<global>","RVMasonryLayoutManagerImpl","RVMasonryLayoutManagerImpl#constructor","RVMasonryLayoutManagerImpl#updateLayoutParams","RVMasonryLayoutManagerImpl#processLayoutInfo","RVMasonryLayoutManagerImpl#estimateLayout","RVMasonryLayoutManagerImpl#handleSpanChange","RVMasonryLayoutManagerImpl#getLayoutSize","RVMasonryLayoutManagerImpl#recomputeLayouts","RVMasonryLayoutManagerImpl#getWidth","RVMasonryLayoutManagerImpl#updateAllWidths","RVMasonryLayoutManagerImpl#placeItemSequentially","RVMasonryLayoutManagerImpl#placeSingleColumnItem","RVMasonryLayoutManagerImpl#placeOptimizedMultiColumnItem","RVMasonryLayoutManagerImpl#updateColumnHeightsToIndex"],"mappings":"AAA;OCM;ICC;KDU;IEK;KFgB;IGM;KHgB;IIM;KJO;IKK;KLE;IMK;KNS;IOO;KP+B;IQM;KRE;ISC;KTK;IUM;KV2B;IWK;KXe;IYM;KZkC;IaK;KbsB;CDC"},"hasCjsExports":false},"type":"js/module"}]}