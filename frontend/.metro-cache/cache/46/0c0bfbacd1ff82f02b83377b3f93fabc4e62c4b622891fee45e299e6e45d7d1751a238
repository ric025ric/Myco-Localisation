{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"RenderStackManager\", {\n    enumerable: true,\n    get: function () {\n      return RenderStackManager;\n    }\n  });\n  /**\n   * Manages the recycling of rendered items in a virtualized list.\n   * This class handles tracking, recycling, and reusing item keys to optimize\n   * rendering performance by minimizing creation/destruction of components.\n   */\n  class RenderStackManager {\n    /**\n     * @param maxItemsInRecyclePool - Maximum number of items that can be in the recycle pool\n     */\n    constructor(maxItemsInRecyclePool = Number.MAX_SAFE_INTEGER) {\n      this.disableRecycling = false;\n      this.maxItemsInRecyclePool = maxItemsInRecyclePool;\n      this.recycleKeyPools = new Map();\n      this.keyMap = new Map();\n      this.stableIdMap = new Map();\n      this.keyCounter = 0;\n      this.unProcessedIndices = new Set();\n    }\n    /**\n     * Synchronizes the render stack with the current state of data.\n     * This method is the core orchestrator that:\n     * 1. Recycles keys for items that are no longer valid\n     * 2. Updates existing keys for items that remain visible\n     * 3. Assigns new keys for newly visible items\n     * 4. Cleans up excess items to maintain the recycling pool size\n     *\n     * @param getStableId - Function to get a stable identifier for an item at a specific index\n     * @param getItemType - Function to get the type of an item at a specific index\n     * @param engagedIndices - Collection of indices that are currently visible or engaged\n     * @param dataLength - Total length of the data set\n     */\n    sync(getStableId, getItemType, engagedIndices, dataLength) {\n      this.clearRecyclePool();\n      this.unProcessedIndices.clear();\n      // Recycle keys for items that are no longer valid or visible\n      this.keyMap.forEach((keyInfo, key) => {\n        const {\n          index,\n          stableId,\n          itemType\n        } = keyInfo;\n        if (index >= dataLength) {\n          this.recycleKey(key);\n          return;\n        }\n        if (!this.disableRecycling) {\n          this.unProcessedIndices.add(index);\n        }\n        if (!engagedIndices.includes(index)) {\n          this.recycleKey(key);\n          return;\n        }\n        const newStableId = getStableId(index);\n        const newItemType = getItemType(index);\n        if (stableId !== newStableId || itemType !== newItemType) {\n          this.recycleKey(key);\n        }\n      });\n      // First pass: process items that already have optimized keys\n      for (const index of engagedIndices) {\n        if (this.hasOptimizedKey(getStableId(index))) {\n          this.syncItem(index, getItemType(index), getStableId(index));\n        }\n      }\n      // Second pass: process remaining items that need new keys\n      for (const index of engagedIndices) {\n        if (!this.hasOptimizedKey(getStableId(index))) {\n          this.syncItem(index, getItemType(index), getStableId(index));\n        }\n      }\n      // create indices that are not in the engagedIndices and less than dataLength\n      // select only indices that are not in the engagedIndices\n      const validIndicesInPool = [];\n      for (const keyInfo of this.keyMap.values()) {\n        const index = keyInfo.index;\n        if (index < dataLength && !engagedIndices.includes(index)) {\n          validIndicesInPool.push(index);\n        }\n      }\n      // First pass: process items that already have optimized keys\n      for (const index of validIndicesInPool) {\n        if (this.hasOptimizedKey(getStableId(index))) {\n          this.syncItem(index, getItemType(index), getStableId(index));\n        }\n      }\n      for (const index of validIndicesInPool) {\n        if (!this.hasOptimizedKey(getStableId(index))) {\n          this.syncItem(index, getItemType(index), getStableId(index));\n        }\n      }\n      // Clean up stale items and manage the recycle pool size\n      this.cleanup(getStableId, getItemType, engagedIndices, dataLength);\n    }\n    /**\n     * Checks if a stable ID already has an assigned key\n     */\n    hasOptimizedKey(stableId) {\n      return this.stableIdMap.has(stableId);\n    }\n    /**\n     * Cleans up stale keys and manages the recycle pool size.\n     * This ensures we don't maintain references to items that are no longer in the dataset,\n     * and limits the number of recycled items to avoid excessive memory usage.\n     */\n    cleanup(getStableId, getItemType, engagedIndices, dataLength) {\n      const itemsToDelete = new Array();\n      // Remove items that are no longer in the dataset\n      for (const [key, keyInfo] of this.keyMap.entries()) {\n        const {\n          index,\n          itemType,\n          stableId\n        } = keyInfo;\n        const indexOutOfBounds = index >= dataLength;\n        const hasStableIdChanged = !indexOutOfBounds && getStableId(index) !== stableId;\n        if (indexOutOfBounds || hasStableIdChanged) {\n          const nextIndex = this.unProcessedIndices.values().next().value;\n          let shouldDeleteKey = true;\n          if (nextIndex !== undefined) {\n            const nextItemType = getItemType(nextIndex);\n            const nextStableId = getStableId(nextIndex);\n            if (itemType === nextItemType) {\n              this.syncItem(nextIndex, nextItemType, nextStableId);\n              shouldDeleteKey = false;\n            }\n          }\n          if (shouldDeleteKey) {\n            this.deleteKeyFromRecyclePool(itemType, key);\n            this.stableIdMap.delete(stableId);\n            itemsToDelete.push(key);\n          }\n        }\n      }\n      for (const key of itemsToDelete) {\n        this.keyMap.delete(key);\n      }\n      // Limit the size of the recycle pool\n      const itemsRenderedForRecycling = this.keyMap.size - engagedIndices.length;\n      if (itemsRenderedForRecycling > this.maxItemsInRecyclePool) {\n        const deleteCount = itemsRenderedForRecycling - this.maxItemsInRecyclePool;\n        let deleted = 0;\n        // Use a for loop so we can break early once we've deleted enough items\n        const entries = Array.from(this.keyMap.entries()).reverse();\n        for (let i = 0; i < entries.length && deleted < deleteCount; i++) {\n          const [key, keyInfo] = entries[i];\n          const {\n            index,\n            itemType,\n            stableId\n          } = keyInfo;\n          if (!engagedIndices.includes(index)) {\n            this.deleteKeyFromRecyclePool(itemType, key);\n            this.stableIdMap.delete(stableId);\n            this.keyMap.delete(key);\n            deleted++;\n          }\n        }\n      }\n    }\n    /**\n     * Places a key back into its type-specific recycle pool for future reuse\n     */\n    recycleKey(key) {\n      if (this.disableRecycling) {\n        return;\n      }\n      const keyInfo = this.keyMap.get(key);\n      if (!keyInfo) {\n        return;\n      }\n      const {\n        itemType\n      } = keyInfo;\n      // Add key back to its type's pool\n      const pool = this.getRecyclePoolForType(itemType);\n      pool.add(key);\n    }\n    /**\n     * Returns the current render stack containing all active keys and their metadata\n     */\n    getRenderStack() {\n      return this.keyMap;\n    }\n    /**\n     * Syncs an individual item by assigning it an appropriate key.\n     * Will use an existing key if available, or generate a new one.\n     *\n     * @returns The key assigned to the item\n     */\n    syncItem(index, itemType, stableId) {\n      // Try to reuse an existing key, or get one from the recycle pool, or generate a new one\n      const newKey = this.stableIdMap.get(stableId) || this.getKeyFromRecyclePool(itemType) || this.generateKey();\n      this.unProcessedIndices.delete(index);\n      const keyInfo = this.keyMap.get(newKey);\n      if (keyInfo) {\n        // Update an existing key's metadata\n        this.deleteKeyFromRecyclePool(itemType, newKey);\n        this.deleteKeyFromRecyclePool(keyInfo.itemType, newKey);\n        this.stableIdMap.delete(keyInfo.stableId);\n        keyInfo.index = index;\n        keyInfo.itemType = itemType;\n        keyInfo.stableId = stableId;\n      } else {\n        // Create a new entry in the key map\n        this.keyMap.set(newKey, {\n          itemType,\n          index,\n          stableId\n        });\n      }\n      this.stableIdMap.set(stableId, newKey);\n      return newKey;\n    }\n    /**\n     * Clears all recycled keys from the pool, effectively resetting the recycling system.\n     * This operation does not affect currently active keys.\n     */\n    clearRecyclePool() {\n      // iterate over all pools and clear them\n      for (const pool of this.recycleKeyPools.values()) {\n        pool.clear();\n      }\n    }\n    /**\n     * Generates a unique sequential key using an internal counter.\n     * @returns A unique key as a string\n     */\n    generateKey() {\n      return (this.keyCounter++).toString();\n    }\n    /**\n     * Removes a specific key from its type's recycle pool\n     */\n    deleteKeyFromRecyclePool(itemType, key) {\n      var _a;\n      (_a = this.recycleKeyPools.get(itemType)) === null || _a === void 0 ? void 0 : _a.delete(key);\n    }\n    /**\n     * Gets or creates a recycle pool for a specific item type\n     */\n    getRecyclePoolForType(itemType) {\n      let pool = this.recycleKeyPools.get(itemType);\n      if (!pool) {\n        pool = new Set();\n        this.recycleKeyPools.set(itemType, pool);\n      }\n      return pool;\n    }\n    /**\n     * Retrieves and removes a key from the type's recycle pool\n     * @returns A recycled key or undefined if none available\n     */\n    getKeyFromRecyclePool(itemType) {\n      const pool = this.getRecyclePoolForType(itemType);\n      if (pool.size > 0) {\n        const key = pool.values().next().value;\n        pool.delete(key);\n        return key;\n      }\n      return undefined;\n    }\n  }\n});","lineCount":275,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"RenderStackManager"],[10,31,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,2,6,7],[18,8,6,13,"RenderStackManager"],[18,26,6,31],[18,27,6,32],[19,4,7,4],[20,0,8,0],[21,0,9,0],[22,4,10,4,"constructor"],[22,15,10,15,"constructor"],[22,16,10,16,"maxItemsInRecyclePool"],[22,37,10,37],[22,40,10,40,"Number"],[22,46,10,46],[22,47,10,47,"MAX_SAFE_INTEGER"],[22,63,10,63],[22,65,10,65],[23,6,11,8],[23,10,11,12],[23,11,11,13,"disableRecycling"],[23,27,11,29],[23,30,11,32],[23,35,11,37],[24,6,12,8],[24,10,12,12],[24,11,12,13,"maxItemsInRecyclePool"],[24,32,12,34],[24,35,12,37,"maxItemsInRecyclePool"],[24,56,12,58],[25,6,13,8],[25,10,13,12],[25,11,13,13,"recycleKeyPools"],[25,26,13,28],[25,29,13,31],[25,33,13,35,"Map"],[25,36,13,38],[25,37,13,39],[25,38,13,40],[26,6,14,8],[26,10,14,12],[26,11,14,13,"keyMap"],[26,17,14,19],[26,20,14,22],[26,24,14,26,"Map"],[26,27,14,29],[26,28,14,30],[26,29,14,31],[27,6,15,8],[27,10,15,12],[27,11,15,13,"stableIdMap"],[27,22,15,24],[27,25,15,27],[27,29,15,31,"Map"],[27,32,15,34],[27,33,15,35],[27,34,15,36],[28,6,16,8],[28,10,16,12],[28,11,16,13,"keyCounter"],[28,21,16,23],[28,24,16,26],[28,25,16,27],[29,6,17,8],[29,10,17,12],[29,11,17,13,"unProcessedIndices"],[29,29,17,31],[29,32,17,34],[29,36,17,38,"Set"],[29,39,17,41],[29,40,17,42],[29,41,17,43],[30,4,18,4],[31,4,19,4],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,4,32,4,"sync"],[44,8,32,8,"sync"],[44,9,32,9,"getStableId"],[44,20,32,20],[44,22,32,22,"getItemType"],[44,33,32,33],[44,35,32,35,"engagedIndices"],[44,49,32,49],[44,51,32,51,"dataLength"],[44,61,32,61],[44,63,32,63],[45,6,33,8],[45,10,33,12],[45,11,33,13,"clearRecyclePool"],[45,27,33,29],[45,28,33,30],[45,29,33,31],[46,6,34,8],[46,10,34,12],[46,11,34,13,"unProcessedIndices"],[46,29,34,31],[46,30,34,32,"clear"],[46,35,34,37],[46,36,34,38],[46,37,34,39],[47,6,35,8],[48,6,36,8],[48,10,36,12],[48,11,36,13,"keyMap"],[48,17,36,19],[48,18,36,20,"forEach"],[48,25,36,27],[48,26,36,28],[48,27,36,29,"keyInfo"],[48,34,36,36],[48,36,36,38,"key"],[48,39,36,41],[48,44,36,46],[49,8,37,12],[49,14,37,18],[50,10,37,20,"index"],[50,15,37,25],[51,10,37,27,"stableId"],[51,18,37,35],[52,10,37,37,"itemType"],[53,8,37,46],[53,9,37,47],[53,12,37,50,"keyInfo"],[53,19,37,57],[54,8,38,12],[54,12,38,16,"index"],[54,17,38,21],[54,21,38,25,"dataLength"],[54,31,38,35],[54,33,38,37],[55,10,39,16],[55,14,39,20],[55,15,39,21,"recycleKey"],[55,25,39,31],[55,26,39,32,"key"],[55,29,39,35],[55,30,39,36],[56,10,40,16],[57,8,41,12],[58,8,42,12],[58,12,42,16],[58,13,42,17],[58,17,42,21],[58,18,42,22,"disableRecycling"],[58,34,42,38],[58,36,42,40],[59,10,43,16],[59,14,43,20],[59,15,43,21,"unProcessedIndices"],[59,33,43,39],[59,34,43,40,"add"],[59,37,43,43],[59,38,43,44,"index"],[59,43,43,49],[59,44,43,50],[60,8,44,12],[61,8,45,12],[61,12,45,16],[61,13,45,17,"engagedIndices"],[61,27,45,31],[61,28,45,32,"includes"],[61,36,45,40],[61,37,45,41,"index"],[61,42,45,46],[61,43,45,47],[61,45,45,49],[62,10,46,16],[62,14,46,20],[62,15,46,21,"recycleKey"],[62,25,46,31],[62,26,46,32,"key"],[62,29,46,35],[62,30,46,36],[63,10,47,16],[64,8,48,12],[65,8,49,12],[65,14,49,18,"newStableId"],[65,25,49,29],[65,28,49,32,"getStableId"],[65,39,49,43],[65,40,49,44,"index"],[65,45,49,49],[65,46,49,50],[66,8,50,12],[66,14,50,18,"newItemType"],[66,25,50,29],[66,28,50,32,"getItemType"],[66,39,50,43],[66,40,50,44,"index"],[66,45,50,49],[66,46,50,50],[67,8,51,12],[67,12,51,16,"stableId"],[67,20,51,24],[67,25,51,29,"newStableId"],[67,36,51,40],[67,40,51,44,"itemType"],[67,48,51,52],[67,53,51,57,"newItemType"],[67,64,51,68],[67,66,51,70],[68,10,52,16],[68,14,52,20],[68,15,52,21,"recycleKey"],[68,25,52,31],[68,26,52,32,"key"],[68,29,52,35],[68,30,52,36],[69,8,53,12],[70,6,54,8],[70,7,54,9],[70,8,54,10],[71,6,55,8],[72,6,56,8],[72,11,56,13],[72,17,56,19,"index"],[72,22,56,24],[72,26,56,28,"engagedIndices"],[72,40,56,42],[72,42,56,44],[73,8,57,12],[73,12,57,16],[73,16,57,20],[73,17,57,21,"hasOptimizedKey"],[73,32,57,36],[73,33,57,37,"getStableId"],[73,44,57,48],[73,45,57,49,"index"],[73,50,57,54],[73,51,57,55],[73,52,57,56],[73,54,57,58],[74,10,58,16],[74,14,58,20],[74,15,58,21,"syncItem"],[74,23,58,29],[74,24,58,30,"index"],[74,29,58,35],[74,31,58,37,"getItemType"],[74,42,58,48],[74,43,58,49,"index"],[74,48,58,54],[74,49,58,55],[74,51,58,57,"getStableId"],[74,62,58,68],[74,63,58,69,"index"],[74,68,58,74],[74,69,58,75],[74,70,58,76],[75,8,59,12],[76,6,60,8],[77,6,61,8],[78,6,62,8],[78,11,62,13],[78,17,62,19,"index"],[78,22,62,24],[78,26,62,28,"engagedIndices"],[78,40,62,42],[78,42,62,44],[79,8,63,12],[79,12,63,16],[79,13,63,17],[79,17,63,21],[79,18,63,22,"hasOptimizedKey"],[79,33,63,37],[79,34,63,38,"getStableId"],[79,45,63,49],[79,46,63,50,"index"],[79,51,63,55],[79,52,63,56],[79,53,63,57],[79,55,63,59],[80,10,64,16],[80,14,64,20],[80,15,64,21,"syncItem"],[80,23,64,29],[80,24,64,30,"index"],[80,29,64,35],[80,31,64,37,"getItemType"],[80,42,64,48],[80,43,64,49,"index"],[80,48,64,54],[80,49,64,55],[80,51,64,57,"getStableId"],[80,62,64,68],[80,63,64,69,"index"],[80,68,64,74],[80,69,64,75],[80,70,64,76],[81,8,65,12],[82,6,66,8],[83,6,67,8],[84,6,68,8],[85,6,69,8],[85,12,69,14,"validIndicesInPool"],[85,30,69,32],[85,33,69,35],[85,35,69,37],[86,6,70,8],[86,11,70,13],[86,17,70,19,"keyInfo"],[86,24,70,26],[86,28,70,30],[86,32,70,34],[86,33,70,35,"keyMap"],[86,39,70,41],[86,40,70,42,"values"],[86,46,70,48],[86,47,70,49],[86,48,70,50],[86,50,70,52],[87,8,71,12],[87,14,71,18,"index"],[87,19,71,23],[87,22,71,26,"keyInfo"],[87,29,71,33],[87,30,71,34,"index"],[87,35,71,39],[88,8,72,12],[88,12,72,16,"index"],[88,17,72,21],[88,20,72,24,"dataLength"],[88,30,72,34],[88,34,72,38],[88,35,72,39,"engagedIndices"],[88,49,72,53],[88,50,72,54,"includes"],[88,58,72,62],[88,59,72,63,"index"],[88,64,72,68],[88,65,72,69],[88,67,72,71],[89,10,73,16,"validIndicesInPool"],[89,28,73,34],[89,29,73,35,"push"],[89,33,73,39],[89,34,73,40,"index"],[89,39,73,45],[89,40,73,46],[90,8,74,12],[91,6,75,8],[92,6,76,8],[93,6,77,8],[93,11,77,13],[93,17,77,19,"index"],[93,22,77,24],[93,26,77,28,"validIndicesInPool"],[93,44,77,46],[93,46,77,48],[94,8,78,12],[94,12,78,16],[94,16,78,20],[94,17,78,21,"hasOptimizedKey"],[94,32,78,36],[94,33,78,37,"getStableId"],[94,44,78,48],[94,45,78,49,"index"],[94,50,78,54],[94,51,78,55],[94,52,78,56],[94,54,78,58],[95,10,79,16],[95,14,79,20],[95,15,79,21,"syncItem"],[95,23,79,29],[95,24,79,30,"index"],[95,29,79,35],[95,31,79,37,"getItemType"],[95,42,79,48],[95,43,79,49,"index"],[95,48,79,54],[95,49,79,55],[95,51,79,57,"getStableId"],[95,62,79,68],[95,63,79,69,"index"],[95,68,79,74],[95,69,79,75],[95,70,79,76],[96,8,80,12],[97,6,81,8],[98,6,82,8],[98,11,82,13],[98,17,82,19,"index"],[98,22,82,24],[98,26,82,28,"validIndicesInPool"],[98,44,82,46],[98,46,82,48],[99,8,83,12],[99,12,83,16],[99,13,83,17],[99,17,83,21],[99,18,83,22,"hasOptimizedKey"],[99,33,83,37],[99,34,83,38,"getStableId"],[99,45,83,49],[99,46,83,50,"index"],[99,51,83,55],[99,52,83,56],[99,53,83,57],[99,55,83,59],[100,10,84,16],[100,14,84,20],[100,15,84,21,"syncItem"],[100,23,84,29],[100,24,84,30,"index"],[100,29,84,35],[100,31,84,37,"getItemType"],[100,42,84,48],[100,43,84,49,"index"],[100,48,84,54],[100,49,84,55],[100,51,84,57,"getStableId"],[100,62,84,68],[100,63,84,69,"index"],[100,68,84,74],[100,69,84,75],[100,70,84,76],[101,8,85,12],[102,6,86,8],[103,6,87,8],[104,6,88,8],[104,10,88,12],[104,11,88,13,"cleanup"],[104,18,88,20],[104,19,88,21,"getStableId"],[104,30,88,32],[104,32,88,34,"getItemType"],[104,43,88,45],[104,45,88,47,"engagedIndices"],[104,59,88,61],[104,61,88,63,"dataLength"],[104,71,88,73],[104,72,88,74],[105,4,89,4],[106,4,90,4],[107,0,91,0],[108,0,92,0],[109,4,93,4,"hasOptimizedKey"],[109,19,93,19,"hasOptimizedKey"],[109,20,93,20,"stableId"],[109,28,93,28],[109,30,93,30],[110,6,94,8],[110,13,94,15],[110,17,94,19],[110,18,94,20,"stableIdMap"],[110,29,94,31],[110,30,94,32,"has"],[110,33,94,35],[110,34,94,36,"stableId"],[110,42,94,44],[110,43,94,45],[111,4,95,4],[112,4,96,4],[113,0,97,0],[114,0,98,0],[115,0,99,0],[116,0,100,0],[117,4,101,4,"cleanup"],[117,11,101,11,"cleanup"],[117,12,101,12,"getStableId"],[117,23,101,23],[117,25,101,25,"getItemType"],[117,36,101,36],[117,38,101,38,"engagedIndices"],[117,52,101,52],[117,54,101,54,"dataLength"],[117,64,101,64],[117,66,101,66],[118,6,102,8],[118,12,102,14,"itemsToDelete"],[118,25,102,27],[118,28,102,30],[118,32,102,34,"Array"],[118,37,102,39],[118,38,102,40],[118,39,102,41],[119,6,103,8],[120,6,104,8],[120,11,104,13],[120,17,104,19],[120,18,104,20,"key"],[120,21,104,23],[120,23,104,25,"keyInfo"],[120,30,104,32],[120,31,104,33],[120,35,104,37],[120,39,104,41],[120,40,104,42,"keyMap"],[120,46,104,48],[120,47,104,49,"entries"],[120,54,104,56],[120,55,104,57],[120,56,104,58],[120,58,104,60],[121,8,105,12],[121,14,105,18],[122,10,105,20,"index"],[122,15,105,25],[123,10,105,27,"itemType"],[123,18,105,35],[124,10,105,37,"stableId"],[125,8,105,46],[125,9,105,47],[125,12,105,50,"keyInfo"],[125,19,105,57],[126,8,106,12],[126,14,106,18,"indexOutOfBounds"],[126,30,106,34],[126,33,106,37,"index"],[126,38,106,42],[126,42,106,46,"dataLength"],[126,52,106,56],[127,8,107,12],[127,14,107,18,"hasStableIdChanged"],[127,32,107,36],[127,35,107,39],[127,36,107,40,"indexOutOfBounds"],[127,52,107,56],[127,56,107,60,"getStableId"],[127,67,107,71],[127,68,107,72,"index"],[127,73,107,77],[127,74,107,78],[127,79,107,83,"stableId"],[127,87,107,91],[128,8,108,12],[128,12,108,16,"indexOutOfBounds"],[128,28,108,32],[128,32,108,36,"hasStableIdChanged"],[128,50,108,54],[128,52,108,56],[129,10,109,16],[129,16,109,22,"nextIndex"],[129,25,109,31],[129,28,109,34],[129,32,109,38],[129,33,109,39,"unProcessedIndices"],[129,51,109,57],[129,52,109,58,"values"],[129,58,109,64],[129,59,109,65],[129,60,109,66],[129,61,109,67,"next"],[129,65,109,71],[129,66,109,72],[129,67,109,73],[129,68,109,74,"value"],[129,73,109,79],[130,10,110,16],[130,14,110,20,"shouldDeleteKey"],[130,29,110,35],[130,32,110,38],[130,36,110,42],[131,10,111,16],[131,14,111,20,"nextIndex"],[131,23,111,29],[131,28,111,34,"undefined"],[131,37,111,43],[131,39,111,45],[132,12,112,20],[132,18,112,26,"nextItemType"],[132,30,112,38],[132,33,112,41,"getItemType"],[132,44,112,52],[132,45,112,53,"nextIndex"],[132,54,112,62],[132,55,112,63],[133,12,113,20],[133,18,113,26,"nextStableId"],[133,30,113,38],[133,33,113,41,"getStableId"],[133,44,113,52],[133,45,113,53,"nextIndex"],[133,54,113,62],[133,55,113,63],[134,12,114,20],[134,16,114,24,"itemType"],[134,24,114,32],[134,29,114,37,"nextItemType"],[134,41,114,49],[134,43,114,51],[135,14,115,24],[135,18,115,28],[135,19,115,29,"syncItem"],[135,27,115,37],[135,28,115,38,"nextIndex"],[135,37,115,47],[135,39,115,49,"nextItemType"],[135,51,115,61],[135,53,115,63,"nextStableId"],[135,65,115,75],[135,66,115,76],[136,14,116,24,"shouldDeleteKey"],[136,29,116,39],[136,32,116,42],[136,37,116,47],[137,12,117,20],[138,10,118,16],[139,10,119,16],[139,14,119,20,"shouldDeleteKey"],[139,29,119,35],[139,31,119,37],[140,12,120,20],[140,16,120,24],[140,17,120,25,"deleteKeyFromRecyclePool"],[140,41,120,49],[140,42,120,50,"itemType"],[140,50,120,58],[140,52,120,60,"key"],[140,55,120,63],[140,56,120,64],[141,12,121,20],[141,16,121,24],[141,17,121,25,"stableIdMap"],[141,28,121,36],[141,29,121,37,"delete"],[141,35,121,43],[141,36,121,44,"stableId"],[141,44,121,52],[141,45,121,53],[142,12,122,20,"itemsToDelete"],[142,25,122,33],[142,26,122,34,"push"],[142,30,122,38],[142,31,122,39,"key"],[142,34,122,42],[142,35,122,43],[143,10,123,16],[144,8,124,12],[145,6,125,8],[146,6,126,8],[146,11,126,13],[146,17,126,19,"key"],[146,20,126,22],[146,24,126,26,"itemsToDelete"],[146,37,126,39],[146,39,126,41],[147,8,127,12],[147,12,127,16],[147,13,127,17,"keyMap"],[147,19,127,23],[147,20,127,24,"delete"],[147,26,127,30],[147,27,127,31,"key"],[147,30,127,34],[147,31,127,35],[148,6,128,8],[149,6,129,8],[150,6,130,8],[150,12,130,14,"itemsRenderedForRecycling"],[150,37,130,39],[150,40,130,42],[150,44,130,46],[150,45,130,47,"keyMap"],[150,51,130,53],[150,52,130,54,"size"],[150,56,130,58],[150,59,130,61,"engagedIndices"],[150,73,130,75],[150,74,130,76,"length"],[150,80,130,82],[151,6,131,8],[151,10,131,12,"itemsRenderedForRecycling"],[151,35,131,37],[151,38,131,40],[151,42,131,44],[151,43,131,45,"maxItemsInRecyclePool"],[151,64,131,66],[151,66,131,68],[152,8,132,12],[152,14,132,18,"deleteCount"],[152,25,132,29],[152,28,132,32,"itemsRenderedForRecycling"],[152,53,132,57],[152,56,132,60],[152,60,132,64],[152,61,132,65,"maxItemsInRecyclePool"],[152,82,132,86],[153,8,133,12],[153,12,133,16,"deleted"],[153,19,133,23],[153,22,133,26],[153,23,133,27],[154,8,134,12],[155,8,135,12],[155,14,135,18,"entries"],[155,21,135,25],[155,24,135,28,"Array"],[155,29,135,33],[155,30,135,34,"from"],[155,34,135,38],[155,35,135,39],[155,39,135,43],[155,40,135,44,"keyMap"],[155,46,135,50],[155,47,135,51,"entries"],[155,54,135,58],[155,55,135,59],[155,56,135,60],[155,57,135,61],[155,58,135,62,"reverse"],[155,65,135,69],[155,66,135,70],[155,67,135,71],[156,8,136,12],[156,13,136,17],[156,17,136,21,"i"],[156,18,136,22],[156,21,136,25],[156,22,136,26],[156,24,136,28,"i"],[156,25,136,29],[156,28,136,32,"entries"],[156,35,136,39],[156,36,136,40,"length"],[156,42,136,46],[156,46,136,50,"deleted"],[156,53,136,57],[156,56,136,60,"deleteCount"],[156,67,136,71],[156,69,136,73,"i"],[156,70,136,74],[156,72,136,76],[156,74,136,78],[157,10,137,16],[157,16,137,22],[157,17,137,23,"key"],[157,20,137,26],[157,22,137,28,"keyInfo"],[157,29,137,35],[157,30,137,36],[157,33,137,39,"entries"],[157,40,137,46],[157,41,137,47,"i"],[157,42,137,48],[157,43,137,49],[158,10,138,16],[158,16,138,22],[159,12,138,24,"index"],[159,17,138,29],[160,12,138,31,"itemType"],[160,20,138,39],[161,12,138,41,"stableId"],[162,10,138,50],[162,11,138,51],[162,14,138,54,"keyInfo"],[162,21,138,61],[163,10,139,16],[163,14,139,20],[163,15,139,21,"engagedIndices"],[163,29,139,35],[163,30,139,36,"includes"],[163,38,139,44],[163,39,139,45,"index"],[163,44,139,50],[163,45,139,51],[163,47,139,53],[164,12,140,20],[164,16,140,24],[164,17,140,25,"deleteKeyFromRecyclePool"],[164,41,140,49],[164,42,140,50,"itemType"],[164,50,140,58],[164,52,140,60,"key"],[164,55,140,63],[164,56,140,64],[165,12,141,20],[165,16,141,24],[165,17,141,25,"stableIdMap"],[165,28,141,36],[165,29,141,37,"delete"],[165,35,141,43],[165,36,141,44,"stableId"],[165,44,141,52],[165,45,141,53],[166,12,142,20],[166,16,142,24],[166,17,142,25,"keyMap"],[166,23,142,31],[166,24,142,32,"delete"],[166,30,142,38],[166,31,142,39,"key"],[166,34,142,42],[166,35,142,43],[167,12,143,20,"deleted"],[167,19,143,27],[167,21,143,29],[168,10,144,16],[169,8,145,12],[170,6,146,8],[171,4,147,4],[172,4,148,4],[173,0,149,0],[174,0,150,0],[175,4,151,4,"recycleKey"],[175,14,151,14,"recycleKey"],[175,15,151,15,"key"],[175,18,151,18],[175,20,151,20],[176,6,152,8],[176,10,152,12],[176,14,152,16],[176,15,152,17,"disableRecycling"],[176,31,152,33],[176,33,152,35],[177,8,153,12],[178,6,154,8],[179,6,155,8],[179,12,155,14,"keyInfo"],[179,19,155,21],[179,22,155,24],[179,26,155,28],[179,27,155,29,"keyMap"],[179,33,155,35],[179,34,155,36,"get"],[179,37,155,39],[179,38,155,40,"key"],[179,41,155,43],[179,42,155,44],[180,6,156,8],[180,10,156,12],[180,11,156,13,"keyInfo"],[180,18,156,20],[180,20,156,22],[181,8,157,12],[182,6,158,8],[183,6,159,8],[183,12,159,14],[184,8,159,16,"itemType"],[185,6,159,25],[185,7,159,26],[185,10,159,29,"keyInfo"],[185,17,159,36],[186,6,160,8],[187,6,161,8],[187,12,161,14,"pool"],[187,16,161,18],[187,19,161,21],[187,23,161,25],[187,24,161,26,"getRecyclePoolForType"],[187,45,161,47],[187,46,161,48,"itemType"],[187,54,161,56],[187,55,161,57],[188,6,162,8,"pool"],[188,10,162,12],[188,11,162,13,"add"],[188,14,162,16],[188,15,162,17,"key"],[188,18,162,20],[188,19,162,21],[189,4,163,4],[190,4,164,4],[191,0,165,0],[192,0,166,0],[193,4,167,4,"getRenderStack"],[193,18,167,18,"getRenderStack"],[193,19,167,18],[193,21,167,21],[194,6,168,8],[194,13,168,15],[194,17,168,19],[194,18,168,20,"keyMap"],[194,24,168,26],[195,4,169,4],[196,4,170,4],[197,0,171,0],[198,0,172,0],[199,0,173,0],[200,0,174,0],[201,0,175,0],[202,4,176,4,"syncItem"],[202,12,176,12,"syncItem"],[202,13,176,13,"index"],[202,18,176,18],[202,20,176,20,"itemType"],[202,28,176,28],[202,30,176,30,"stableId"],[202,38,176,38],[202,40,176,40],[203,6,177,8],[204,6,178,8],[204,12,178,14,"newKey"],[204,18,178,20],[204,21,178,23],[204,25,178,27],[204,26,178,28,"stableIdMap"],[204,37,178,39],[204,38,178,40,"get"],[204,41,178,43],[204,42,178,44,"stableId"],[204,50,178,52],[204,51,178,53],[204,55,179,12],[204,59,179,16],[204,60,179,17,"getKeyFromRecyclePool"],[204,81,179,38],[204,82,179,39,"itemType"],[204,90,179,47],[204,91,179,48],[204,95,180,12],[204,99,180,16],[204,100,180,17,"generateKey"],[204,111,180,28],[204,112,180,29],[204,113,180,30],[205,6,181,8],[205,10,181,12],[205,11,181,13,"unProcessedIndices"],[205,29,181,31],[205,30,181,32,"delete"],[205,36,181,38],[205,37,181,39,"index"],[205,42,181,44],[205,43,181,45],[206,6,182,8],[206,12,182,14,"keyInfo"],[206,19,182,21],[206,22,182,24],[206,26,182,28],[206,27,182,29,"keyMap"],[206,33,182,35],[206,34,182,36,"get"],[206,37,182,39],[206,38,182,40,"newKey"],[206,44,182,46],[206,45,182,47],[207,6,183,8],[207,10,183,12,"keyInfo"],[207,17,183,19],[207,19,183,21],[208,8,184,12],[209,8,185,12],[209,12,185,16],[209,13,185,17,"deleteKeyFromRecyclePool"],[209,37,185,41],[209,38,185,42,"itemType"],[209,46,185,50],[209,48,185,52,"newKey"],[209,54,185,58],[209,55,185,59],[210,8,186,12],[210,12,186,16],[210,13,186,17,"deleteKeyFromRecyclePool"],[210,37,186,41],[210,38,186,42,"keyInfo"],[210,45,186,49],[210,46,186,50,"itemType"],[210,54,186,58],[210,56,186,60,"newKey"],[210,62,186,66],[210,63,186,67],[211,8,187,12],[211,12,187,16],[211,13,187,17,"stableIdMap"],[211,24,187,28],[211,25,187,29,"delete"],[211,31,187,35],[211,32,187,36,"keyInfo"],[211,39,187,43],[211,40,187,44,"stableId"],[211,48,187,52],[211,49,187,53],[212,8,188,12,"keyInfo"],[212,15,188,19],[212,16,188,20,"index"],[212,21,188,25],[212,24,188,28,"index"],[212,29,188,33],[213,8,189,12,"keyInfo"],[213,15,189,19],[213,16,189,20,"itemType"],[213,24,189,28],[213,27,189,31,"itemType"],[213,35,189,39],[214,8,190,12,"keyInfo"],[214,15,190,19],[214,16,190,20,"stableId"],[214,24,190,28],[214,27,190,31,"stableId"],[214,35,190,39],[215,6,191,8],[215,7,191,9],[215,13,192,13],[216,8,193,12],[217,8,194,12],[217,12,194,16],[217,13,194,17,"keyMap"],[217,19,194,23],[217,20,194,24,"set"],[217,23,194,27],[217,24,194,28,"newKey"],[217,30,194,34],[217,32,194,36],[218,10,195,16,"itemType"],[218,18,195,24],[219,10,196,16,"index"],[219,15,196,21],[220,10,197,16,"stableId"],[221,8,198,12],[221,9,198,13],[221,10,198,14],[222,6,199,8],[223,6,200,8],[223,10,200,12],[223,11,200,13,"stableIdMap"],[223,22,200,24],[223,23,200,25,"set"],[223,26,200,28],[223,27,200,29,"stableId"],[223,35,200,37],[223,37,200,39,"newKey"],[223,43,200,45],[223,44,200,46],[224,6,201,8],[224,13,201,15,"newKey"],[224,19,201,21],[225,4,202,4],[226,4,203,4],[227,0,204,0],[228,0,205,0],[229,0,206,0],[230,4,207,4,"clearRecyclePool"],[230,20,207,20,"clearRecyclePool"],[230,21,207,20],[230,23,207,23],[231,6,208,8],[232,6,209,8],[232,11,209,13],[232,17,209,19,"pool"],[232,21,209,23],[232,25,209,27],[232,29,209,31],[232,30,209,32,"recycleKeyPools"],[232,45,209,47],[232,46,209,48,"values"],[232,52,209,54],[232,53,209,55],[232,54,209,56],[232,56,209,58],[233,8,210,12,"pool"],[233,12,210,16],[233,13,210,17,"clear"],[233,18,210,22],[233,19,210,23],[233,20,210,24],[234,6,211,8],[235,4,212,4],[236,4,213,4],[237,0,214,0],[238,0,215,0],[239,0,216,0],[240,4,217,4,"generateKey"],[240,15,217,15,"generateKey"],[240,16,217,15],[240,18,217,18],[241,6,218,8],[241,13,218,15],[241,14,218,16],[241,18,218,20],[241,19,218,21,"keyCounter"],[241,29,218,31],[241,31,218,33],[241,33,218,35,"toString"],[241,41,218,43],[241,42,218,44],[241,43,218,45],[242,4,219,4],[243,4,220,4],[244,0,221,0],[245,0,222,0],[246,4,223,4,"deleteKeyFromRecyclePool"],[246,28,223,28,"deleteKeyFromRecyclePool"],[246,29,223,29,"itemType"],[246,37,223,37],[246,39,223,39,"key"],[246,42,223,42],[246,44,223,44],[247,6,224,8],[247,10,224,12,"_a"],[247,12,224,14],[248,6,225,8],[248,7,225,9,"_a"],[248,9,225,11],[248,12,225,14],[248,16,225,18],[248,17,225,19,"recycleKeyPools"],[248,32,225,34],[248,33,225,35,"get"],[248,36,225,38],[248,37,225,39,"itemType"],[248,45,225,47],[248,46,225,48],[248,52,225,54],[248,56,225,58],[248,60,225,62,"_a"],[248,62,225,64],[248,67,225,69],[248,72,225,74],[248,73,225,75],[248,76,225,78],[248,81,225,83],[248,82,225,84],[248,85,225,87,"_a"],[248,87,225,89],[248,88,225,90,"delete"],[248,94,225,96],[248,95,225,97,"key"],[248,98,225,100],[248,99,225,101],[249,4,226,4],[250,4,227,4],[251,0,228,0],[252,0,229,0],[253,4,230,4,"getRecyclePoolForType"],[253,25,230,25,"getRecyclePoolForType"],[253,26,230,26,"itemType"],[253,34,230,34],[253,36,230,36],[254,6,231,8],[254,10,231,12,"pool"],[254,14,231,16],[254,17,231,19],[254,21,231,23],[254,22,231,24,"recycleKeyPools"],[254,37,231,39],[254,38,231,40,"get"],[254,41,231,43],[254,42,231,44,"itemType"],[254,50,231,52],[254,51,231,53],[255,6,232,8],[255,10,232,12],[255,11,232,13,"pool"],[255,15,232,17],[255,17,232,19],[256,8,233,12,"pool"],[256,12,233,16],[256,15,233,19],[256,19,233,23,"Set"],[256,22,233,26],[256,23,233,27],[256,24,233,28],[257,8,234,12],[257,12,234,16],[257,13,234,17,"recycleKeyPools"],[257,28,234,32],[257,29,234,33,"set"],[257,32,234,36],[257,33,234,37,"itemType"],[257,41,234,45],[257,43,234,47,"pool"],[257,47,234,51],[257,48,234,52],[258,6,235,8],[259,6,236,8],[259,13,236,15,"pool"],[259,17,236,19],[260,4,237,4],[261,4,238,4],[262,0,239,0],[263,0,240,0],[264,0,241,0],[265,4,242,4,"getKeyFromRecyclePool"],[265,25,242,25,"getKeyFromRecyclePool"],[265,26,242,26,"itemType"],[265,34,242,34],[265,36,242,36],[266,6,243,8],[266,12,243,14,"pool"],[266,16,243,18],[266,19,243,21],[266,23,243,25],[266,24,243,26,"getRecyclePoolForType"],[266,45,243,47],[266,46,243,48,"itemType"],[266,54,243,56],[266,55,243,57],[267,6,244,8],[267,10,244,12,"pool"],[267,14,244,16],[267,15,244,17,"size"],[267,19,244,21],[267,22,244,24],[267,23,244,25],[267,25,244,27],[268,8,245,12],[268,14,245,18,"key"],[268,17,245,21],[268,20,245,24,"pool"],[268,24,245,28],[268,25,245,29,"values"],[268,31,245,35],[268,32,245,36],[268,33,245,37],[268,34,245,38,"next"],[268,38,245,42],[268,39,245,43],[268,40,245,44],[268,41,245,45,"value"],[268,46,245,50],[269,8,246,12,"pool"],[269,12,246,16],[269,13,246,17,"delete"],[269,19,246,23],[269,20,246,24,"key"],[269,23,246,27],[269,24,246,28],[270,8,247,12],[270,15,247,19,"key"],[270,18,247,22],[271,6,248,8],[272,6,249,8],[272,13,249,15,"undefined"],[272,22,249,24],[273,4,250,4],[274,2,251,0],[275,0,251,1],[275,3]],"functionMap":{"names":["<global>","RenderStackManager","constructor","sync","keyMap.forEach$argument_0","hasOptimizedKey","cleanup","recycleKey","getRenderStack","syncItem","clearRecyclePool","generateKey","deleteKeyFromRecyclePool","getRecyclePoolForType","getKeyFromRecyclePool"],"mappings":"AAA;OCK;ICI;KDQ;IEc;4BCI;SDkB;KFmC;III;KJE;IKM;KL8C;IMI;KNY;IOI;KPE;IQO;KR0B;ISK;KTK;IUK;KVE;IWI;KXG;IYI;KZO;IaK;KbQ;CDC"},"hasCjsExports":false},"type":"js/module"}]}