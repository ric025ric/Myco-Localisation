{"dependencies":[{"name":"util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":11,"index":26},"end":{"line":3,"column":26,"index":41}}],"key":"plO20G0zye191TqKMAMeOagk9EI=","exportNames":["*"],"imports":1}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":56},"end":{"line":4,"column":30,"index":73}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  let util = require(_dependencyMap[0], \"util\");\n  let Stream = require(_dependencyMap[1], \"stream\");\n  let ChunkStream = module.exports = function () {\n    Stream.call(this);\n    this._buffers = [];\n    this._buffered = 0;\n    this._reads = [];\n    this._paused = false;\n    this._encoding = \"utf8\";\n    this.writable = true;\n  };\n  util.inherits(ChunkStream, Stream);\n  ChunkStream.prototype.read = function (length, callback) {\n    this._reads.push({\n      length: Math.abs(length),\n      // if length < 0 then at most this length\n      allowLess: length < 0,\n      func: callback\n    });\n    process.nextTick(function () {\n      this._process();\n\n      // its paused and there is not enought data then ask for more\n      if (this._paused && this._reads && this._reads.length > 0) {\n        this._paused = false;\n        this.emit(\"drain\");\n      }\n    }.bind(this));\n  };\n  ChunkStream.prototype.write = function (data, encoding) {\n    if (!this.writable) {\n      this.emit(\"error\", new Error(\"Stream not writable\"));\n      return false;\n    }\n    let dataBuffer;\n    if (Buffer.isBuffer(data)) {\n      dataBuffer = data;\n    } else {\n      dataBuffer = Buffer.from(data, encoding || this._encoding);\n    }\n    this._buffers.push(dataBuffer);\n    this._buffered += dataBuffer.length;\n    this._process();\n\n    // ok if there are no more read requests\n    if (this._reads && this._reads.length === 0) {\n      this._paused = true;\n    }\n    return this.writable && !this._paused;\n  };\n  ChunkStream.prototype.end = function (data, encoding) {\n    if (data) {\n      this.write(data, encoding);\n    }\n    this.writable = false;\n\n    // already destroyed\n    if (!this._buffers) {\n      return;\n    }\n\n    // enqueue or handle end\n    if (this._buffers.length === 0) {\n      this._end();\n    } else {\n      this._buffers.push(null);\n      this._process();\n    }\n  };\n  ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;\n  ChunkStream.prototype._end = function () {\n    if (this._reads.length > 0) {\n      this.emit(\"error\", new Error(\"Unexpected end of input\"));\n    }\n    this.destroy();\n  };\n  ChunkStream.prototype.destroy = function () {\n    if (!this._buffers) {\n      return;\n    }\n    this.writable = false;\n    this._reads = null;\n    this._buffers = null;\n    this.emit(\"close\");\n  };\n  ChunkStream.prototype._processReadAllowingLess = function (read) {\n    // ok there is any data so that we can satisfy this request\n    this._reads.shift(); // == read\n\n    // first we need to peek into first buffer\n    let smallerBuf = this._buffers[0];\n\n    // ok there is more data than we need\n    if (smallerBuf.length > read.length) {\n      this._buffered -= read.length;\n      this._buffers[0] = smallerBuf.slice(read.length);\n      read.func.call(this, smallerBuf.slice(0, read.length));\n    } else {\n      // ok this is less than maximum length so use it all\n      this._buffered -= smallerBuf.length;\n      this._buffers.shift(); // == smallerBuf\n\n      read.func.call(this, smallerBuf);\n    }\n  };\n  ChunkStream.prototype._processRead = function (read) {\n    this._reads.shift(); // == read\n\n    let pos = 0;\n    let count = 0;\n    let data = Buffer.alloc(read.length);\n\n    // create buffer for all data\n    while (pos < read.length) {\n      let buf = this._buffers[count++];\n      let len = Math.min(buf.length, read.length - pos);\n      buf.copy(data, pos, 0, len);\n      pos += len;\n\n      // last buffer wasn't used all so just slice it and leave\n      if (len !== buf.length) {\n        this._buffers[--count] = buf.slice(len);\n      }\n    }\n\n    // remove all used buffers\n    if (count > 0) {\n      this._buffers.splice(0, count);\n    }\n    this._buffered -= read.length;\n    read.func.call(this, data);\n  };\n  ChunkStream.prototype._process = function () {\n    try {\n      // as long as there is any data and read requests\n      while (this._buffered > 0 && this._reads && this._reads.length > 0) {\n        let read = this._reads[0];\n\n        // read any data (but no more than length)\n        if (read.allowLess) {\n          this._processReadAllowingLess(read);\n        } else if (this._buffered >= read.length) {\n          // ok we can meet some expectations\n\n          this._processRead(read);\n        } else {\n          // not enought data to satisfy first request in queue\n          // so we need to wait for more\n          break;\n        }\n      }\n      if (this._buffers && !this.writable) {\n        this._end();\n      }\n    } catch (ex) {\n      this.emit(\"error\", ex);\n    }\n  };\n});","lineCount":162,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"util"],[4,10,3,8],[4,13,3,11,"require"],[4,20,3,18],[4,21,3,18,"_dependencyMap"],[4,35,3,18],[4,46,3,25],[4,47,3,26],[5,2,4,0],[5,6,4,4,"Stream"],[5,12,4,10],[5,15,4,13,"require"],[5,22,4,20],[5,23,4,20,"_dependencyMap"],[5,37,4,20],[5,50,4,29],[5,51,4,30],[6,2,6,0],[6,6,6,4,"ChunkStream"],[6,17,6,15],[6,20,6,19,"module"],[6,26,6,25],[6,27,6,26,"exports"],[6,34,6,33],[6,37,6,36],[6,49,6,48],[7,4,7,2,"Stream"],[7,10,7,8],[7,11,7,9,"call"],[7,15,7,13],[7,16,7,14],[7,20,7,18],[7,21,7,19],[8,4,9,2],[8,8,9,6],[8,9,9,7,"_buffers"],[8,17,9,15],[8,20,9,18],[8,22,9,20],[9,4,10,2],[9,8,10,6],[9,9,10,7,"_buffered"],[9,18,10,16],[9,21,10,19],[9,22,10,20],[10,4,12,2],[10,8,12,6],[10,9,12,7,"_reads"],[10,15,12,13],[10,18,12,16],[10,20,12,18],[11,4,13,2],[11,8,13,6],[11,9,13,7,"_paused"],[11,16,13,14],[11,19,13,17],[11,24,13,22],[12,4,15,2],[12,8,15,6],[12,9,15,7,"_encoding"],[12,18,15,16],[12,21,15,19],[12,27,15,25],[13,4,16,2],[13,8,16,6],[13,9,16,7,"writable"],[13,17,16,15],[13,20,16,18],[13,24,16,22],[14,2,17,0],[14,3,17,2],[15,2,18,0,"util"],[15,6,18,4],[15,7,18,5,"inherits"],[15,15,18,13],[15,16,18,14,"ChunkStream"],[15,27,18,25],[15,29,18,27,"Stream"],[15,35,18,33],[15,36,18,34],[16,2,20,0,"ChunkStream"],[16,13,20,11],[16,14,20,12,"prototype"],[16,23,20,21],[16,24,20,22,"read"],[16,28,20,26],[16,31,20,29],[16,41,20,39,"length"],[16,47,20,45],[16,49,20,47,"callback"],[16,57,20,55],[16,59,20,57],[17,4,21,2],[17,8,21,6],[17,9,21,7,"_reads"],[17,15,21,13],[17,16,21,14,"push"],[17,20,21,18],[17,21,21,19],[18,6,22,4,"length"],[18,12,22,10],[18,14,22,12,"Math"],[18,18,22,16],[18,19,22,17,"abs"],[18,22,22,20],[18,23,22,21,"length"],[18,29,22,27],[18,30,22,28],[19,6,22,30],[20,6,23,4,"allowLess"],[20,15,23,13],[20,17,23,15,"length"],[20,23,23,21],[20,26,23,24],[20,27,23,25],[21,6,24,4,"func"],[21,10,24,8],[21,12,24,10,"callback"],[22,4,25,2],[22,5,25,3],[22,6,25,4],[23,4,27,2,"process"],[23,11,27,9],[23,12,27,10,"nextTick"],[23,20,27,18],[23,21,28,4],[23,33,28,16],[24,6,29,6],[24,10,29,10],[24,11,29,11,"_process"],[24,19,29,19],[24,20,29,20],[24,21,29,21],[26,6,31,6],[27,6,32,6],[27,10,32,10],[27,14,32,14],[27,15,32,15,"_paused"],[27,22,32,22],[27,26,32,26],[27,30,32,30],[27,31,32,31,"_reads"],[27,37,32,37],[27,41,32,41],[27,45,32,45],[27,46,32,46,"_reads"],[27,52,32,52],[27,53,32,53,"length"],[27,59,32,59],[27,62,32,62],[27,63,32,63],[27,65,32,65],[28,8,33,8],[28,12,33,12],[28,13,33,13,"_paused"],[28,20,33,20],[28,23,33,23],[28,28,33,28],[29,8,35,8],[29,12,35,12],[29,13,35,13,"emit"],[29,17,35,17],[29,18,35,18],[29,25,35,25],[29,26,35,26],[30,6,36,6],[31,4,37,4],[31,5,37,5],[31,6,37,6,"bind"],[31,10,37,10],[31,11,37,11],[31,15,37,15],[31,16,38,2],[31,17,38,3],[32,2,39,0],[32,3,39,1],[33,2,41,0,"ChunkStream"],[33,13,41,11],[33,14,41,12,"prototype"],[33,23,41,21],[33,24,41,22,"write"],[33,29,41,27],[33,32,41,30],[33,42,41,40,"data"],[33,46,41,44],[33,48,41,46,"encoding"],[33,56,41,54],[33,58,41,56],[34,4,42,2],[34,8,42,6],[34,9,42,7],[34,13,42,11],[34,14,42,12,"writable"],[34,22,42,20],[34,24,42,22],[35,6,43,4],[35,10,43,8],[35,11,43,9,"emit"],[35,15,43,13],[35,16,43,14],[35,23,43,21],[35,25,43,23],[35,29,43,27,"Error"],[35,34,43,32],[35,35,43,33],[35,56,43,54],[35,57,43,55],[35,58,43,56],[36,6,44,4],[36,13,44,11],[36,18,44,16],[37,4,45,2],[38,4,47,2],[38,8,47,6,"dataBuffer"],[38,18,47,16],[39,4,48,2],[39,8,48,6,"Buffer"],[39,14,48,12],[39,15,48,13,"isBuffer"],[39,23,48,21],[39,24,48,22,"data"],[39,28,48,26],[39,29,48,27],[39,31,48,29],[40,6,49,4,"dataBuffer"],[40,16,49,14],[40,19,49,17,"data"],[40,23,49,21],[41,4,50,2],[41,5,50,3],[41,11,50,9],[42,6,51,4,"dataBuffer"],[42,16,51,14],[42,19,51,17,"Buffer"],[42,25,51,23],[42,26,51,24,"from"],[42,30,51,28],[42,31,51,29,"data"],[42,35,51,33],[42,37,51,35,"encoding"],[42,45,51,43],[42,49,51,47],[42,53,51,51],[42,54,51,52,"_encoding"],[42,63,51,61],[42,64,51,62],[43,4,52,2],[44,4,54,2],[44,8,54,6],[44,9,54,7,"_buffers"],[44,17,54,15],[44,18,54,16,"push"],[44,22,54,20],[44,23,54,21,"dataBuffer"],[44,33,54,31],[44,34,54,32],[45,4,55,2],[45,8,55,6],[45,9,55,7,"_buffered"],[45,18,55,16],[45,22,55,20,"dataBuffer"],[45,32,55,30],[45,33,55,31,"length"],[45,39,55,37],[46,4,57,2],[46,8,57,6],[46,9,57,7,"_process"],[46,17,57,15],[46,18,57,16],[46,19,57,17],[48,4,59,2],[49,4,60,2],[49,8,60,6],[49,12,60,10],[49,13,60,11,"_reads"],[49,19,60,17],[49,23,60,21],[49,27,60,25],[49,28,60,26,"_reads"],[49,34,60,32],[49,35,60,33,"length"],[49,41,60,39],[49,46,60,44],[49,47,60,45],[49,49,60,47],[50,6,61,4],[50,10,61,8],[50,11,61,9,"_paused"],[50,18,61,16],[50,21,61,19],[50,25,61,23],[51,4,62,2],[52,4,64,2],[52,11,64,9],[52,15,64,13],[52,16,64,14,"writable"],[52,24,64,22],[52,28,64,26],[52,29,64,27],[52,33,64,31],[52,34,64,32,"_paused"],[52,41,64,39],[53,2,65,0],[53,3,65,1],[54,2,67,0,"ChunkStream"],[54,13,67,11],[54,14,67,12,"prototype"],[54,23,67,21],[54,24,67,22,"end"],[54,27,67,25],[54,30,67,28],[54,40,67,38,"data"],[54,44,67,42],[54,46,67,44,"encoding"],[54,54,67,52],[54,56,67,54],[55,4,68,2],[55,8,68,6,"data"],[55,12,68,10],[55,14,68,12],[56,6,69,4],[56,10,69,8],[56,11,69,9,"write"],[56,16,69,14],[56,17,69,15,"data"],[56,21,69,19],[56,23,69,21,"encoding"],[56,31,69,29],[56,32,69,30],[57,4,70,2],[58,4,72,2],[58,8,72,6],[58,9,72,7,"writable"],[58,17,72,15],[58,20,72,18],[58,25,72,23],[60,4,74,2],[61,4,75,2],[61,8,75,6],[61,9,75,7],[61,13,75,11],[61,14,75,12,"_buffers"],[61,22,75,20],[61,24,75,22],[62,6,76,4],[63,4,77,2],[65,4,79,2],[66,4,80,2],[66,8,80,6],[66,12,80,10],[66,13,80,11,"_buffers"],[66,21,80,19],[66,22,80,20,"length"],[66,28,80,26],[66,33,80,31],[66,34,80,32],[66,36,80,34],[67,6,81,4],[67,10,81,8],[67,11,81,9,"_end"],[67,15,81,13],[67,16,81,14],[67,17,81,15],[68,4,82,2],[68,5,82,3],[68,11,82,9],[69,6,83,4],[69,10,83,8],[69,11,83,9,"_buffers"],[69,19,83,17],[69,20,83,18,"push"],[69,24,83,22],[69,25,83,23],[69,29,83,27],[69,30,83,28],[70,6,84,4],[70,10,84,8],[70,11,84,9,"_process"],[70,19,84,17],[70,20,84,18],[70,21,84,19],[71,4,85,2],[72,2,86,0],[72,3,86,1],[73,2,88,0,"ChunkStream"],[73,13,88,11],[73,14,88,12,"prototype"],[73,23,88,21],[73,24,88,22,"destroySoon"],[73,35,88,33],[73,38,88,36,"ChunkStream"],[73,49,88,47],[73,50,88,48,"prototype"],[73,59,88,57],[73,60,88,58,"end"],[73,63,88,61],[74,2,90,0,"ChunkStream"],[74,13,90,11],[74,14,90,12,"prototype"],[74,23,90,21],[74,24,90,22,"_end"],[74,28,90,26],[74,31,90,29],[74,43,90,41],[75,4,91,2],[75,8,91,6],[75,12,91,10],[75,13,91,11,"_reads"],[75,19,91,17],[75,20,91,18,"length"],[75,26,91,24],[75,29,91,27],[75,30,91,28],[75,32,91,30],[76,6,92,4],[76,10,92,8],[76,11,92,9,"emit"],[76,15,92,13],[76,16,92,14],[76,23,92,21],[76,25,92,23],[76,29,92,27,"Error"],[76,34,92,32],[76,35,92,33],[76,60,92,58],[76,61,92,59],[76,62,92,60],[77,4,93,2],[78,4,95,2],[78,8,95,6],[78,9,95,7,"destroy"],[78,16,95,14],[78,17,95,15],[78,18,95,16],[79,2,96,0],[79,3,96,1],[80,2,98,0,"ChunkStream"],[80,13,98,11],[80,14,98,12,"prototype"],[80,23,98,21],[80,24,98,22,"destroy"],[80,31,98,29],[80,34,98,32],[80,46,98,44],[81,4,99,2],[81,8,99,6],[81,9,99,7],[81,13,99,11],[81,14,99,12,"_buffers"],[81,22,99,20],[81,24,99,22],[82,6,100,4],[83,4,101,2],[84,4,103,2],[84,8,103,6],[84,9,103,7,"writable"],[84,17,103,15],[84,20,103,18],[84,25,103,23],[85,4,104,2],[85,8,104,6],[85,9,104,7,"_reads"],[85,15,104,13],[85,18,104,16],[85,22,104,20],[86,4,105,2],[86,8,105,6],[86,9,105,7,"_buffers"],[86,17,105,15],[86,20,105,18],[86,24,105,22],[87,4,107,2],[87,8,107,6],[87,9,107,7,"emit"],[87,13,107,11],[87,14,107,12],[87,21,107,19],[87,22,107,20],[88,2,108,0],[88,3,108,1],[89,2,110,0,"ChunkStream"],[89,13,110,11],[89,14,110,12,"prototype"],[89,23,110,21],[89,24,110,22,"_processReadAllowingLess"],[89,48,110,46],[89,51,110,49],[89,61,110,59,"read"],[89,65,110,63],[89,67,110,65],[90,4,111,2],[91,4,112,2],[91,8,112,6],[91,9,112,7,"_reads"],[91,15,112,13],[91,16,112,14,"shift"],[91,21,112,19],[91,22,112,20],[91,23,112,21],[91,24,112,22],[91,25,112,23],[93,4,114,2],[94,4,115,2],[94,8,115,6,"smallerBuf"],[94,18,115,16],[94,21,115,19],[94,25,115,23],[94,26,115,24,"_buffers"],[94,34,115,32],[94,35,115,33],[94,36,115,34],[94,37,115,35],[96,4,117,2],[97,4,118,2],[97,8,118,6,"smallerBuf"],[97,18,118,16],[97,19,118,17,"length"],[97,25,118,23],[97,28,118,26,"read"],[97,32,118,30],[97,33,118,31,"length"],[97,39,118,37],[97,41,118,39],[98,6,119,4],[98,10,119,8],[98,11,119,9,"_buffered"],[98,20,119,18],[98,24,119,22,"read"],[98,28,119,26],[98,29,119,27,"length"],[98,35,119,33],[99,6,120,4],[99,10,120,8],[99,11,120,9,"_buffers"],[99,19,120,17],[99,20,120,18],[99,21,120,19],[99,22,120,20],[99,25,120,23,"smallerBuf"],[99,35,120,33],[99,36,120,34,"slice"],[99,41,120,39],[99,42,120,40,"read"],[99,46,120,44],[99,47,120,45,"length"],[99,53,120,51],[99,54,120,52],[100,6,122,4,"read"],[100,10,122,8],[100,11,122,9,"func"],[100,15,122,13],[100,16,122,14,"call"],[100,20,122,18],[100,21,122,19],[100,25,122,23],[100,27,122,25,"smallerBuf"],[100,37,122,35],[100,38,122,36,"slice"],[100,43,122,41],[100,44,122,42],[100,45,122,43],[100,47,122,45,"read"],[100,51,122,49],[100,52,122,50,"length"],[100,58,122,56],[100,59,122,57],[100,60,122,58],[101,4,123,2],[101,5,123,3],[101,11,123,9],[102,6,124,4],[103,6,125,4],[103,10,125,8],[103,11,125,9,"_buffered"],[103,20,125,18],[103,24,125,22,"smallerBuf"],[103,34,125,32],[103,35,125,33,"length"],[103,41,125,39],[104,6,126,4],[104,10,126,8],[104,11,126,9,"_buffers"],[104,19,126,17],[104,20,126,18,"shift"],[104,25,126,23],[104,26,126,24],[104,27,126,25],[104,28,126,26],[104,29,126,27],[106,6,128,4,"read"],[106,10,128,8],[106,11,128,9,"func"],[106,15,128,13],[106,16,128,14,"call"],[106,20,128,18],[106,21,128,19],[106,25,128,23],[106,27,128,25,"smallerBuf"],[106,37,128,35],[106,38,128,36],[107,4,129,2],[108,2,130,0],[108,3,130,1],[109,2,132,0,"ChunkStream"],[109,13,132,11],[109,14,132,12,"prototype"],[109,23,132,21],[109,24,132,22,"_processRead"],[109,36,132,34],[109,39,132,37],[109,49,132,47,"read"],[109,53,132,51],[109,55,132,53],[110,4,133,2],[110,8,133,6],[110,9,133,7,"_reads"],[110,15,133,13],[110,16,133,14,"shift"],[110,21,133,19],[110,22,133,20],[110,23,133,21],[110,24,133,22],[110,25,133,23],[112,4,135,2],[112,8,135,6,"pos"],[112,11,135,9],[112,14,135,12],[112,15,135,13],[113,4,136,2],[113,8,136,6,"count"],[113,13,136,11],[113,16,136,14],[113,17,136,15],[114,4,137,2],[114,8,137,6,"data"],[114,12,137,10],[114,15,137,13,"Buffer"],[114,21,137,19],[114,22,137,20,"alloc"],[114,27,137,25],[114,28,137,26,"read"],[114,32,137,30],[114,33,137,31,"length"],[114,39,137,37],[114,40,137,38],[116,4,139,2],[117,4,140,2],[117,11,140,9,"pos"],[117,14,140,12],[117,17,140,15,"read"],[117,21,140,19],[117,22,140,20,"length"],[117,28,140,26],[117,30,140,28],[118,6,141,4],[118,10,141,8,"buf"],[118,13,141,11],[118,16,141,14],[118,20,141,18],[118,21,141,19,"_buffers"],[118,29,141,27],[118,30,141,28,"count"],[118,35,141,33],[118,37,141,35],[118,38,141,36],[119,6,142,4],[119,10,142,8,"len"],[119,13,142,11],[119,16,142,14,"Math"],[119,20,142,18],[119,21,142,19,"min"],[119,24,142,22],[119,25,142,23,"buf"],[119,28,142,26],[119,29,142,27,"length"],[119,35,142,33],[119,37,142,35,"read"],[119,41,142,39],[119,42,142,40,"length"],[119,48,142,46],[119,51,142,49,"pos"],[119,54,142,52],[119,55,142,53],[120,6,144,4,"buf"],[120,9,144,7],[120,10,144,8,"copy"],[120,14,144,12],[120,15,144,13,"data"],[120,19,144,17],[120,21,144,19,"pos"],[120,24,144,22],[120,26,144,24],[120,27,144,25],[120,29,144,27,"len"],[120,32,144,30],[120,33,144,31],[121,6,145,4,"pos"],[121,9,145,7],[121,13,145,11,"len"],[121,16,145,14],[123,6,147,4],[124,6,148,4],[124,10,148,8,"len"],[124,13,148,11],[124,18,148,16,"buf"],[124,21,148,19],[124,22,148,20,"length"],[124,28,148,26],[124,30,148,28],[125,8,149,6],[125,12,149,10],[125,13,149,11,"_buffers"],[125,21,149,19],[125,22,149,20],[125,24,149,22,"count"],[125,29,149,27],[125,30,149,28],[125,33,149,31,"buf"],[125,36,149,34],[125,37,149,35,"slice"],[125,42,149,40],[125,43,149,41,"len"],[125,46,149,44],[125,47,149,45],[126,6,150,4],[127,4,151,2],[129,4,153,2],[130,4,154,2],[130,8,154,6,"count"],[130,13,154,11],[130,16,154,14],[130,17,154,15],[130,19,154,17],[131,6,155,4],[131,10,155,8],[131,11,155,9,"_buffers"],[131,19,155,17],[131,20,155,18,"splice"],[131,26,155,24],[131,27,155,25],[131,28,155,26],[131,30,155,28,"count"],[131,35,155,33],[131,36,155,34],[132,4,156,2],[133,4,158,2],[133,8,158,6],[133,9,158,7,"_buffered"],[133,18,158,16],[133,22,158,20,"read"],[133,26,158,24],[133,27,158,25,"length"],[133,33,158,31],[134,4,160,2,"read"],[134,8,160,6],[134,9,160,7,"func"],[134,13,160,11],[134,14,160,12,"call"],[134,18,160,16],[134,19,160,17],[134,23,160,21],[134,25,160,23,"data"],[134,29,160,27],[134,30,160,28],[135,2,161,0],[135,3,161,1],[136,2,163,0,"ChunkStream"],[136,13,163,11],[136,14,163,12,"prototype"],[136,23,163,21],[136,24,163,22,"_process"],[136,32,163,30],[136,35,163,33],[136,47,163,45],[137,4,164,2],[137,8,164,6],[138,6,165,4],[139,6,166,4],[139,13,166,11],[139,17,166,15],[139,18,166,16,"_buffered"],[139,27,166,25],[139,30,166,28],[139,31,166,29],[139,35,166,33],[139,39,166,37],[139,40,166,38,"_reads"],[139,46,166,44],[139,50,166,48],[139,54,166,52],[139,55,166,53,"_reads"],[139,61,166,59],[139,62,166,60,"length"],[139,68,166,66],[139,71,166,69],[139,72,166,70],[139,74,166,72],[140,8,167,6],[140,12,167,10,"read"],[140,16,167,14],[140,19,167,17],[140,23,167,21],[140,24,167,22,"_reads"],[140,30,167,28],[140,31,167,29],[140,32,167,30],[140,33,167,31],[142,8,169,6],[143,8,170,6],[143,12,170,10,"read"],[143,16,170,14],[143,17,170,15,"allowLess"],[143,26,170,24],[143,28,170,26],[144,10,171,8],[144,14,171,12],[144,15,171,13,"_processReadAllowingLess"],[144,39,171,37],[144,40,171,38,"read"],[144,44,171,42],[144,45,171,43],[145,8,172,6],[145,9,172,7],[145,15,172,13],[145,19,172,17],[145,23,172,21],[145,24,172,22,"_buffered"],[145,33,172,31],[145,37,172,35,"read"],[145,41,172,39],[145,42,172,40,"length"],[145,48,172,46],[145,50,172,48],[146,10,173,8],[148,10,175,8],[148,14,175,12],[148,15,175,13,"_processRead"],[148,27,175,25],[148,28,175,26,"read"],[148,32,175,30],[148,33,175,31],[149,8,176,6],[149,9,176,7],[149,15,176,13],[150,10,177,8],[151,10,178,8],[152,10,179,8],[153,8,180,6],[154,6,181,4],[155,6,183,4],[155,10,183,8],[155,14,183,12],[155,15,183,13,"_buffers"],[155,23,183,21],[155,27,183,25],[155,28,183,26],[155,32,183,30],[155,33,183,31,"writable"],[155,41,183,39],[155,43,183,41],[156,8,184,6],[156,12,184,10],[156,13,184,11,"_end"],[156,17,184,15],[156,18,184,16],[156,19,184,17],[157,6,185,4],[158,4,186,2],[158,5,186,3],[158,6,186,4],[158,13,186,11,"ex"],[158,15,186,13],[158,17,186,15],[159,6,187,4],[159,10,187,8],[159,11,187,9,"emit"],[159,15,187,13],[159,16,187,14],[159,23,187,21],[159,25,187,23,"ex"],[159,27,187,25],[159,28,187,26],[160,4,188,2],[161,2,189,0],[161,3,189,1],[162,0,189,2],[162,3]],"functionMap":{"names":["<global>","module.exports","ChunkStream.prototype.read","<anonymous>","ChunkStream.prototype.write","ChunkStream.prototype.end","ChunkStream.prototype._end","ChunkStream.prototype.destroy","ChunkStream.prototype._processReadAllowingLess","ChunkStream.prototype._processRead","ChunkStream.prototype._process"],"mappings":"AAA;oCCK;CDW;6BEG;ICQ;KDS;CFE;8BIE;CJwB;4BKE;CLmB;6BMI;CNM;gCOE;CPU;iDQE;CRoB;qCSE;CT6B;iCUE;CV0B"},"hasCjsExports":true},"type":"js/module"}]}