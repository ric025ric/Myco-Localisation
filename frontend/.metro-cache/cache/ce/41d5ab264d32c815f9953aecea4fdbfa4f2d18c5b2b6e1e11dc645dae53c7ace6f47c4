{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":184},"end":{"line":5,"column":40,"index":205}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}},{"name":"./sortRoutes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":21,"index":228},"end":{"line":6,"column":44,"index":251}}],"key":"AGgdHPlpLdteTt8GoJKs7TyzmuQ=","exportNames":["*"],"imports":1}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":14,"index":267},"end":{"line":7,"column":36,"index":289}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getServerManifest = getServerManifest;\n  exports.parseParameter = parseParameter;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const sortRoutes_1 = require(_dependencyMap[1], \"./sortRoutes\");\n  const url_1 = require(_dependencyMap[2], \"./utils/url\");\n  function isNotFoundRoute(route) {\n    return route.dynamic && route.dynamic[route.dynamic.length - 1].notFound;\n  }\n  function uniqueBy(arr, key) {\n    const seen = new Set();\n    return arr.filter(item => {\n      const id = key(item);\n      if (seen.has(id)) {\n        return false;\n      }\n      seen.add(id);\n      return true;\n    });\n  }\n  // Given a nested route tree, return a flattened array of all routes that can be matched.\n  function getServerManifest(route, options) {\n    function getFlatNodes(route, parentRoute = '') {\n      // Use a recreated route instead of contextKey because we duplicate nodes to support array syntax.\n      const absoluteRoute = [parentRoute, route.route].filter(Boolean).join('/');\n      if (route.children.length) {\n        return route.children.map(child => getFlatNodes(child, absoluteRoute)).flat();\n      }\n      // API Routes are handled differently to HTML routes because they have no nested behavior.\n      // An HTML route can be different based on parent segments due to layout routes, therefore multiple\n      // copies should be rendered. However, an API route is always the same regardless of parent segments.\n      let key;\n      if (route.type.includes('api')) {\n        key = (0, matchers_1.getContextKey)(route.contextKey).replace(/\\/index$/, '') ?? '/';\n      } else {\n        key = (0, matchers_1.getContextKey)(absoluteRoute).replace(/\\/index$/, '') ?? '/';\n      }\n      return [[key, '/' + absoluteRoute, route]];\n    }\n    // Remove duplicates from the runtime manifest which expands array syntax.\n    const flat = getFlatNodes(route).sort(([,, a], [,, b]) => (0, sortRoutes_1.sortRoutes)(b, a)).reverse();\n    const apiRoutes = uniqueBy(flat.filter(([,, route]) => route.type === 'api'), ([path]) => path);\n    const otherRoutes = uniqueBy(flat.filter(([,, route]) => route.type === 'route' || route.type === 'rewrite' && (route.methods === undefined || route.methods.includes('GET'))), ([path]) => path);\n    const redirects = uniqueBy(flat.filter(([,, route]) => route.type === 'redirect'), ([path]) => path).map(redirect => {\n      // TODO(@hassankhan): ENG-16577\n      // For external redirects, use `destinationContextKey` as the destination URL\n      if ((0, url_1.shouldLinkExternally)(redirect[2].destinationContextKey)) {\n        redirect[1] = redirect[2].destinationContextKey;\n      } else {\n        redirect[1] = flat.find(([,, route]) => route.contextKey === redirect[2].destinationContextKey)?.[0] ?? '/';\n      }\n      return redirect;\n    }).reverse();\n    const rewrites = uniqueBy(flat.filter(([,, route]) => route.type === 'rewrite'), ([path]) => path).map(rewrite => {\n      rewrite[1] = flat.find(([,, route]) => route.contextKey === rewrite[2].destinationContextKey)?.[0] ?? '/';\n      return rewrite;\n    }).reverse();\n    const standardRoutes = otherRoutes.filter(([,, route]) => !isNotFoundRoute(route));\n    const notFoundRoutes = otherRoutes.filter(([,, route]) => isNotFoundRoute(route));\n    const manifest = {\n      apiRoutes: getMatchableManifestForPaths(apiRoutes),\n      htmlRoutes: getMatchableManifestForPaths(standardRoutes),\n      notFoundRoutes: getMatchableManifestForPaths(notFoundRoutes),\n      redirects: getMatchableManifestForPaths(redirects),\n      rewrites: getMatchableManifestForPaths(rewrites)\n    };\n    if (route.middleware) {\n      manifest.middleware = {\n        file: route.middleware.contextKey\n      };\n    }\n    if (options?.headers) {\n      manifest.headers = options.headers;\n    }\n    return manifest;\n  }\n  function getMatchableManifestForPaths(paths) {\n    return paths.map(([normalizedRoutePath, absoluteRoute, node]) => {\n      const matcher = getNamedRouteRegex(normalizedRoutePath, absoluteRoute, node.contextKey);\n      if (node.generated) {\n        matcher.generated = true;\n      }\n      if (node.permanent) {\n        matcher.permanent = true;\n      }\n      if (node.methods) {\n        matcher.methods = node.methods;\n      }\n      return matcher;\n    });\n  }\n  function getNamedRouteRegex(normalizedRoute, page, file) {\n    const result = getNamedParametrizedRoute(normalizedRoute);\n    return {\n      file,\n      page,\n      namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`,\n      routeKeys: result.routeKeys\n    };\n  }\n  /**\n   * Builds a function to generate a minimal routeKey using only a-z and minimal\n   * number of characters.\n   */\n  function buildGetSafeRouteKey() {\n    let currentCharCode = 96; // Starting one before 'a' to make the increment logic simpler\n    let currentLength = 1;\n    return () => {\n      let result = '';\n      let incrementNext = true;\n      // Iterate from right to left to build the key\n      for (let i = 0; i < currentLength; i++) {\n        if (incrementNext) {\n          currentCharCode++;\n          if (currentCharCode > 122) {\n            currentCharCode = 97; // Reset to 'a'\n            incrementNext = true; // Continue to increment the next character\n          } else {\n            incrementNext = false;\n          }\n        }\n        result = String.fromCharCode(currentCharCode) + result;\n      }\n      // If all characters are 'z', increase the length of the key\n      if (incrementNext) {\n        currentLength++;\n        currentCharCode = 96; // This will make the next key start with 'a'\n      }\n      return result;\n    };\n  }\n  function removeTrailingSlash(route) {\n    return route.replace(/\\/$/, '') || '/';\n  }\n  function getNamedParametrizedRoute(route) {\n    const segments = removeTrailingSlash(route).slice(1).split('/');\n    const getSafeRouteKey = buildGetSafeRouteKey();\n    const routeKeys = {};\n    return {\n      namedParameterizedRoute: segments.map((segment, index) => {\n        if (segment === '+not-found' && index === segments.length - 1) {\n          segment = '[...not-found]';\n        }\n        if (/^\\[.*\\]$/.test(segment)) {\n          const {\n            name,\n            optional,\n            repeat\n          } = parseParameter(segment);\n          // replace any non-word characters since they can break\n          // the named regex\n          let cleanedKey = name.replace(/\\W/g, '');\n          let invalidKey = false;\n          // check if the key is still invalid and fallback to using a known\n          // safe key\n          if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n            invalidKey = true;\n          }\n          if (!isNaN(parseInt(cleanedKey.slice(0, 1), 10))) {\n            invalidKey = true;\n          }\n          // Prevent duplicates after sanitizing the key\n          if (cleanedKey in routeKeys) {\n            invalidKey = true;\n          }\n          if (invalidKey) {\n            cleanedKey = getSafeRouteKey();\n          }\n          routeKeys[cleanedKey] = name;\n          return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n        } else if (/^\\(.*\\)$/.test(segment)) {\n          const groupName = (0, matchers_1.matchGroupName)(segment).split(',').map(group => group.trim()).filter(Boolean);\n          if (groupName.length > 1) {\n            const optionalSegment = `\\\\((?:${groupName.map(escapeStringRegexp).join('|')})\\\\)`;\n            // Make section optional\n            return `(?:/${optionalSegment})?`;\n          } else {\n            // Use simpler regex for single groups\n            return `(?:/${escapeStringRegexp(segment)})?`;\n          }\n        } else {\n          return `/${escapeStringRegexp(segment)}`;\n        }\n      }).join(''),\n      routeKeys\n    };\n  }\n  // regexp is based on https://github.com/sindresorhus/escape-string-regexp\n  const reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\n  const reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\n  function escapeStringRegexp(str) {\n    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n    if (reHasRegExp.test(str)) {\n      return str.replace(reReplaceRegExp, '\\\\$&');\n    }\n    return str;\n  }\n  function parseParameter(param) {\n    let repeat = false;\n    let optional = false;\n    let name = param;\n    if (/^\\[.*\\]$/.test(name)) {\n      optional = true;\n      name = name.slice(1, -1);\n    }\n    if (/^\\.\\.\\./.test(name)) {\n      repeat = true;\n      name = name.slice(3);\n    }\n    return {\n      name,\n      repeat,\n      optional\n    };\n  }\n});","lineCount":221,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getServerManifest"],[7,27,3,25],[7,30,3,28,"getServerManifest"],[7,47,3,45],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"parseParameter"],[8,24,4,22],[8,27,4,25,"parseParameter"],[8,41,4,39],[9,2,5,0],[9,8,5,6,"matchers_1"],[9,18,5,16],[9,21,5,19,"require"],[9,28,5,26],[9,29,5,26,"_dependencyMap"],[9,43,5,26],[9,60,5,39],[9,61,5,40],[10,2,6,0],[10,8,6,6,"sortRoutes_1"],[10,20,6,18],[10,23,6,21,"require"],[10,30,6,28],[10,31,6,28,"_dependencyMap"],[10,45,6,28],[10,64,6,43],[10,65,6,44],[11,2,7,0],[11,8,7,6,"url_1"],[11,13,7,11],[11,16,7,14,"require"],[11,23,7,21],[11,24,7,21,"_dependencyMap"],[11,38,7,21],[11,56,7,35],[11,57,7,36],[12,2,8,0],[12,11,8,9,"isNotFoundRoute"],[12,26,8,24,"isNotFoundRoute"],[12,27,8,25,"route"],[12,32,8,30],[12,34,8,32],[13,4,9,4],[13,11,9,11,"route"],[13,16,9,16],[13,17,9,17,"dynamic"],[13,24,9,24],[13,28,9,28,"route"],[13,33,9,33],[13,34,9,34,"dynamic"],[13,41,9,41],[13,42,9,42,"route"],[13,47,9,47],[13,48,9,48,"dynamic"],[13,55,9,55],[13,56,9,56,"length"],[13,62,9,62],[13,65,9,65],[13,66,9,66],[13,67,9,67],[13,68,9,68,"notFound"],[13,76,9,76],[14,2,10,0],[15,2,11,0],[15,11,11,9,"uniqueBy"],[15,19,11,17,"uniqueBy"],[15,20,11,18,"arr"],[15,23,11,21],[15,25,11,23,"key"],[15,28,11,26],[15,30,11,28],[16,4,12,4],[16,10,12,10,"seen"],[16,14,12,14],[16,17,12,17],[16,21,12,21,"Set"],[16,24,12,24],[16,25,12,25],[16,26,12,26],[17,4,13,4],[17,11,13,11,"arr"],[17,14,13,14],[17,15,13,15,"filter"],[17,21,13,21],[17,22,13,23,"item"],[17,26,13,27],[17,30,13,32],[18,6,14,8],[18,12,14,14,"id"],[18,14,14,16],[18,17,14,19,"key"],[18,20,14,22],[18,21,14,23,"item"],[18,25,14,27],[18,26,14,28],[19,6,15,8],[19,10,15,12,"seen"],[19,14,15,16],[19,15,15,17,"has"],[19,18,15,20],[19,19,15,21,"id"],[19,21,15,23],[19,22,15,24],[19,24,15,26],[20,8,16,12],[20,15,16,19],[20,20,16,24],[21,6,17,8],[22,6,18,8,"seen"],[22,10,18,12],[22,11,18,13,"add"],[22,14,18,16],[22,15,18,17,"id"],[22,17,18,19],[22,18,18,20],[23,6,19,8],[23,13,19,15],[23,17,19,19],[24,4,20,4],[24,5,20,5],[24,6,20,6],[25,2,21,0],[26,2,22,0],[27,2,23,0],[27,11,23,9,"getServerManifest"],[27,28,23,26,"getServerManifest"],[27,29,23,27,"route"],[27,34,23,32],[27,36,23,34,"options"],[27,43,23,41],[27,45,23,43],[28,4,24,4],[28,13,24,13,"getFlatNodes"],[28,25,24,25,"getFlatNodes"],[28,26,24,26,"route"],[28,31,24,31],[28,33,24,33,"parentRoute"],[28,44,24,44],[28,47,24,47],[28,49,24,49],[28,51,24,51],[29,6,25,8],[30,6,26,8],[30,12,26,14,"absoluteRoute"],[30,25,26,27],[30,28,26,30],[30,29,26,31,"parentRoute"],[30,40,26,42],[30,42,26,44,"route"],[30,47,26,49],[30,48,26,50,"route"],[30,53,26,55],[30,54,26,56],[30,55,26,57,"filter"],[30,61,26,63],[30,62,26,64,"Boolean"],[30,69,26,71],[30,70,26,72],[30,71,26,73,"join"],[30,75,26,77],[30,76,26,78],[30,79,26,81],[30,80,26,82],[31,6,27,8],[31,10,27,12,"route"],[31,15,27,17],[31,16,27,18,"children"],[31,24,27,26],[31,25,27,27,"length"],[31,31,27,33],[31,33,27,35],[32,8,28,12],[32,15,28,19,"route"],[32,20,28,24],[32,21,28,25,"children"],[32,29,28,33],[32,30,28,34,"map"],[32,33,28,37],[32,34,28,39,"child"],[32,39,28,44],[32,43,28,49,"getFlatNodes"],[32,55,28,61],[32,56,28,62,"child"],[32,61,28,67],[32,63,28,69,"absoluteRoute"],[32,76,28,82],[32,77,28,83],[32,78,28,84],[32,79,28,85,"flat"],[32,83,28,89],[32,84,28,90],[32,85,28,91],[33,6,29,8],[34,6,30,8],[35,6,31,8],[36,6,32,8],[37,6,33,8],[37,10,33,12,"key"],[37,13,33,15],[38,6,34,8],[38,10,34,12,"route"],[38,15,34,17],[38,16,34,18,"type"],[38,20,34,22],[38,21,34,23,"includes"],[38,29,34,31],[38,30,34,32],[38,35,34,37],[38,36,34,38],[38,38,34,40],[39,8,35,12,"key"],[39,11,35,15],[39,14,35,18],[39,15,35,19],[39,16,35,20],[39,18,35,22,"matchers_1"],[39,28,35,32],[39,29,35,33,"getContextKey"],[39,42,35,46],[39,44,35,48,"route"],[39,49,35,53],[39,50,35,54,"contextKey"],[39,60,35,64],[39,61,35,65],[39,62,35,66,"replace"],[39,69,35,73],[39,70,35,74],[39,80,35,84],[39,82,35,86],[39,84,35,88],[39,85,35,89],[39,89,35,93],[39,92,35,96],[40,6,36,8],[40,7,36,9],[40,13,37,13],[41,8,38,12,"key"],[41,11,38,15],[41,14,38,18],[41,15,38,19],[41,16,38,20],[41,18,38,22,"matchers_1"],[41,28,38,32],[41,29,38,33,"getContextKey"],[41,42,38,46],[41,44,38,48,"absoluteRoute"],[41,57,38,61],[41,58,38,62],[41,59,38,63,"replace"],[41,66,38,70],[41,67,38,71],[41,77,38,81],[41,79,38,83],[41,81,38,85],[41,82,38,86],[41,86,38,90],[41,89,38,93],[42,6,39,8],[43,6,40,8],[43,13,40,15],[43,14,40,16],[43,15,40,17,"key"],[43,18,40,20],[43,20,40,22],[43,23,40,25],[43,26,40,28,"absoluteRoute"],[43,39,40,41],[43,41,40,43,"route"],[43,46,40,48],[43,47,40,49],[43,48,40,50],[44,4,41,4],[45,4,42,4],[46,4,43,4],[46,10,43,10,"flat"],[46,14,43,14],[46,17,43,17,"getFlatNodes"],[46,29,43,29],[46,30,43,30,"route"],[46,35,43,35],[46,36,43,36],[46,37,44,9,"sort"],[46,41,44,13],[46,42,44,14],[46,43,44,15],[46,47,44,20,"a"],[46,48,44,21],[46,49,44,22],[46,51,44,24],[46,55,44,29,"b"],[46,56,44,30],[46,57,44,31],[46,62,44,36],[46,63,44,37],[46,64,44,38],[46,66,44,40,"sortRoutes_1"],[46,78,44,52],[46,79,44,53,"sortRoutes"],[46,89,44,63],[46,91,44,65,"b"],[46,92,44,66],[46,94,44,68,"a"],[46,95,44,69],[46,96,44,70],[46,97,44,71],[46,98,45,9,"reverse"],[46,105,45,16],[46,106,45,17],[46,107,45,18],[47,4,46,4],[47,10,46,10,"apiRoutes"],[47,19,46,19],[47,22,46,22,"uniqueBy"],[47,30,46,30],[47,31,46,31,"flat"],[47,35,46,35],[47,36,46,36,"filter"],[47,42,46,42],[47,43,46,43],[47,44,46,44],[47,48,46,49,"route"],[47,53,46,54],[47,54,46,55],[47,59,46,60,"route"],[47,64,46,65],[47,65,46,66,"type"],[47,69,46,70],[47,74,46,75],[47,79,46,80],[47,80,46,81],[47,82,46,83],[47,83,46,84],[47,84,46,85,"path"],[47,88,46,89],[47,89,46,90],[47,94,46,95,"path"],[47,98,46,99],[47,99,46,100],[48,4,47,4],[48,10,47,10,"otherRoutes"],[48,21,47,21],[48,24,47,24,"uniqueBy"],[48,32,47,32],[48,33,47,33,"flat"],[48,37,47,37],[48,38,47,38,"filter"],[48,44,47,44],[48,45,47,45],[48,46,47,46],[48,50,47,51,"route"],[48,55,47,56],[48,56,47,57],[48,61,47,62,"route"],[48,66,47,67],[48,67,47,68,"type"],[48,71,47,72],[48,76,47,77],[48,83,47,84],[48,87,48,9,"route"],[48,92,48,14],[48,93,48,15,"type"],[48,97,48,19],[48,102,48,24],[48,111,48,33],[48,116,48,38,"route"],[48,121,48,43],[48,122,48,44,"methods"],[48,129,48,51],[48,134,48,56,"undefined"],[48,143,48,65],[48,147,48,69,"route"],[48,152,48,74],[48,153,48,75,"methods"],[48,160,48,82],[48,161,48,83,"includes"],[48,169,48,91],[48,170,48,92],[48,175,48,97],[48,176,48,98],[48,177,48,100],[48,178,48,101],[48,180,48,103],[48,181,48,104],[48,182,48,105,"path"],[48,186,48,109],[48,187,48,110],[48,192,48,115,"path"],[48,196,48,119],[48,197,48,120],[49,4,49,4],[49,10,49,10,"redirects"],[49,19,49,19],[49,22,49,22,"uniqueBy"],[49,30,49,30],[49,31,49,31,"flat"],[49,35,49,35],[49,36,49,36,"filter"],[49,42,49,42],[49,43,49,43],[49,44,49,44],[49,48,49,49,"route"],[49,53,49,54],[49,54,49,55],[49,59,49,60,"route"],[49,64,49,65],[49,65,49,66,"type"],[49,69,49,70],[49,74,49,75],[49,84,49,85],[49,85,49,86],[49,87,49,88],[49,88,49,89],[49,89,49,90,"path"],[49,93,49,94],[49,94,49,95],[49,99,49,100,"path"],[49,103,49,104],[49,104,49,105],[49,105,50,9,"map"],[49,108,50,12],[49,109,50,14,"redirect"],[49,117,50,22],[49,121,50,27],[50,6,51,8],[51,6,52,8],[52,6,53,8],[52,10,53,12],[52,11,53,13],[52,12,53,14],[52,14,53,16,"url_1"],[52,19,53,21],[52,20,53,22,"shouldLinkExternally"],[52,40,53,42],[52,42,53,44,"redirect"],[52,50,53,52],[52,51,53,53],[52,52,53,54],[52,53,53,55],[52,54,53,56,"destinationContextKey"],[52,75,53,77],[52,76,53,78],[52,78,53,80],[53,8,54,12,"redirect"],[53,16,54,20],[53,17,54,21],[53,18,54,22],[53,19,54,23],[53,22,54,26,"redirect"],[53,30,54,34],[53,31,54,35],[53,32,54,36],[53,33,54,37],[53,34,54,38,"destinationContextKey"],[53,55,54,59],[54,6,55,8],[54,7,55,9],[54,13,56,13],[55,8,57,12,"redirect"],[55,16,57,20],[55,17,57,21],[55,18,57,22],[55,19,57,23],[55,22,58,16,"flat"],[55,26,58,20],[55,27,58,21,"find"],[55,31,58,25],[55,32,58,26],[55,33,58,27],[55,37,58,32,"route"],[55,42,58,37],[55,43,58,38],[55,48,58,43,"route"],[55,53,58,48],[55,54,58,49,"contextKey"],[55,64,58,59],[55,69,58,64,"redirect"],[55,77,58,72],[55,78,58,73],[55,79,58,74],[55,80,58,75],[55,81,58,76,"destinationContextKey"],[55,102,58,97],[55,103,58,98],[55,106,58,101],[55,107,58,102],[55,108,58,103],[55,112,59,20],[55,115,59,23],[56,6,60,8],[57,6,61,8],[57,13,61,15,"redirect"],[57,21,61,23],[58,4,62,4],[58,5,62,5],[58,6,62,6],[58,7,63,9,"reverse"],[58,14,63,16],[58,15,63,17],[58,16,63,18],[59,4,64,4],[59,10,64,10,"rewrites"],[59,18,64,18],[59,21,64,21,"uniqueBy"],[59,29,64,29],[59,30,64,30,"flat"],[59,34,64,34],[59,35,64,35,"filter"],[59,41,64,41],[59,42,64,42],[59,43,64,43],[59,47,64,48,"route"],[59,52,64,53],[59,53,64,54],[59,58,64,59,"route"],[59,63,64,64],[59,64,64,65,"type"],[59,68,64,69],[59,73,64,74],[59,82,64,83],[59,83,64,84],[59,85,64,86],[59,86,64,87],[59,87,64,88,"path"],[59,91,64,92],[59,92,64,93],[59,97,64,98,"path"],[59,101,64,102],[59,102,64,103],[59,103,65,9,"map"],[59,106,65,12],[59,107,65,14,"rewrite"],[59,114,65,21],[59,118,65,26],[60,6,66,8,"rewrite"],[60,13,66,15],[60,14,66,16],[60,15,66,17],[60,16,66,18],[60,19,67,12,"flat"],[60,23,67,16],[60,24,67,17,"find"],[60,28,67,21],[60,29,67,22],[60,30,67,23],[60,34,67,28,"route"],[60,39,67,33],[60,40,67,34],[60,45,67,39,"route"],[60,50,67,44],[60,51,67,45,"contextKey"],[60,61,67,55],[60,66,67,60,"rewrite"],[60,73,67,67],[60,74,67,68],[60,75,67,69],[60,76,67,70],[60,77,67,71,"destinationContextKey"],[60,98,67,92],[60,99,67,93],[60,102,67,96],[60,103,67,97],[60,104,67,98],[60,108,68,16],[60,111,68,19],[61,6,69,8],[61,13,69,15,"rewrite"],[61,20,69,22],[62,4,70,4],[62,5,70,5],[62,6,70,6],[62,7,71,9,"reverse"],[62,14,71,16],[62,15,71,17],[62,16,71,18],[63,4,72,4],[63,10,72,10,"standardRoutes"],[63,24,72,24],[63,27,72,27,"otherRoutes"],[63,38,72,38],[63,39,72,39,"filter"],[63,45,72,45],[63,46,72,46],[63,47,72,47],[63,51,72,52,"route"],[63,56,72,57],[63,57,72,58],[63,62,72,63],[63,63,72,64,"isNotFoundRoute"],[63,78,72,79],[63,79,72,80,"route"],[63,84,72,85],[63,85,72,86],[63,86,72,87],[64,4,73,4],[64,10,73,10,"notFoundRoutes"],[64,24,73,24],[64,27,73,27,"otherRoutes"],[64,38,73,38],[64,39,73,39,"filter"],[64,45,73,45],[64,46,73,46],[64,47,73,47],[64,51,73,52,"route"],[64,56,73,57],[64,57,73,58],[64,62,73,63,"isNotFoundRoute"],[64,77,73,78],[64,78,73,79,"route"],[64,83,73,84],[64,84,73,85],[64,85,73,86],[65,4,74,4],[65,10,74,10,"manifest"],[65,18,74,18],[65,21,74,21],[66,6,75,8,"apiRoutes"],[66,15,75,17],[66,17,75,19,"getMatchableManifestForPaths"],[66,45,75,47],[66,46,75,48,"apiRoutes"],[66,55,75,57],[66,56,75,58],[67,6,76,8,"htmlRoutes"],[67,16,76,18],[67,18,76,20,"getMatchableManifestForPaths"],[67,46,76,48],[67,47,76,49,"standardRoutes"],[67,61,76,63],[67,62,76,64],[68,6,77,8,"notFoundRoutes"],[68,20,77,22],[68,22,77,24,"getMatchableManifestForPaths"],[68,50,77,52],[68,51,77,53,"notFoundRoutes"],[68,65,77,67],[68,66,77,68],[69,6,78,8,"redirects"],[69,15,78,17],[69,17,78,19,"getMatchableManifestForPaths"],[69,45,78,47],[69,46,78,48,"redirects"],[69,55,78,57],[69,56,78,58],[70,6,79,8,"rewrites"],[70,14,79,16],[70,16,79,18,"getMatchableManifestForPaths"],[70,44,79,46],[70,45,79,47,"rewrites"],[70,53,79,55],[71,4,80,4],[71,5,80,5],[72,4,81,4],[72,8,81,8,"route"],[72,13,81,13],[72,14,81,14,"middleware"],[72,24,81,24],[72,26,81,26],[73,6,82,8,"manifest"],[73,14,82,16],[73,15,82,17,"middleware"],[73,25,82,27],[73,28,82,30],[74,8,83,12,"file"],[74,12,83,16],[74,14,83,18,"route"],[74,19,83,23],[74,20,83,24,"middleware"],[74,30,83,34],[74,31,83,35,"contextKey"],[75,6,84,8],[75,7,84,9],[76,4,85,4],[77,4,86,4],[77,8,86,8,"options"],[77,15,86,15],[77,17,86,17,"headers"],[77,24,86,24],[77,26,86,26],[78,6,87,8,"manifest"],[78,14,87,16],[78,15,87,17,"headers"],[78,22,87,24],[78,25,87,27,"options"],[78,32,87,34],[78,33,87,35,"headers"],[78,40,87,42],[79,4,88,4],[80,4,89,4],[80,11,89,11,"manifest"],[80,19,89,19],[81,2,90,0],[82,2,91,0],[82,11,91,9,"getMatchableManifestForPaths"],[82,39,91,37,"getMatchableManifestForPaths"],[82,40,91,38,"paths"],[82,45,91,43],[82,47,91,45],[83,4,92,4],[83,11,92,11,"paths"],[83,16,92,16],[83,17,92,17,"map"],[83,20,92,20],[83,21,92,21],[83,22,92,22],[83,23,92,23,"normalizedRoutePath"],[83,42,92,42],[83,44,92,44,"absoluteRoute"],[83,57,92,57],[83,59,92,59,"node"],[83,63,92,63],[83,64,92,64],[83,69,92,69],[84,6,93,8],[84,12,93,14,"matcher"],[84,19,93,21],[84,22,93,24,"getNamedRouteRegex"],[84,40,93,42],[84,41,93,43,"normalizedRoutePath"],[84,60,93,62],[84,62,93,64,"absoluteRoute"],[84,75,93,77],[84,77,93,79,"node"],[84,81,93,83],[84,82,93,84,"contextKey"],[84,92,93,94],[84,93,93,95],[85,6,94,8],[85,10,94,12,"node"],[85,14,94,16],[85,15,94,17,"generated"],[85,24,94,26],[85,26,94,28],[86,8,95,12,"matcher"],[86,15,95,19],[86,16,95,20,"generated"],[86,25,95,29],[86,28,95,32],[86,32,95,36],[87,6,96,8],[88,6,97,8],[88,10,97,12,"node"],[88,14,97,16],[88,15,97,17,"permanent"],[88,24,97,26],[88,26,97,28],[89,8,98,12,"matcher"],[89,15,98,19],[89,16,98,20,"permanent"],[89,25,98,29],[89,28,98,32],[89,32,98,36],[90,6,99,8],[91,6,100,8],[91,10,100,12,"node"],[91,14,100,16],[91,15,100,17,"methods"],[91,22,100,24],[91,24,100,26],[92,8,101,12,"matcher"],[92,15,101,19],[92,16,101,20,"methods"],[92,23,101,27],[92,26,101,30,"node"],[92,30,101,34],[92,31,101,35,"methods"],[92,38,101,42],[93,6,102,8],[94,6,103,8],[94,13,103,15,"matcher"],[94,20,103,22],[95,4,104,4],[95,5,104,5],[95,6,104,6],[96,2,105,0],[97,2,106,0],[97,11,106,9,"getNamedRouteRegex"],[97,29,106,27,"getNamedRouteRegex"],[97,30,106,28,"normalizedRoute"],[97,45,106,43],[97,47,106,45,"page"],[97,51,106,49],[97,53,106,51,"file"],[97,57,106,55],[97,59,106,57],[98,4,107,4],[98,10,107,10,"result"],[98,16,107,16],[98,19,107,19,"getNamedParametrizedRoute"],[98,44,107,44],[98,45,107,45,"normalizedRoute"],[98,60,107,60],[98,61,107,61],[99,4,108,4],[99,11,108,11],[100,6,109,8,"file"],[100,10,109,12],[101,6,110,8,"page"],[101,10,110,12],[102,6,111,8,"namedRegex"],[102,16,111,18],[102,18,111,20],[102,22,111,24,"result"],[102,28,111,30],[102,29,111,31,"namedParameterizedRoute"],[102,52,111,54],[102,61,111,63],[103,6,112,8,"routeKeys"],[103,15,112,17],[103,17,112,19,"result"],[103,23,112,25],[103,24,112,26,"routeKeys"],[104,4,113,4],[104,5,113,5],[105,2,114,0],[106,2,115,0],[107,0,116,0],[108,0,117,0],[109,0,118,0],[110,2,119,0],[110,11,119,9,"buildGetSafeRouteKey"],[110,31,119,29,"buildGetSafeRouteKey"],[110,32,119,29],[110,34,119,32],[111,4,120,4],[111,8,120,8,"currentCharCode"],[111,23,120,23],[111,26,120,26],[111,28,120,28],[111,29,120,29],[111,30,120,30],[112,4,121,4],[112,8,121,8,"currentLength"],[112,21,121,21],[112,24,121,24],[112,25,121,25],[113,4,122,4],[113,11,122,11],[113,17,122,17],[114,6,123,8],[114,10,123,12,"result"],[114,16,123,18],[114,19,123,21],[114,21,123,23],[115,6,124,8],[115,10,124,12,"incrementNext"],[115,23,124,25],[115,26,124,28],[115,30,124,32],[116,6,125,8],[117,6,126,8],[117,11,126,13],[117,15,126,17,"i"],[117,16,126,18],[117,19,126,21],[117,20,126,22],[117,22,126,24,"i"],[117,23,126,25],[117,26,126,28,"currentLength"],[117,39,126,41],[117,41,126,43,"i"],[117,42,126,44],[117,44,126,46],[117,46,126,48],[118,8,127,12],[118,12,127,16,"incrementNext"],[118,25,127,29],[118,27,127,31],[119,10,128,16,"currentCharCode"],[119,25,128,31],[119,27,128,33],[120,10,129,16],[120,14,129,20,"currentCharCode"],[120,29,129,35],[120,32,129,38],[120,35,129,41],[120,37,129,43],[121,12,130,20,"currentCharCode"],[121,27,130,35],[121,30,130,38],[121,32,130,40],[121,33,130,41],[121,34,130,42],[122,12,131,20,"incrementNext"],[122,25,131,33],[122,28,131,36],[122,32,131,40],[122,33,131,41],[122,34,131,42],[123,10,132,16],[123,11,132,17],[123,17,133,21],[124,12,134,20,"incrementNext"],[124,25,134,33],[124,28,134,36],[124,33,134,41],[125,10,135,16],[126,8,136,12],[127,8,137,12,"result"],[127,14,137,18],[127,17,137,21,"String"],[127,23,137,27],[127,24,137,28,"fromCharCode"],[127,36,137,40],[127,37,137,41,"currentCharCode"],[127,52,137,56],[127,53,137,57],[127,56,137,60,"result"],[127,62,137,66],[128,6,138,8],[129,6,139,8],[130,6,140,8],[130,10,140,12,"incrementNext"],[130,23,140,25],[130,25,140,27],[131,8,141,12,"currentLength"],[131,21,141,25],[131,23,141,27],[132,8,142,12,"currentCharCode"],[132,23,142,27],[132,26,142,30],[132,28,142,32],[132,29,142,33],[132,30,142,34],[133,6,143,8],[134,6,144,8],[134,13,144,15,"result"],[134,19,144,21],[135,4,145,4],[135,5,145,5],[136,2,146,0],[137,2,147,0],[137,11,147,9,"removeTrailingSlash"],[137,30,147,28,"removeTrailingSlash"],[137,31,147,29,"route"],[137,36,147,34],[137,38,147,36],[138,4,148,4],[138,11,148,11,"route"],[138,16,148,16],[138,17,148,17,"replace"],[138,24,148,24],[138,25,148,25],[138,30,148,30],[138,32,148,32],[138,34,148,34],[138,35,148,35],[138,39,148,39],[138,42,148,42],[139,2,149,0],[140,2,150,0],[140,11,150,9,"getNamedParametrizedRoute"],[140,36,150,34,"getNamedParametrizedRoute"],[140,37,150,35,"route"],[140,42,150,40],[140,44,150,42],[141,4,151,4],[141,10,151,10,"segments"],[141,18,151,18],[141,21,151,21,"removeTrailingSlash"],[141,40,151,40],[141,41,151,41,"route"],[141,46,151,46],[141,47,151,47],[141,48,151,48,"slice"],[141,53,151,53],[141,54,151,54],[141,55,151,55],[141,56,151,56],[141,57,151,57,"split"],[141,62,151,62],[141,63,151,63],[141,66,151,66],[141,67,151,67],[142,4,152,4],[142,10,152,10,"getSafeRouteKey"],[142,25,152,25],[142,28,152,28,"buildGetSafeRouteKey"],[142,48,152,48],[142,49,152,49],[142,50,152,50],[143,4,153,4],[143,10,153,10,"routeKeys"],[143,19,153,19],[143,22,153,22],[143,23,153,23],[143,24,153,24],[144,4,154,4],[144,11,154,11],[145,6,155,8,"namedParameterizedRoute"],[145,29,155,31],[145,31,155,33,"segments"],[145,39,155,41],[145,40,156,13,"map"],[145,43,156,16],[145,44,156,17],[145,45,156,18,"segment"],[145,52,156,25],[145,54,156,27,"index"],[145,59,156,32],[145,64,156,37],[146,8,157,12],[146,12,157,16,"segment"],[146,19,157,23],[146,24,157,28],[146,36,157,40],[146,40,157,44,"index"],[146,45,157,49],[146,50,157,54,"segments"],[146,58,157,62],[146,59,157,63,"length"],[146,65,157,69],[146,68,157,72],[146,69,157,73],[146,71,157,75],[147,10,158,16,"segment"],[147,17,158,23],[147,20,158,26],[147,36,158,42],[148,8,159,12],[149,8,160,12],[149,12,160,16],[149,22,160,26],[149,23,160,27,"test"],[149,27,160,31],[149,28,160,32,"segment"],[149,35,160,39],[149,36,160,40],[149,38,160,42],[150,10,161,16],[150,16,161,22],[151,12,161,24,"name"],[151,16,161,28],[152,12,161,30,"optional"],[152,20,161,38],[153,12,161,40,"repeat"],[154,10,161,47],[154,11,161,48],[154,14,161,51,"parseParameter"],[154,28,161,65],[154,29,161,66,"segment"],[154,36,161,73],[154,37,161,74],[155,10,162,16],[156,10,163,16],[157,10,164,16],[157,14,164,20,"cleanedKey"],[157,24,164,30],[157,27,164,33,"name"],[157,31,164,37],[157,32,164,38,"replace"],[157,39,164,45],[157,40,164,46],[157,45,164,51],[157,47,164,53],[157,49,164,55],[157,50,164,56],[158,10,165,16],[158,14,165,20,"invalidKey"],[158,24,165,30],[158,27,165,33],[158,32,165,38],[159,10,166,16],[160,10,167,16],[161,10,168,16],[161,14,168,20,"cleanedKey"],[161,24,168,30],[161,25,168,31,"length"],[161,31,168,37],[161,36,168,42],[161,37,168,43],[161,41,168,47,"cleanedKey"],[161,51,168,57],[161,52,168,58,"length"],[161,58,168,64],[161,61,168,67],[161,63,168,69],[161,65,168,71],[162,12,169,20,"invalidKey"],[162,22,169,30],[162,25,169,33],[162,29,169,37],[163,10,170,16],[164,10,171,16],[164,14,171,20],[164,15,171,21,"isNaN"],[164,20,171,26],[164,21,171,27,"parseInt"],[164,29,171,35],[164,30,171,36,"cleanedKey"],[164,40,171,46],[164,41,171,47,"slice"],[164,46,171,52],[164,47,171,53],[164,48,171,54],[164,50,171,56],[164,51,171,57],[164,52,171,58],[164,54,171,60],[164,56,171,62],[164,57,171,63],[164,58,171,64],[164,60,171,66],[165,12,172,20,"invalidKey"],[165,22,172,30],[165,25,172,33],[165,29,172,37],[166,10,173,16],[167,10,174,16],[168,10,175,16],[168,14,175,20,"cleanedKey"],[168,24,175,30],[168,28,175,34,"routeKeys"],[168,37,175,43],[168,39,175,45],[169,12,176,20,"invalidKey"],[169,22,176,30],[169,25,176,33],[169,29,176,37],[170,10,177,16],[171,10,178,16],[171,14,178,20,"invalidKey"],[171,24,178,30],[171,26,178,32],[172,12,179,20,"cleanedKey"],[172,22,179,30],[172,25,179,33,"getSafeRouteKey"],[172,40,179,48],[172,41,179,49],[172,42,179,50],[173,10,180,16],[174,10,181,16,"routeKeys"],[174,19,181,25],[174,20,181,26,"cleanedKey"],[174,30,181,36],[174,31,181,37],[174,34,181,40,"name"],[174,38,181,44],[175,10,182,16],[175,17,182,23,"repeat"],[175,23,182,29],[175,26,183,22,"optional"],[175,34,183,30],[175,37,184,26],[175,47,184,36,"cleanedKey"],[175,57,184,46],[175,66,184,55],[175,69,185,26],[175,76,185,33,"cleanedKey"],[175,86,185,43],[175,93,185,50],[175,96,186,22],[175,103,186,29,"cleanedKey"],[175,113,186,39],[175,123,186,49],[176,8,187,12],[176,9,187,13],[176,15,188,17],[176,19,188,21],[176,29,188,31],[176,30,188,32,"test"],[176,34,188,36],[176,35,188,37,"segment"],[176,42,188,44],[176,43,188,45],[176,45,188,47],[177,10,189,16],[177,16,189,22,"groupName"],[177,25,189,31],[177,28,189,34],[177,29,189,35],[177,30,189,36],[177,32,189,38,"matchers_1"],[177,42,189,48],[177,43,189,49,"matchGroupName"],[177,57,189,63],[177,59,189,65,"segment"],[177,66,189,72],[177,67,189,73],[177,68,190,21,"split"],[177,73,190,26],[177,74,190,27],[177,77,190,30],[177,78,190,31],[177,79,191,21,"map"],[177,82,191,24],[177,83,191,26,"group"],[177,88,191,31],[177,92,191,36,"group"],[177,97,191,41],[177,98,191,42,"trim"],[177,102,191,46],[177,103,191,47],[177,104,191,48],[177,105,191,49],[177,106,192,21,"filter"],[177,112,192,27],[177,113,192,28,"Boolean"],[177,120,192,35],[177,121,192,36],[178,10,193,16],[178,14,193,20,"groupName"],[178,23,193,29],[178,24,193,30,"length"],[178,30,193,36],[178,33,193,39],[178,34,193,40],[178,36,193,42],[179,12,194,20],[179,18,194,26,"optionalSegment"],[179,33,194,41],[179,36,194,44],[179,45,194,53,"groupName"],[179,54,194,62],[179,55,194,63,"map"],[179,58,194,66],[179,59,194,67,"escapeStringRegexp"],[179,77,194,85],[179,78,194,86],[179,79,194,87,"join"],[179,83,194,91],[179,84,194,92],[179,87,194,95],[179,88,194,96],[179,94,194,102],[180,12,195,20],[181,12,196,20],[181,19,196,27],[181,26,196,34,"optionalSegment"],[181,41,196,49],[181,45,196,53],[182,10,197,16],[182,11,197,17],[182,17,198,21],[183,12,199,20],[184,12,200,20],[184,19,200,27],[184,26,200,34,"escapeStringRegexp"],[184,44,200,52],[184,45,200,53,"segment"],[184,52,200,60],[184,53,200,61],[184,57,200,65],[185,10,201,16],[186,8,202,12],[186,9,202,13],[186,15,203,17],[187,10,204,16],[187,17,204,23],[187,21,204,27,"escapeStringRegexp"],[187,39,204,45],[187,40,204,46,"segment"],[187,47,204,53],[187,48,204,54],[187,50,204,56],[188,8,205,12],[189,6,206,8],[189,7,206,9],[189,8,206,10],[189,9,207,13,"join"],[189,13,207,17],[189,14,207,18],[189,16,207,20],[189,17,207,21],[190,6,208,8,"routeKeys"],[191,4,209,4],[191,5,209,5],[192,2,210,0],[193,2,211,0],[194,2,212,0],[194,8,212,6,"reHasRegExp"],[194,19,212,17],[194,22,212,20],[194,43,212,41],[195,2,213,0],[195,8,213,6,"reReplaceRegExp"],[195,23,213,21],[195,26,213,24],[195,48,213,46],[196,2,214,0],[196,11,214,9,"escapeStringRegexp"],[196,29,214,27,"escapeStringRegexp"],[196,30,214,28,"str"],[196,33,214,31],[196,35,214,33],[197,4,215,4],[198,4,216,4],[198,8,216,8,"reHasRegExp"],[198,19,216,19],[198,20,216,20,"test"],[198,24,216,24],[198,25,216,25,"str"],[198,28,216,28],[198,29,216,29],[198,31,216,31],[199,6,217,8],[199,13,217,15,"str"],[199,16,217,18],[199,17,217,19,"replace"],[199,24,217,26],[199,25,217,27,"reReplaceRegExp"],[199,40,217,42],[199,42,217,44],[199,48,217,50],[199,49,217,51],[200,4,218,4],[201,4,219,4],[201,11,219,11,"str"],[201,14,219,14],[202,2,220,0],[203,2,221,0],[203,11,221,9,"parseParameter"],[203,25,221,23,"parseParameter"],[203,26,221,24,"param"],[203,31,221,29],[203,33,221,31],[204,4,222,4],[204,8,222,8,"repeat"],[204,14,222,14],[204,17,222,17],[204,22,222,22],[205,4,223,4],[205,8,223,8,"optional"],[205,16,223,16],[205,19,223,19],[205,24,223,24],[206,4,224,4],[206,8,224,8,"name"],[206,12,224,12],[206,15,224,15,"param"],[206,20,224,20],[207,4,225,4],[207,8,225,8],[207,18,225,18],[207,19,225,19,"test"],[207,23,225,23],[207,24,225,24,"name"],[207,28,225,28],[207,29,225,29],[207,31,225,31],[208,6,226,8,"optional"],[208,14,226,16],[208,17,226,19],[208,21,226,23],[209,6,227,8,"name"],[209,10,227,12],[209,13,227,15,"name"],[209,17,227,19],[209,18,227,20,"slice"],[209,23,227,25],[209,24,227,26],[209,25,227,27],[209,27,227,29],[209,28,227,30],[209,29,227,31],[209,30,227,32],[210,4,228,4],[211,4,229,4],[211,8,229,8],[211,17,229,17],[211,18,229,18,"test"],[211,22,229,22],[211,23,229,23,"name"],[211,27,229,27],[211,28,229,28],[211,30,229,30],[212,6,230,8,"repeat"],[212,12,230,14],[212,15,230,17],[212,19,230,21],[213,6,231,8,"name"],[213,10,231,12],[213,13,231,15,"name"],[213,17,231,19],[213,18,231,20,"slice"],[213,23,231,25],[213,24,231,26],[213,25,231,27],[213,26,231,28],[214,4,232,4],[215,4,233,4],[215,11,233,11],[216,6,233,13,"name"],[216,10,233,17],[217,6,233,19,"repeat"],[217,12,233,25],[218,6,233,27,"optional"],[219,4,233,36],[219,5,233,37],[220,2,234,0],[221,0,234,1],[221,3]],"functionMap":{"names":["<global>","isNotFoundRoute","uniqueBy","arr.filter$argument_0","getServerManifest","getFlatNodes","route.children.map$argument_0","getFlatNodes.sort$argument_0","flat.filter$argument_0","uniqueBy$argument_1","uniqueBy.map$argument_0","flat.find$argument_0","otherRoutes.filter$argument_0","getMatchableManifestForPaths","paths.map$argument_0","getNamedRouteRegex","buildGetSafeRouteKey","<anonymous>","removeTrailingSlash","getNamedParametrizedRoute","segments.map$argument_0","split.map$argument_0","escapeStringRegexp","parseParameter"],"mappings":"AAA;ACO;CDE;AEC;sBCE;KDO;CFC;AIE;ICC;sCCI,6CD;KDa;cGG,wDH;2CIE,qCJ,GK,gBL;6CIC;oGJC,GK,gBL;2CIC,0CJ,GK,gBL;aMC;0BCQ,uED;KNI;0CIE,yCJ,GK,gBL;aMC;sBCE,sED;KNG;8CQE,wCR;8CQC,uCR;CJiB;AaC;qBCC;KDY;CbC;AeC;CfQ;AgBK;WCG;KDuB;ChBC;AkBC;ClBE;AmBC;iBCM;yBCmC,uBD;SDe;CnBI;AsBI;CtBM;AuBC;CvBa"},"hasCjsExports":true},"type":"js/module"}]}