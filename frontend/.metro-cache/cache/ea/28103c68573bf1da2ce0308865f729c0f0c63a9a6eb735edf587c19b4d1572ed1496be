{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.findFirstVisibleIndex = findFirstVisibleIndex;\n  exports.findLastVisibleIndex = findLastVisibleIndex;\n  /**\n   * A helper function to perform binary search for the first or last visible index.\n   * This function efficiently finds items that are visible within a viewport by using\n   * a binary search algorithm on sorted layouts.\n   *\n   * @param layouts - The sorted array of RVLayout objects, sorted by either x or y position\n   * @param threshold - The threshold value to determine visibility (viewport boundary)\n   * @param isSortedByX - A boolean indicating if the array is sorted by x (true) or y (false)\n   * @param findFirst - A boolean indicating whether to find the first (true) or last (false) visible index\n   * @returns The index of the visible layout or -1 if none are visible\n   *\n   * @remarks\n   * The binary search implementation ensures O(log n) time complexity for finding visible items.\n   * The function assumes the layouts array is pre-sorted by the relevant dimension (x or y).\n   */\n  function binarySearchVisibleIndex(layouts, threshold, isSortedByX, findFirst) {\n    let left = 0;\n    let right = layouts.length - 1;\n    let visibleIndex = -1;\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n      const layout = layouts[mid];\n      // Check visibility based on the sorting criteria\n      const position = isSortedByX ? layout.x : layout.y;\n      const size = isSortedByX ? layout.width : layout.height;\n      if (findFirst) {\n        // Logic for finding the first visible index\n        if (position >= threshold || position + size > threshold) {\n          // Potential visible index found, continue searching left for earlier visible items\n          visibleIndex = mid;\n          right = mid - 1;\n        } else {\n          // Search in the right half for visible items\n          left = mid + 1;\n        }\n      } else if (position <= threshold) {\n        // Potential visible index found, continue searching right for later visible items\n        visibleIndex = mid;\n        left = mid + 1;\n      } else {\n        // Search in the left half for visible items\n        right = mid - 1;\n      }\n    }\n    return visibleIndex;\n  }\n  /**\n   * Finds the first visible index in a sorted array of RVLayout objects.\n   * This is a wrapper around binarySearchVisibleIndex that specifically finds\n   * the first item that becomes visible in the viewport.\n   *\n   * @param layouts - The sorted array of RVLayout objects\n   * @param threshold - The threshold value to determine visibility\n   * @param isSortedByX - A boolean indicating if the array is sorted by x (true) or y (false)\n   * @returns The index of the first visible layout or -1 if none are visible\n   */\n  function findFirstVisibleIndex(layouts, threshold, isSortedByX) {\n    return binarySearchVisibleIndex(layouts, threshold, isSortedByX, true);\n  }\n  /**\n   * Finds the last visible index in a sorted array of RVLayout objects.\n   * This is a wrapper around binarySearchVisibleIndex that specifically finds\n   * the last item that remains visible in the viewport.\n   *\n   * @param layouts - The sorted array of RVLayout objects\n   * @param threshold - The threshold value to determine visibility\n   * @param isSortedByX - A boolean indicating if the array is sorted by x (true) or y (false)\n   * @returns The index of the last visible layout or -1 if none are visible\n   */\n  function findLastVisibleIndex(layouts, threshold, isSortedByX) {\n    return binarySearchVisibleIndex(layouts, threshold, isSortedByX, false);\n  }\n});","lineCount":81,"map":[[7,2,60,0,"exports"],[7,9,60,0],[7,10,60,0,"findFirstVisibleIndex"],[7,31,60,0],[7,34,60,0,"findFirstVisibleIndex"],[7,55,60,0],[8,2,73,0,"exports"],[8,9,73,0],[8,10,73,0,"findLastVisibleIndex"],[8,30,73,0],[8,33,73,0,"findLastVisibleIndex"],[8,53,73,0],[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[16,0,8,0],[17,0,9,0],[18,0,10,0],[19,0,11,0],[20,0,12,0],[21,0,13,0],[22,0,14,0],[23,0,15,0],[24,2,16,0],[24,11,16,9,"binarySearchVisibleIndex"],[24,35,16,33,"binarySearchVisibleIndex"],[24,36,16,34,"layouts"],[24,43,16,41],[24,45,16,43,"threshold"],[24,54,16,52],[24,56,16,54,"isSortedByX"],[24,67,16,65],[24,69,16,67,"findFirst"],[24,78,16,76],[24,80,16,78],[25,4,17,4],[25,8,17,8,"left"],[25,12,17,12],[25,15,17,15],[25,16,17,16],[26,4,18,4],[26,8,18,8,"right"],[26,13,18,13],[26,16,18,16,"layouts"],[26,23,18,23],[26,24,18,24,"length"],[26,30,18,30],[26,33,18,33],[26,34,18,34],[27,4,19,4],[27,8,19,8,"visibleIndex"],[27,20,19,20],[27,23,19,23],[27,24,19,24],[27,25,19,25],[28,4,20,4],[28,11,20,11,"left"],[28,15,20,15],[28,19,20,19,"right"],[28,24,20,24],[28,26,20,26],[29,6,21,8],[29,12,21,14,"mid"],[29,15,21,17],[29,18,21,20,"Math"],[29,22,21,24],[29,23,21,25,"floor"],[29,28,21,30],[29,29,21,31],[29,30,21,32,"left"],[29,34,21,36],[29,37,21,39,"right"],[29,42,21,44],[29,46,21,48],[29,47,21,49],[29,48,21,50],[30,6,22,8],[30,12,22,14,"layout"],[30,18,22,20],[30,21,22,23,"layouts"],[30,28,22,30],[30,29,22,31,"mid"],[30,32,22,34],[30,33,22,35],[31,6,23,8],[32,6,24,8],[32,12,24,14,"position"],[32,20,24,22],[32,23,24,25,"isSortedByX"],[32,34,24,36],[32,37,24,39,"layout"],[32,43,24,45],[32,44,24,46,"x"],[32,45,24,47],[32,48,24,50,"layout"],[32,54,24,56],[32,55,24,57,"y"],[32,56,24,58],[33,6,25,8],[33,12,25,14,"size"],[33,16,25,18],[33,19,25,21,"isSortedByX"],[33,30,25,32],[33,33,25,35,"layout"],[33,39,25,41],[33,40,25,42,"width"],[33,45,25,47],[33,48,25,50,"layout"],[33,54,25,56],[33,55,25,57,"height"],[33,61,25,63],[34,6,26,8],[34,10,26,12,"findFirst"],[34,19,26,21],[34,21,26,23],[35,8,27,12],[36,8,28,12],[36,12,28,16,"position"],[36,20,28,24],[36,24,28,28,"threshold"],[36,33,28,37],[36,37,28,41,"position"],[36,45,28,49],[36,48,28,52,"size"],[36,52,28,56],[36,55,28,59,"threshold"],[36,64,28,68],[36,66,28,70],[37,10,29,16],[38,10,30,16,"visibleIndex"],[38,22,30,28],[38,25,30,31,"mid"],[38,28,30,34],[39,10,31,16,"right"],[39,15,31,21],[39,18,31,24,"mid"],[39,21,31,27],[39,24,31,30],[39,25,31,31],[40,8,32,12],[40,9,32,13],[40,15,33,17],[41,10,34,16],[42,10,35,16,"left"],[42,14,35,20],[42,17,35,23,"mid"],[42,20,35,26],[42,23,35,29],[42,24,35,30],[43,8,36,12],[44,6,37,8],[44,7,37,9],[44,13,38,13],[44,17,38,17,"position"],[44,25,38,25],[44,29,38,29,"threshold"],[44,38,38,38],[44,40,38,40],[45,8,39,12],[46,8,40,12,"visibleIndex"],[46,20,40,24],[46,23,40,27,"mid"],[46,26,40,30],[47,8,41,12,"left"],[47,12,41,16],[47,15,41,19,"mid"],[47,18,41,22],[47,21,41,25],[47,22,41,26],[48,6,42,8],[48,7,42,9],[48,13,43,13],[49,8,44,12],[50,8,45,12,"right"],[50,13,45,17],[50,16,45,20,"mid"],[50,19,45,23],[50,22,45,26],[50,23,45,27],[51,6,46,8],[52,4,47,4],[53,4,48,4],[53,11,48,11,"visibleIndex"],[53,23,48,23],[54,2,49,0],[55,2,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,2,60,7],[65,11,60,16,"findFirstVisibleIndex"],[65,32,60,37,"findFirstVisibleIndex"],[65,33,60,38,"layouts"],[65,40,60,45],[65,42,60,47,"threshold"],[65,51,60,56],[65,53,60,58,"isSortedByX"],[65,64,60,69],[65,66,60,71],[66,4,61,4],[66,11,61,11,"binarySearchVisibleIndex"],[66,35,61,35],[66,36,61,36,"layouts"],[66,43,61,43],[66,45,61,45,"threshold"],[66,54,61,54],[66,56,61,56,"isSortedByX"],[66,67,61,67],[66,69,61,69],[66,73,61,73],[66,74,61,74],[67,2,62,0],[68,2,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,0,70,0],[76,0,71,0],[77,0,72,0],[78,2,73,7],[78,11,73,16,"findLastVisibleIndex"],[78,31,73,36,"findLastVisibleIndex"],[78,32,73,37,"layouts"],[78,39,73,44],[78,41,73,46,"threshold"],[78,50,73,55],[78,52,73,57,"isSortedByX"],[78,63,73,68],[78,65,73,70],[79,4,74,4],[79,11,74,11,"binarySearchVisibleIndex"],[79,35,74,35],[79,36,74,36,"layouts"],[79,43,74,43],[79,45,74,45,"threshold"],[79,54,74,54],[79,56,74,56,"isSortedByX"],[79,67,74,67],[79,69,74,69],[79,74,74,74],[79,75,74,75],[80,2,75,0],[81,0,75,1],[81,3]],"functionMap":{"names":["<global>","binarySearchVisibleIndex","findFirstVisibleIndex","findLastVisibleIndex"],"mappings":"AAA;ACe;CDiC;OEW;CFE;OGW;CHE"},"hasCjsExports":false},"type":"js/module"}]}