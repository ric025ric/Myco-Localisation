{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":85,"index":85}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"],"imports":1}},{"name":"../utils/adjustOffsetForRTL","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":65,"index":195}}],"key":"gFxd7dSVSzyOKUPtU0ivmRRba9s=","exportNames":["*"],"imports":1}},{"name":"../../native/config/PlatformHelper","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":196},"end":{"line":4,"column":68,"index":264}}],"key":"VAeUL6D5iY8QXYEBY5o7Ew2wCF4=","exportNames":["*"],"imports":1}},{"name":"../../errors/WarningMessages","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":265},"end":{"line":5,"column":63,"index":328}}],"key":"p+HaK13YPlWydH8N4KkuSIQ9AD0=","exportNames":["*"],"imports":1}},{"name":"./useUnmountFlag","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":329},"end":{"line":6,"column":50,"index":379}}],"key":"LXLbqK8JtplOqn+vbyoibyvOisM=","exportNames":["*"],"imports":1}},{"name":"./useUnmountAwareCallbacks","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":380},"end":{"line":7,"column":68,"index":448}}],"key":"3BUUYvw+CD+nwK2jZFzshln47Y4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useRecyclerViewController = useRecyclerViewController;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _reactNativeWebDistExportsI18nManager = require(_dependencyMap[1], \"react-native-web/dist/exports/I18nManager\");\n  var I18nManager = _interopDefault(_reactNativeWebDistExportsI18nManager);\n  var _utilsAdjustOffsetForRTL = require(_dependencyMap[2], \"../utils/adjustOffsetForRTL\");\n  var _nativeConfigPlatformHelper = require(_dependencyMap[3], \"../../native/config/PlatformHelper\");\n  var _errorsWarningMessages = require(_dependencyMap[4], \"../../errors/WarningMessages\");\n  var _useUnmountFlag = require(_dependencyMap[5], \"./useUnmountFlag\");\n  var _useUnmountAwareCallbacks = require(_dependencyMap[6], \"./useUnmountAwareCallbacks\");\n  /**\n   * Comprehensive hook that manages RecyclerView scrolling behavior and provides\n   * imperative methods for controlling the RecyclerView.\n   *\n   * This hook combines content offset management and scroll handling functionality:\n   * 1. Provides imperative methods for scrolling and measurement\n   * 2. Handles initial scroll position when the list first loads\n   * 3. Maintains visible content position during updates\n   * 4. Manages scroll anchors for chat-like applications\n   *\n   * @param recyclerViewManager - The RecyclerViewManager instance that handles core functionality\n   * @param ref - The ref to expose the imperative methods\n   * @param scrollViewRef - Reference to the scrollable container component\n   * @param scrollAnchorRef - Reference to the scroll anchor component\n   * @param props - The RecyclerViewProps containing configuration\n   */\n  function useRecyclerViewController(recyclerViewManager, ref, scrollViewRef, scrollAnchorRef) {\n    const isUnmounted = (0, _useUnmountFlag.useUnmountFlag)();\n    const [_, setRenderId] = (0, _react.useState)(0);\n    const pauseOffsetCorrection = (0, _react.useRef)(false);\n    const initialScrollCompletedRef = (0, _react.useRef)(false);\n    const lastDataLengthRef = (0, _react.useRef)(recyclerViewManager.getDataLength());\n    const {\n      setTimeout\n    } = (0, _useUnmountAwareCallbacks.useUnmountAwareTimeout)();\n    // Track the first visible item for maintaining scroll position\n    const firstVisibleItemKey = (0, _react.useRef)(undefined);\n    const firstVisibleItemLayout = (0, _react.useRef)(undefined);\n    // Queue to store callbacks that should be executed after scroll offset updates\n    const pendingScrollCallbacks = (0, _react.useRef)([]);\n    // Handle initial scroll position when the list first loads\n    //   useOnLoad(recyclerViewManager, () => {\n    //   });\n    /**\n     * Updates the scroll offset and calls the provided callback\n     * after the update has been applied and the component has re-rendered.\n     *\n     * @param offset - The new scroll offset to apply\n     * @param callback - Optional callback to execute after the update is applied\n     */\n    const updateScrollOffsetWithCallback = (0, _react.useCallback)((offset, callback) => {\n      // Attempt to update the scroll offset in the RecyclerViewManager\n      // This returns undefined if no update is needed\n      if (recyclerViewManager.updateScrollOffset(offset) !== undefined) {\n        // It will be executed after the next render\n        pendingScrollCallbacks.current.push(callback);\n        // Trigger a re-render to apply the scroll offset update\n        setRenderId(prev => prev + 1);\n      } else {\n        // No update needed, execute callback immediately\n        callback();\n      }\n    }, [recyclerViewManager]);\n    const computeFirstVisibleIndexForOffsetCorrection = (0, _react.useCallback)(() => {\n      if (recyclerViewManager.getIsFirstLayoutComplete() && recyclerViewManager.hasStableDataKeys() && recyclerViewManager.getDataLength() > 0 && recyclerViewManager.shouldMaintainVisibleContentPosition()) {\n        // Update the tracked first visible item\n        const firstVisibleIndex = Math.max(0, recyclerViewManager.computeVisibleIndices().startIndex);\n        if (firstVisibleIndex !== undefined && firstVisibleIndex >= 0) {\n          firstVisibleItemKey.current = recyclerViewManager.getDataKey(firstVisibleIndex);\n          firstVisibleItemLayout.current = {\n            ...recyclerViewManager.getLayout(firstVisibleIndex)\n          };\n        }\n      }\n    }, [recyclerViewManager]);\n    /**\n     * Maintains the visible content position when the list updates.\n     * This is particularly useful for chat applications where we want to keep\n     * the user's current view position when new messages are added.\n     */\n    const applyOffsetCorrection = (0, _react.useCallback)(() => {\n      var _a, _b, _c;\n      const {\n        horizontal,\n        data\n      } = recyclerViewManager.props;\n      // Execute all pending callbacks from previous scroll offset updates\n      // This ensures any scroll operations that were waiting for render are completed\n      const callbacks = pendingScrollCallbacks.current;\n      pendingScrollCallbacks.current = [];\n      callbacks.forEach(callback => callback());\n      const currentDataLength = recyclerViewManager.getDataLength();\n      if (recyclerViewManager.getIsFirstLayoutComplete() && recyclerViewManager.hasStableDataKeys() && currentDataLength > 0 && recyclerViewManager.shouldMaintainVisibleContentPosition()) {\n        const hasDataChanged = currentDataLength !== lastDataLengthRef.current;\n        // If we have a tracked first visible item, maintain its position\n        if (firstVisibleItemKey.current) {\n          const currentIndexOfFirstVisibleItem = (_a = recyclerViewManager.getEngagedIndices().findValue(index => recyclerViewManager.getDataKey(index) === firstVisibleItemKey.current)) !== null && _a !== void 0 ? _a : hasDataChanged ? data === null || data === void 0 ? void 0 : data.findIndex((item, index) => recyclerViewManager.getDataKey(index) === firstVisibleItemKey.current) : undefined;\n          if (currentIndexOfFirstVisibleItem !== undefined && currentIndexOfFirstVisibleItem >= 0) {\n            // Calculate the difference in position and apply the offset\n            const diff = horizontal ? recyclerViewManager.getLayout(currentIndexOfFirstVisibleItem).x - firstVisibleItemLayout.current.x : recyclerViewManager.getLayout(currentIndexOfFirstVisibleItem).y - firstVisibleItemLayout.current.y;\n            firstVisibleItemLayout.current = {\n              ...recyclerViewManager.getLayout(currentIndexOfFirstVisibleItem)\n            };\n            if (diff !== 0 && !pauseOffsetCorrection.current && !recyclerViewManager.animationOptimizationsEnabled) {\n              // console.log(\"diff\", diff, firstVisibleItemKey.current);\n              if (_nativeConfigPlatformHelper.PlatformConfig.supportsOffsetCorrection) {\n                // console.log(\"scrollBy\", diff);\n                (_b = scrollAnchorRef.current) === null || _b === void 0 ? void 0 : _b.scrollBy(diff);\n              } else {\n                const scrollToParams = horizontal ? {\n                  x: recyclerViewManager.getAbsoluteLastScrollOffset() + diff,\n                  animated: false\n                } : {\n                  y: recyclerViewManager.getAbsoluteLastScrollOffset() + diff,\n                  animated: false\n                };\n                (_c = scrollViewRef.current) === null || _c === void 0 ? void 0 : _c.scrollTo(scrollToParams);\n              }\n              if (hasDataChanged) {\n                updateScrollOffsetWithCallback(recyclerViewManager.getAbsoluteLastScrollOffset() + diff, () => {});\n                recyclerViewManager.ignoreScrollEvents = true;\n                setTimeout(() => {\n                  recyclerViewManager.ignoreScrollEvents = false;\n                }, 100);\n              }\n            }\n          }\n        }\n        computeFirstVisibleIndexForOffsetCorrection();\n      }\n      lastDataLengthRef.current = recyclerViewManager.getDataLength();\n    }, [recyclerViewManager, scrollAnchorRef, scrollViewRef, setTimeout, updateScrollOffsetWithCallback, computeFirstVisibleIndexForOffsetCorrection]);\n    const handlerMethods = (0, _react.useMemo)(() => {\n      return {\n        get props() {\n          return recyclerViewManager.props;\n        },\n        /**\n         * Scrolls the list to a specific offset position.\n         * Handles RTL layouts and first item offset adjustments.\n         */\n        scrollToOffset: ({\n          offset,\n          animated,\n          skipFirstItemOffset = true\n        }) => {\n          const {\n            horizontal\n          } = recyclerViewManager.props;\n          if (scrollViewRef.current) {\n            // Adjust offset for RTL layouts in horizontal mode\n            if (I18nManager.default.isRTL && horizontal) {\n              // eslint-disable-next-line no-param-reassign\n              offset = (0, _utilsAdjustOffsetForRTL.adjustOffsetForRTL)(offset, recyclerViewManager.getChildContainerDimensions().width, recyclerViewManager.getWindowSize().width) + (skipFirstItemOffset ? recyclerViewManager.firstItemOffset : -recyclerViewManager.firstItemOffset);\n            }\n            // Calculate the final offset including first item offset if needed\n            const adjustedOffset = offset + (skipFirstItemOffset ? 0 : recyclerViewManager.firstItemOffset);\n            const scrollTo = horizontal ? {\n              x: adjustedOffset,\n              y: 0\n            } : {\n              x: 0,\n              y: adjustedOffset\n            };\n            scrollViewRef.current.scrollTo({\n              ...scrollTo,\n              animated\n            });\n          }\n        },\n        clearLayoutCacheOnUpdate: () => {\n          recyclerViewManager.markLayoutManagerDirty();\n        },\n        // Expose native scroll view methods\n        flashScrollIndicators: () => {\n          scrollViewRef.current.flashScrollIndicators();\n        },\n        getNativeScrollRef: () => {\n          return scrollViewRef.current;\n        },\n        getScrollResponder: () => {\n          return scrollViewRef.current.getScrollResponder();\n        },\n        getScrollableNode: () => {\n          return scrollViewRef.current.getScrollableNode();\n        },\n        /**\n         * Scrolls to the end of the list.\n         */\n        scrollToEnd: async ({\n          animated\n        } = {}) => {\n          const {\n            data\n          } = recyclerViewManager.props;\n          if (data && data.length > 0) {\n            const lastIndex = data.length - 1;\n            if (!recyclerViewManager.getEngagedIndices().includes(lastIndex)) {\n              await handlerMethods.scrollToIndex({\n                index: lastIndex,\n                animated\n              });\n            }\n          }\n          setTimeout(() => {\n            var _a;\n            (_a = scrollViewRef.current) === null || _a === void 0 ? void 0 : _a.scrollToEnd({\n              animated\n            });\n          }, 0);\n        },\n        /**\n         * Scrolls to the beginning of the list.\n         */\n        scrollToTop: ({\n          animated\n        } = {}) => {\n          handlerMethods.scrollToOffset({\n            offset: 0,\n            animated\n          });\n        },\n        /**\n         * Scrolls to a specific index in the list.\n         * Supports viewPosition and viewOffset for precise positioning.\n         * Returns a Promise that resolves when the scroll is complete.\n         */\n        scrollToIndex: ({\n          index,\n          animated,\n          viewPosition,\n          viewOffset\n        }) => {\n          return new Promise(resolve => {\n            const {\n              horizontal\n            } = recyclerViewManager.props;\n            if (scrollViewRef.current && index >= 0 && index < recyclerViewManager.getDataLength()) {\n              // Pause the scroll offset adjustments\n              pauseOffsetCorrection.current = true;\n              recyclerViewManager.setOffsetProjectionEnabled(false);\n              const getFinalOffset = () => {\n                const layout = recyclerViewManager.getLayout(index);\n                const offset = horizontal ? layout.x : layout.y;\n                let finalOffset = offset;\n                // take viewPosition etc into account\n                if (viewPosition !== undefined || viewOffset !== undefined) {\n                  const containerSize = horizontal ? recyclerViewManager.getWindowSize().width : recyclerViewManager.getWindowSize().height;\n                  const itemSize = horizontal ? layout.width : layout.height;\n                  if (viewPosition !== undefined) {\n                    // viewPosition: 0 = top, 0.5 = center, 1 = bottom\n                    finalOffset = offset - (containerSize - itemSize) * viewPosition;\n                  }\n                  if (viewOffset !== undefined) {\n                    finalOffset += viewOffset;\n                  }\n                }\n                return finalOffset + recyclerViewManager.firstItemOffset;\n              };\n              const lastAbsoluteScrollOffset = recyclerViewManager.getAbsoluteLastScrollOffset();\n              const bufferForScroll = horizontal ? recyclerViewManager.getWindowSize().width : recyclerViewManager.getWindowSize().height;\n              const bufferForCompute = bufferForScroll * 2;\n              const getStartScrollOffset = () => {\n                let lastScrollOffset = lastAbsoluteScrollOffset;\n                const finalOffset = getFinalOffset();\n                if (finalOffset > lastScrollOffset) {\n                  lastScrollOffset = Math.max(finalOffset - bufferForCompute, lastScrollOffset);\n                  recyclerViewManager.setScrollDirection(\"forward\");\n                } else {\n                  lastScrollOffset = Math.min(finalOffset + bufferForCompute, lastScrollOffset);\n                  recyclerViewManager.setScrollDirection(\"backward\");\n                }\n                return lastScrollOffset;\n              };\n              let initialTargetOffset = getFinalOffset();\n              let initialStartScrollOffset = getStartScrollOffset();\n              let finalOffset = initialTargetOffset;\n              let startScrollOffset = initialStartScrollOffset;\n              const steps = 5;\n              /**\n               * Recursively performs the scroll animation steps.\n               * This function replaces the async/await loop with callback-based execution.\n               *\n               * @param currentStep - The current step in the animation (0 to steps-1)\n               */\n              const performScrollStep = currentStep => {\n                // Check if component is unmounted or we've completed all steps\n                if (isUnmounted.current) {\n                  resolve();\n                  return;\n                } else if (currentStep >= steps) {\n                  // All steps completed, perform final scroll\n                  finishScrollToIndex();\n                  return;\n                }\n                // Calculate the offset for this step\n                // For animated scrolls: interpolate from finalOffset to startScrollOffset\n                // For non-animated: interpolate from startScrollOffset to finalOffset\n                const nextOffset = animated ? finalOffset + (startScrollOffset - finalOffset) * (currentStep / (steps - 1)) : startScrollOffset + (finalOffset - startScrollOffset) * (currentStep / (steps - 1));\n                // Update scroll offset with a callback to continue to the next step\n                updateScrollOffsetWithCallback(nextOffset, () => {\n                  // Check if the index is still valid after the update\n                  if (index >= recyclerViewManager.getDataLength()) {\n                    // Index out of bounds, scroll to end instead\n                    handlerMethods.scrollToEnd({\n                      animated\n                    });\n                    resolve(); // Resolve the promise as we're done\n                    return;\n                  }\n                  // Check if the target position has changed significantly\n                  const newFinalOffset = getFinalOffset();\n                  if (newFinalOffset < initialTargetOffset && newFinalOffset < initialStartScrollOffset || newFinalOffset > initialTargetOffset && newFinalOffset > initialStartScrollOffset) {\n                    // Target has moved, recalculate and restart from beginning\n                    finalOffset = newFinalOffset;\n                    startScrollOffset = getStartScrollOffset();\n                    initialTargetOffset = newFinalOffset;\n                    initialStartScrollOffset = startScrollOffset;\n                    performScrollStep(0); // Restart from step 0\n                  } else {\n                    // Continue to next step\n                    performScrollStep(currentStep + 1);\n                  }\n                });\n              };\n              /**\n               * Completes the scroll to index operation by performing the final scroll\n               * and re-enabling offset correction after a delay.\n               */\n              const finishScrollToIndex = () => {\n                finalOffset = getFinalOffset();\n                const maxOffset = recyclerViewManager.getMaxScrollOffset();\n                if (finalOffset > maxOffset) {\n                  finalOffset = maxOffset;\n                }\n                if (animated) {\n                  // For animated scrolls, first jump to the start position\n                  // We don't need to add firstItemOffset here as it's already added\n                  handlerMethods.scrollToOffset({\n                    offset: startScrollOffset,\n                    animated: false,\n                    skipFirstItemOffset: true\n                  });\n                }\n                // Perform the final scroll to the target position\n                handlerMethods.scrollToOffset({\n                  offset: finalOffset,\n                  animated,\n                  skipFirstItemOffset: true\n                });\n                // Re-enable offset correction after a delay\n                // Longer delay for animated scrolls to allow animation to complete\n                setTimeout(() => {\n                  pauseOffsetCorrection.current = false;\n                  recyclerViewManager.setOffsetProjectionEnabled(true);\n                  resolve(); // Resolve the promise after re-enabling corrections\n                }, animated ? 300 : 200);\n              };\n              // Start the scroll animation process\n              performScrollStep(0);\n            } else {\n              // Invalid parameters, resolve immediately\n              resolve();\n            }\n          });\n        },\n        /**\n         * Scrolls to a specific item in the list.\n         * Finds the item's index and uses scrollToIndex internally.\n         */\n        scrollToItem: ({\n          item,\n          animated,\n          viewPosition,\n          viewOffset\n        }) => {\n          const {\n            data\n          } = recyclerViewManager.props;\n          if (scrollViewRef.current && data) {\n            // Find the index of the item in the data array\n            const index = data.findIndex(dataItem => dataItem === item);\n            if (index >= 0) {\n              handlerMethods.scrollToIndex({\n                index,\n                animated,\n                viewPosition,\n                viewOffset\n              });\n            }\n          }\n        },\n        // Utility methods for measuring header height / top padding\n        getFirstItemOffset: () => {\n          return recyclerViewManager.firstItemOffset;\n        },\n        getWindowSize: () => {\n          return recyclerViewManager.getWindowSize();\n        },\n        getLayout: index => {\n          return recyclerViewManager.tryGetLayout(index);\n        },\n        getAbsoluteLastScrollOffset: () => {\n          return recyclerViewManager.getAbsoluteLastScrollOffset();\n        },\n        getChildContainerDimensions: () => {\n          return recyclerViewManager.getChildContainerDimensions();\n        },\n        recordInteraction: () => {\n          recyclerViewManager.recordInteraction();\n        },\n        computeVisibleIndices: () => {\n          return recyclerViewManager.computeVisibleIndices();\n        },\n        getFirstVisibleIndex: () => {\n          return recyclerViewManager.computeVisibleIndices().startIndex;\n        },\n        recomputeViewableItems: () => {\n          recyclerViewManager.recomputeViewableItems();\n        },\n        /**\n         * Disables item recycling in preparation for layout animations.\n         */\n        prepareForLayoutAnimationRender: () => {\n          if (!recyclerViewManager.props.keyExtractor) {\n            console.warn(_errorsWarningMessages.WarningMessages.keyExtractorNotDefinedForAnimation);\n          }\n          recyclerViewManager.animationOptimizationsEnabled = true;\n        }\n      };\n    }, [recyclerViewManager, scrollViewRef, setTimeout, isUnmounted, updateScrollOffsetWithCallback]);\n    const applyInitialScrollIndex = (0, _react.useCallback)(() => {\n      var _a, _b, _c;\n      const {\n        horizontal,\n        data,\n        initialScrollIndexParams\n      } = recyclerViewManager.props;\n      const initialScrollIndex = (_a = recyclerViewManager.getInitialScrollIndex()) !== null && _a !== void 0 ? _a : -1;\n      const dataLength = (_b = data === null || data === void 0 ? void 0 : data.length) !== null && _b !== void 0 ? _b : 0;\n      if (initialScrollIndex >= 0 && initialScrollIndex < dataLength && !initialScrollCompletedRef.current && recyclerViewManager.getIsFirstLayoutComplete()) {\n        // Use setTimeout to ensure that we keep trying to scroll on first few renders\n        setTimeout(() => {\n          initialScrollCompletedRef.current = true;\n          pauseOffsetCorrection.current = false;\n        }, 100);\n        pauseOffsetCorrection.current = true;\n        const additionalOffset = (_c = initialScrollIndexParams === null || initialScrollIndexParams === void 0 ? void 0 : initialScrollIndexParams.viewOffset) !== null && _c !== void 0 ? _c : 0;\n        const offset = horizontal ? recyclerViewManager.getLayout(initialScrollIndex).x + additionalOffset : recyclerViewManager.getLayout(initialScrollIndex).y + additionalOffset;\n        handlerMethods.scrollToOffset({\n          offset,\n          animated: false,\n          skipFirstItemOffset: false\n        });\n        setTimeout(() => {\n          handlerMethods.scrollToOffset({\n            offset,\n            animated: false,\n            skipFirstItemOffset: false\n          });\n        }, 0);\n      }\n    }, [handlerMethods, recyclerViewManager, setTimeout]);\n    // Expose imperative methods through the ref\n    (0, _react.useImperativeHandle)(ref, () => {\n      const imperativeApi = {\n        ...scrollViewRef.current,\n        ...handlerMethods\n      };\n      // Without this the props getter from handlerMethods is evaluated during spread and\n      // future updates to props are not reflected in the ref\n      Object.defineProperty(imperativeApi, \"props\", {\n        get() {\n          return recyclerViewManager.props;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      return imperativeApi;\n    }, [handlerMethods, scrollViewRef, recyclerViewManager]);\n    return {\n      applyOffsetCorrection,\n      computeFirstVisibleIndexForOffsetCorrection,\n      applyInitialScrollIndex,\n      handlerMethods\n    };\n  }\n});","lineCount":498,"map":[[12,2,24,0,"exports"],[12,9,24,0],[12,10,24,0,"useRecyclerViewController"],[12,35,24,0],[12,38,24,0,"useRecyclerViewController"],[12,63,24,0],[13,2,1,0],[13,6,1,0,"_react"],[13,12,1,0],[13,15,1,0,"require"],[13,22,1,0],[13,23,1,0,"_dependencyMap"],[13,37,1,0],[14,2,1,85],[14,6,1,85,"_reactNativeWebDistExportsI18nManager"],[14,43,1,85],[14,46,1,85,"require"],[14,53,1,85],[14,54,1,85,"_dependencyMap"],[14,68,1,85],[15,2,1,85],[15,6,1,85,"I18nManager"],[15,17,1,85],[15,20,1,85,"_interopDefault"],[15,35,1,85],[15,36,1,85,"_reactNativeWebDistExportsI18nManager"],[15,73,1,85],[16,2,3,0],[16,6,3,0,"_utilsAdjustOffsetForRTL"],[16,30,3,0],[16,33,3,0,"require"],[16,40,3,0],[16,41,3,0,"_dependencyMap"],[16,55,3,0],[17,2,4,0],[17,6,4,0,"_nativeConfigPlatformHelper"],[17,33,4,0],[17,36,4,0,"require"],[17,43,4,0],[17,44,4,0,"_dependencyMap"],[17,58,4,0],[18,2,5,0],[18,6,5,0,"_errorsWarningMessages"],[18,28,5,0],[18,31,5,0,"require"],[18,38,5,0],[18,39,5,0,"_dependencyMap"],[18,53,5,0],[19,2,6,0],[19,6,6,0,"_useUnmountFlag"],[19,21,6,0],[19,24,6,0,"require"],[19,31,6,0],[19,32,6,0,"_dependencyMap"],[19,46,6,0],[20,2,7,0],[20,6,7,0,"_useUnmountAwareCallbacks"],[20,31,7,0],[20,34,7,0,"require"],[20,41,7,0],[20,42,7,0,"_dependencyMap"],[20,56,7,0],[21,2,8,0],[22,0,9,0],[23,0,10,0],[24,0,11,0],[25,0,12,0],[26,0,13,0],[27,0,14,0],[28,0,15,0],[29,0,16,0],[30,0,17,0],[31,0,18,0],[32,0,19,0],[33,0,20,0],[34,0,21,0],[35,0,22,0],[36,0,23,0],[37,2,24,7],[37,11,24,16,"useRecyclerViewController"],[37,36,24,41,"useRecyclerViewController"],[37,37,24,42,"recyclerViewManager"],[37,56,24,61],[37,58,24,63,"ref"],[37,61,24,66],[37,63,24,68,"scrollViewRef"],[37,76,24,81],[37,78,24,83,"scrollAnchorRef"],[37,93,24,98],[37,95,24,100],[38,4,25,4],[38,10,25,10,"isUnmounted"],[38,21,25,21],[38,24,25,24],[38,28,25,24,"useUnmountFlag"],[38,43,25,38],[38,44,25,38,"useUnmountFlag"],[38,58,25,38],[38,60,25,39],[38,61,25,40],[39,4,26,4],[39,10,26,10],[39,11,26,11,"_"],[39,12,26,12],[39,14,26,14,"setRenderId"],[39,25,26,25],[39,26,26,26],[39,29,26,29],[39,33,26,29,"useState"],[39,39,26,37],[39,40,26,37,"useState"],[39,48,26,37],[39,50,26,38],[39,51,26,39],[39,52,26,40],[40,4,27,4],[40,10,27,10,"pauseOffsetCorrection"],[40,31,27,31],[40,34,27,34],[40,38,27,34,"useRef"],[40,44,27,40],[40,45,27,40,"useRef"],[40,51,27,40],[40,53,27,41],[40,58,27,46],[40,59,27,47],[41,4,28,4],[41,10,28,10,"initialScrollCompletedRef"],[41,35,28,35],[41,38,28,38],[41,42,28,38,"useRef"],[41,48,28,44],[41,49,28,44,"useRef"],[41,55,28,44],[41,57,28,45],[41,62,28,50],[41,63,28,51],[42,4,29,4],[42,10,29,10,"lastDataLengthRef"],[42,27,29,27],[42,30,29,30],[42,34,29,30,"useRef"],[42,40,29,36],[42,41,29,36,"useRef"],[42,47,29,36],[42,49,29,37,"recyclerViewManager"],[42,68,29,56],[42,69,29,57,"getDataLength"],[42,82,29,70],[42,83,29,71],[42,84,29,72],[42,85,29,73],[43,4,30,4],[43,10,30,10],[44,6,30,12,"setTimeout"],[45,4,30,23],[45,5,30,24],[45,8,30,27],[45,12,30,27,"useUnmountAwareTimeout"],[45,37,30,49],[45,38,30,49,"useUnmountAwareTimeout"],[45,60,30,49],[45,62,30,50],[45,63,30,51],[46,4,31,4],[47,4,32,4],[47,10,32,10,"firstVisibleItemKey"],[47,29,32,29],[47,32,32,32],[47,36,32,32,"useRef"],[47,42,32,38],[47,43,32,38,"useRef"],[47,49,32,38],[47,51,32,39,"undefined"],[47,60,32,48],[47,61,32,49],[48,4,33,4],[48,10,33,10,"firstVisibleItemLayout"],[48,32,33,32],[48,35,33,35],[48,39,33,35,"useRef"],[48,45,33,41],[48,46,33,41,"useRef"],[48,52,33,41],[48,54,33,42,"undefined"],[48,63,33,51],[48,64,33,52],[49,4,34,4],[50,4,35,4],[50,10,35,10,"pendingScrollCallbacks"],[50,32,35,32],[50,35,35,35],[50,39,35,35,"useRef"],[50,45,35,41],[50,46,35,41,"useRef"],[50,52,35,41],[50,54,35,42],[50,56,35,44],[50,57,35,45],[51,4,36,4],[52,4,37,4],[53,4,38,4],[54,4,39,4],[55,0,40,0],[56,0,41,0],[57,0,42,0],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,4,46,4],[61,10,46,10,"updateScrollOffsetWithCallback"],[61,40,46,40],[61,43,46,43],[61,47,46,43,"useCallback"],[61,53,46,54],[61,54,46,54,"useCallback"],[61,65,46,54],[61,67,46,55],[61,68,46,56,"offset"],[61,74,46,62],[61,76,46,64,"callback"],[61,84,46,72],[61,89,46,77],[62,6,47,8],[63,6,48,8],[64,6,49,8],[64,10,49,12,"recyclerViewManager"],[64,29,49,31],[64,30,49,32,"updateScrollOffset"],[64,48,49,50],[64,49,49,51,"offset"],[64,55,49,57],[64,56,49,58],[64,61,49,63,"undefined"],[64,70,49,72],[64,72,49,74],[65,8,50,12],[66,8,51,12,"pendingScrollCallbacks"],[66,30,51,34],[66,31,51,35,"current"],[66,38,51,42],[66,39,51,43,"push"],[66,43,51,47],[66,44,51,48,"callback"],[66,52,51,56],[66,53,51,57],[67,8,52,12],[68,8,53,12,"setRenderId"],[68,19,53,23],[68,20,53,25,"prev"],[68,24,53,29],[68,28,53,34,"prev"],[68,32,53,38],[68,35,53,41],[68,36,53,42],[68,37,53,43],[69,6,54,8],[69,7,54,9],[69,13,55,13],[70,8,56,12],[71,8,57,12,"callback"],[71,16,57,20],[71,17,57,21],[71,18,57,22],[72,6,58,8],[73,4,59,4],[73,5,59,5],[73,7,59,7],[73,8,59,8,"recyclerViewManager"],[73,27,59,27],[73,28,59,28],[73,29,59,29],[74,4,60,4],[74,10,60,10,"computeFirstVisibleIndexForOffsetCorrection"],[74,53,60,53],[74,56,60,56],[74,60,60,56,"useCallback"],[74,66,60,67],[74,67,60,67,"useCallback"],[74,78,60,67],[74,80,60,68],[74,86,60,74],[75,6,61,8],[75,10,61,12,"recyclerViewManager"],[75,29,61,31],[75,30,61,32,"getIsFirstLayoutComplete"],[75,54,61,56],[75,55,61,57],[75,56,61,58],[75,60,62,12,"recyclerViewManager"],[75,79,62,31],[75,80,62,32,"hasStableDataKeys"],[75,97,62,49],[75,98,62,50],[75,99,62,51],[75,103,63,12,"recyclerViewManager"],[75,122,63,31],[75,123,63,32,"getDataLength"],[75,136,63,45],[75,137,63,46],[75,138,63,47],[75,141,63,50],[75,142,63,51],[75,146,64,12,"recyclerViewManager"],[75,165,64,31],[75,166,64,32,"shouldMaintainVisibleContentPosition"],[75,202,64,68],[75,203,64,69],[75,204,64,70],[75,206,64,72],[76,8,65,12],[77,8,66,12],[77,14,66,18,"firstVisibleIndex"],[77,31,66,35],[77,34,66,38,"Math"],[77,38,66,42],[77,39,66,43,"max"],[77,42,66,46],[77,43,66,47],[77,44,66,48],[77,46,66,50,"recyclerViewManager"],[77,65,66,69],[77,66,66,70,"computeVisibleIndices"],[77,87,66,91],[77,88,66,92],[77,89,66,93],[77,90,66,94,"startIndex"],[77,100,66,104],[77,101,66,105],[78,8,67,12],[78,12,67,16,"firstVisibleIndex"],[78,29,67,33],[78,34,67,38,"undefined"],[78,43,67,47],[78,47,67,51,"firstVisibleIndex"],[78,64,67,68],[78,68,67,72],[78,69,67,73],[78,71,67,75],[79,10,68,16,"firstVisibleItemKey"],[79,29,68,35],[79,30,68,36,"current"],[79,37,68,43],[79,40,69,20,"recyclerViewManager"],[79,59,69,39],[79,60,69,40,"getDataKey"],[79,70,69,50],[79,71,69,51,"firstVisibleIndex"],[79,88,69,68],[79,89,69,69],[80,10,70,16,"firstVisibleItemLayout"],[80,32,70,38],[80,33,70,39,"current"],[80,40,70,46],[80,43,70,49],[81,12,71,20],[81,15,71,23,"recyclerViewManager"],[81,34,71,42],[81,35,71,43,"getLayout"],[81,44,71,52],[81,45,71,53,"firstVisibleIndex"],[81,62,71,70],[82,10,72,16],[82,11,72,17],[83,8,73,12],[84,6,74,8],[85,4,75,4],[85,5,75,5],[85,7,75,7],[85,8,75,8,"recyclerViewManager"],[85,27,75,27],[85,28,75,28],[85,29,75,29],[86,4,76,4],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,4,81,4],[91,10,81,10,"applyOffsetCorrection"],[91,31,81,31],[91,34,81,34],[91,38,81,34,"useCallback"],[91,44,81,45],[91,45,81,45,"useCallback"],[91,56,81,45],[91,58,81,46],[91,64,81,52],[92,6,82,8],[92,10,82,12,"_a"],[92,12,82,14],[92,14,82,16,"_b"],[92,16,82,18],[92,18,82,20,"_c"],[92,20,82,22],[93,6,83,8],[93,12,83,14],[94,8,83,16,"horizontal"],[94,18,83,26],[95,8,83,28,"data"],[96,6,83,33],[96,7,83,34],[96,10,83,37,"recyclerViewManager"],[96,29,83,56],[96,30,83,57,"props"],[96,35,83,62],[97,6,84,8],[98,6,85,8],[99,6,86,8],[99,12,86,14,"callbacks"],[99,21,86,23],[99,24,86,26,"pendingScrollCallbacks"],[99,46,86,48],[99,47,86,49,"current"],[99,54,86,56],[100,6,87,8,"pendingScrollCallbacks"],[100,28,87,30],[100,29,87,31,"current"],[100,36,87,38],[100,39,87,41],[100,41,87,43],[101,6,88,8,"callbacks"],[101,15,88,17],[101,16,88,18,"forEach"],[101,23,88,25],[101,24,88,27,"callback"],[101,32,88,35],[101,36,88,40,"callback"],[101,44,88,48],[101,45,88,49],[101,46,88,50],[101,47,88,51],[102,6,89,8],[102,12,89,14,"currentDataLength"],[102,29,89,31],[102,32,89,34,"recyclerViewManager"],[102,51,89,53],[102,52,89,54,"getDataLength"],[102,65,89,67],[102,66,89,68],[102,67,89,69],[103,6,90,8],[103,10,90,12,"recyclerViewManager"],[103,29,90,31],[103,30,90,32,"getIsFirstLayoutComplete"],[103,54,90,56],[103,55,90,57],[103,56,90,58],[103,60,91,12,"recyclerViewManager"],[103,79,91,31],[103,80,91,32,"hasStableDataKeys"],[103,97,91,49],[103,98,91,50],[103,99,91,51],[103,103,92,12,"currentDataLength"],[103,120,92,29],[103,123,92,32],[103,124,92,33],[103,128,93,12,"recyclerViewManager"],[103,147,93,31],[103,148,93,32,"shouldMaintainVisibleContentPosition"],[103,184,93,68],[103,185,93,69],[103,186,93,70],[103,188,93,72],[104,8,94,12],[104,14,94,18,"hasDataChanged"],[104,28,94,32],[104,31,94,35,"currentDataLength"],[104,48,94,52],[104,53,94,57,"lastDataLengthRef"],[104,70,94,74],[104,71,94,75,"current"],[104,78,94,82],[105,8,95,12],[106,8,96,12],[106,12,96,16,"firstVisibleItemKey"],[106,31,96,35],[106,32,96,36,"current"],[106,39,96,43],[106,41,96,45],[107,10,97,16],[107,16,97,22,"currentIndexOfFirstVisibleItem"],[107,46,97,52],[107,49,97,55],[107,50,97,56,"_a"],[107,52,97,58],[107,55,97,61,"recyclerViewManager"],[107,74,97,80],[107,75,98,21,"getEngagedIndices"],[107,92,98,38],[107,93,98,39],[107,94,98,40],[107,95,99,21,"findValue"],[107,104,99,30],[107,105,99,32,"index"],[107,110,99,37],[107,114,99,42,"recyclerViewManager"],[107,133,99,61],[107,134,99,62,"getDataKey"],[107,144,99,72],[107,145,99,73,"index"],[107,150,99,78],[107,151,99,79],[107,156,100,20,"firstVisibleItemKey"],[107,175,100,39],[107,176,100,40,"current"],[107,183,100,47],[107,184,100,48],[107,190,100,54],[107,194,100,58],[107,198,100,62,"_a"],[107,200,100,64],[107,205,100,69],[107,210,100,74],[107,211,100,75],[107,214,100,78,"_a"],[107,216,100,80],[107,219,100,84,"hasDataChanged"],[107,233,100,98],[107,236,101,22,"data"],[107,240,101,26],[107,245,101,31],[107,249,101,35],[107,253,101,39,"data"],[107,257,101,43],[107,262,101,48],[107,267,101,53],[107,268,101,54],[107,271,101,57],[107,276,101,62],[107,277,101,63],[107,280,101,66,"data"],[107,284,101,70],[107,285,101,71,"findIndex"],[107,294,101,80],[107,295,101,81],[107,296,101,82,"item"],[107,300,101,86],[107,302,101,88,"index"],[107,307,101,93],[107,312,101,98,"recyclerViewManager"],[107,331,101,117],[107,332,101,118,"getDataKey"],[107,342,101,128],[107,343,101,129,"index"],[107,348,101,134],[107,349,101,135],[107,354,102,24,"firstVisibleItemKey"],[107,373,102,43],[107,374,102,44,"current"],[107,381,102,51],[107,382,102,52],[107,385,103,22,"undefined"],[107,394,103,32],[108,10,104,16],[108,14,104,20,"currentIndexOfFirstVisibleItem"],[108,44,104,50],[108,49,104,55,"undefined"],[108,58,104,64],[108,62,105,20,"currentIndexOfFirstVisibleItem"],[108,92,105,50],[108,96,105,54],[108,97,105,55],[108,99,105,57],[109,12,106,20],[110,12,107,20],[110,18,107,26,"diff"],[110,22,107,30],[110,25,107,33,"horizontal"],[110,35,107,43],[110,38,108,26,"recyclerViewManager"],[110,57,108,45],[110,58,108,46,"getLayout"],[110,67,108,55],[110,68,108,56,"currentIndexOfFirstVisibleItem"],[110,98,108,86],[110,99,108,87],[110,100,108,88,"x"],[110,101,108,89],[110,104,109,28,"firstVisibleItemLayout"],[110,126,109,50],[110,127,109,51,"current"],[110,134,109,58],[110,135,109,59,"x"],[110,136,109,60],[110,139,110,26,"recyclerViewManager"],[110,158,110,45],[110,159,110,46,"getLayout"],[110,168,110,55],[110,169,110,56,"currentIndexOfFirstVisibleItem"],[110,199,110,86],[110,200,110,87],[110,201,110,88,"y"],[110,202,110,89],[110,205,111,28,"firstVisibleItemLayout"],[110,227,111,50],[110,228,111,51,"current"],[110,235,111,58],[110,236,111,59,"y"],[110,237,111,60],[111,12,112,20,"firstVisibleItemLayout"],[111,34,112,42],[111,35,112,43,"current"],[111,42,112,50],[111,45,112,53],[112,14,113,24],[112,17,113,27,"recyclerViewManager"],[112,36,113,46],[112,37,113,47,"getLayout"],[112,46,113,56],[112,47,113,57,"currentIndexOfFirstVisibleItem"],[112,77,113,87],[113,12,114,20],[113,13,114,21],[114,12,115,20],[114,16,115,24,"diff"],[114,20,115,28],[114,25,115,33],[114,26,115,34],[114,30,116,24],[114,31,116,25,"pauseOffsetCorrection"],[114,52,116,46],[114,53,116,47,"current"],[114,60,116,54],[114,64,117,24],[114,65,117,25,"recyclerViewManager"],[114,84,117,44],[114,85,117,45,"animationOptimizationsEnabled"],[114,114,117,74],[114,116,117,76],[115,14,118,24],[116,14,119,24],[116,18,119,28,"PlatformConfig"],[116,45,119,42],[116,46,119,42,"PlatformConfig"],[116,60,119,42],[116,61,119,43,"supportsOffsetCorrection"],[116,85,119,67],[116,87,119,69],[117,16,120,28],[118,16,121,28],[118,17,121,29,"_b"],[118,19,121,31],[118,22,121,34,"scrollAnchorRef"],[118,37,121,49],[118,38,121,50,"current"],[118,45,121,57],[118,51,121,63],[118,55,121,67],[118,59,121,71,"_b"],[118,61,121,73],[118,66,121,78],[118,71,121,83],[118,72,121,84],[118,75,121,87],[118,80,121,92],[118,81,121,93],[118,84,121,96,"_b"],[118,86,121,98],[118,87,121,99,"scrollBy"],[118,95,121,107],[118,96,121,108,"diff"],[118,100,121,112],[118,101,121,113],[119,14,122,24],[119,15,122,25],[119,21,123,29],[120,16,124,28],[120,22,124,34,"scrollToParams"],[120,36,124,48],[120,39,124,51,"horizontal"],[120,49,124,61],[120,52,125,34],[121,18,126,36,"x"],[121,19,126,37],[121,21,126,39,"recyclerViewManager"],[121,40,126,58],[121,41,126,59,"getAbsoluteLastScrollOffset"],[121,68,126,86],[121,69,126,87],[121,70,126,88],[121,73,126,91,"diff"],[121,77,126,95],[122,18,127,36,"animated"],[122,26,127,44],[122,28,127,46],[123,16,128,32],[123,17,128,33],[123,20,129,34],[124,18,130,36,"y"],[124,19,130,37],[124,21,130,39,"recyclerViewManager"],[124,40,130,58],[124,41,130,59,"getAbsoluteLastScrollOffset"],[124,68,130,86],[124,69,130,87],[124,70,130,88],[124,73,130,91,"diff"],[124,77,130,95],[125,18,131,36,"animated"],[125,26,131,44],[125,28,131,46],[126,16,132,32],[126,17,132,33],[127,16,133,28],[127,17,133,29,"_c"],[127,19,133,31],[127,22,133,34,"scrollViewRef"],[127,35,133,47],[127,36,133,48,"current"],[127,43,133,55],[127,49,133,61],[127,53,133,65],[127,57,133,69,"_c"],[127,59,133,71],[127,64,133,76],[127,69,133,81],[127,70,133,82],[127,73,133,85],[127,78,133,90],[127,79,133,91],[127,82,133,94,"_c"],[127,84,133,96],[127,85,133,97,"scrollTo"],[127,93,133,105],[127,94,133,106,"scrollToParams"],[127,108,133,120],[127,109,133,121],[128,14,134,24],[129,14,135,24],[129,18,135,28,"hasDataChanged"],[129,32,135,42],[129,34,135,44],[130,16,136,28,"updateScrollOffsetWithCallback"],[130,46,136,58],[130,47,136,59,"recyclerViewManager"],[130,66,136,78],[130,67,136,79,"getAbsoluteLastScrollOffset"],[130,94,136,106],[130,95,136,107],[130,96,136,108],[130,99,136,111,"diff"],[130,103,136,115],[130,105,136,117],[130,111,136,123],[130,112,136,125],[130,113,136,126],[130,114,136,127],[131,16,137,28,"recyclerViewManager"],[131,35,137,47],[131,36,137,48,"ignoreScrollEvents"],[131,54,137,66],[131,57,137,69],[131,61,137,73],[132,16,138,28,"setTimeout"],[132,26,138,38],[132,27,138,39],[132,33,138,45],[133,18,139,32,"recyclerViewManager"],[133,37,139,51],[133,38,139,52,"ignoreScrollEvents"],[133,56,139,70],[133,59,139,73],[133,64,139,78],[134,16,140,28],[134,17,140,29],[134,19,140,31],[134,22,140,34],[134,23,140,35],[135,14,141,24],[136,12,142,20],[137,10,143,16],[138,8,144,12],[139,8,145,12,"computeFirstVisibleIndexForOffsetCorrection"],[139,51,145,55],[139,52,145,56],[139,53,145,57],[140,6,146,8],[141,6,147,8,"lastDataLengthRef"],[141,23,147,25],[141,24,147,26,"current"],[141,31,147,33],[141,34,147,36,"recyclerViewManager"],[141,53,147,55],[141,54,147,56,"getDataLength"],[141,67,147,69],[141,68,147,70],[141,69,147,71],[142,4,148,4],[142,5,148,5],[142,7,148,7],[142,8,149,8,"recyclerViewManager"],[142,27,149,27],[142,29,150,8,"scrollAnchorRef"],[142,44,150,23],[142,46,151,8,"scrollViewRef"],[142,59,151,21],[142,61,152,8,"setTimeout"],[142,71,152,18],[142,73,153,8,"updateScrollOffsetWithCallback"],[142,103,153,38],[142,105,154,8,"computeFirstVisibleIndexForOffsetCorrection"],[142,148,154,51],[142,149,155,5],[142,150,155,6],[143,4,156,4],[143,10,156,10,"handlerMethods"],[143,24,156,24],[143,27,156,27],[143,31,156,27,"useMemo"],[143,37,156,34],[143,38,156,34,"useMemo"],[143,45,156,34],[143,47,156,35],[143,53,156,41],[144,6,157,8],[144,13,157,15],[145,8,158,12],[145,12,158,16,"props"],[145,17,158,21,"props"],[145,18,158,21],[145,20,158,24],[146,10,159,16],[146,17,159,23,"recyclerViewManager"],[146,36,159,42],[146,37,159,43,"props"],[146,42,159,48],[147,8,160,12],[147,9,160,13],[148,8,161,12],[149,0,162,0],[150,0,163,0],[151,0,164,0],[152,8,165,12,"scrollToOffset"],[152,22,165,26],[152,24,165,28,"scrollToOffset"],[152,25,165,29],[153,10,165,31,"offset"],[153,16,165,37],[154,10,165,39,"animated"],[154,18,165,47],[155,10,165,49,"skipFirstItemOffset"],[155,29,165,68],[155,32,165,71],[156,8,165,77],[156,9,165,78],[156,14,165,83],[157,10,166,16],[157,16,166,22],[158,12,166,24,"horizontal"],[159,10,166,35],[159,11,166,36],[159,14,166,39,"recyclerViewManager"],[159,33,166,58],[159,34,166,59,"props"],[159,39,166,64],[160,10,167,16],[160,14,167,20,"scrollViewRef"],[160,27,167,33],[160,28,167,34,"current"],[160,35,167,41],[160,37,167,43],[161,12,168,20],[162,12,169,20],[162,16,169,24,"I18nManager"],[162,27,169,35],[162,28,169,35,"default"],[162,35,169,35],[162,36,169,36,"isRTL"],[162,41,169,41],[162,45,169,45,"horizontal"],[162,55,169,55],[162,57,169,57],[163,14,170,24],[164,14,171,24,"offset"],[164,20,171,30],[164,23,172,28],[164,27,172,28,"adjustOffsetForRTL"],[164,51,172,46],[164,52,172,46,"adjustOffsetForRTL"],[164,70,172,46],[164,72,172,47,"offset"],[164,78,172,53],[164,80,172,55,"recyclerViewManager"],[164,99,172,74],[164,100,172,75,"getChildContainerDimensions"],[164,127,172,102],[164,128,172,103],[164,129,172,104],[164,130,172,105,"width"],[164,135,172,110],[164,137,172,112,"recyclerViewManager"],[164,156,172,131],[164,157,172,132,"getWindowSize"],[164,170,172,145],[164,171,172,146],[164,172,172,147],[164,173,172,148,"width"],[164,178,172,153],[164,179,172,154],[164,183,173,33,"skipFirstItemOffset"],[164,202,173,52],[164,205,174,38,"recyclerViewManager"],[164,224,174,57],[164,225,174,58,"firstItemOffset"],[164,240,174,73],[164,243,175,38],[164,244,175,39,"recyclerViewManager"],[164,263,175,58],[164,264,175,59,"firstItemOffset"],[164,279,175,74],[164,280,175,75],[165,12,176,20],[166,12,177,20],[167,12,178,20],[167,18,178,26,"adjustedOffset"],[167,32,178,40],[167,35,178,43,"offset"],[167,41,178,49],[167,45,179,25,"skipFirstItemOffset"],[167,64,179,44],[167,67,179,47],[167,68,179,48],[167,71,179,51,"recyclerViewManager"],[167,90,179,70],[167,91,179,71,"firstItemOffset"],[167,106,179,86],[167,107,179,87],[168,12,180,20],[168,18,180,26,"scrollTo"],[168,26,180,34],[168,29,180,37,"horizontal"],[168,39,180,47],[168,42,181,26],[169,14,181,28,"x"],[169,15,181,29],[169,17,181,31,"adjustedOffset"],[169,31,181,45],[170,14,181,47,"y"],[170,15,181,48],[170,17,181,50],[171,12,181,52],[171,13,181,53],[171,16,182,26],[172,14,182,28,"x"],[172,15,182,29],[172,17,182,31],[172,18,182,32],[173,14,182,34,"y"],[173,15,182,35],[173,17,182,37,"adjustedOffset"],[174,12,182,52],[174,13,182,53],[175,12,183,20,"scrollViewRef"],[175,25,183,33],[175,26,183,34,"current"],[175,33,183,41],[175,34,183,42,"scrollTo"],[175,42,183,50],[175,43,183,51],[176,14,184,24],[176,17,184,27,"scrollTo"],[176,25,184,35],[177,14,185,24,"animated"],[178,12,186,20],[178,13,186,21],[178,14,186,22],[179,10,187,16],[180,8,188,12],[180,9,188,13],[181,8,189,12,"clearLayoutCacheOnUpdate"],[181,32,189,36],[181,34,189,38,"clearLayoutCacheOnUpdate"],[181,35,189,38],[181,40,189,44],[182,10,190,16,"recyclerViewManager"],[182,29,190,35],[182,30,190,36,"markLayoutManagerDirty"],[182,52,190,58],[182,53,190,59],[182,54,190,60],[183,8,191,12],[183,9,191,13],[184,8,192,12],[185,8,193,12,"flashScrollIndicators"],[185,29,193,33],[185,31,193,35,"flashScrollIndicators"],[185,32,193,35],[185,37,193,41],[186,10,194,16,"scrollViewRef"],[186,23,194,29],[186,24,194,30,"current"],[186,31,194,37],[186,32,194,38,"flashScrollIndicators"],[186,53,194,59],[186,54,194,60],[186,55,194,61],[187,8,195,12],[187,9,195,13],[188,8,196,12,"getNativeScrollRef"],[188,26,196,30],[188,28,196,32,"getNativeScrollRef"],[188,29,196,32],[188,34,196,38],[189,10,197,16],[189,17,197,23,"scrollViewRef"],[189,30,197,36],[189,31,197,37,"current"],[189,38,197,44],[190,8,198,12],[190,9,198,13],[191,8,199,12,"getScrollResponder"],[191,26,199,30],[191,28,199,32,"getScrollResponder"],[191,29,199,32],[191,34,199,38],[192,10,200,16],[192,17,200,23,"scrollViewRef"],[192,30,200,36],[192,31,200,37,"current"],[192,38,200,44],[192,39,200,45,"getScrollResponder"],[192,57,200,63],[192,58,200,64],[192,59,200,65],[193,8,201,12],[193,9,201,13],[194,8,202,12,"getScrollableNode"],[194,25,202,29],[194,27,202,31,"getScrollableNode"],[194,28,202,31],[194,33,202,37],[195,10,203,16],[195,17,203,23,"scrollViewRef"],[195,30,203,36],[195,31,203,37,"current"],[195,38,203,44],[195,39,203,45,"getScrollableNode"],[195,56,203,62],[195,57,203,63],[195,58,203,64],[196,8,204,12],[196,9,204,13],[197,8,205,12],[198,0,206,0],[199,0,207,0],[200,8,208,12,"scrollToEnd"],[200,19,208,23],[200,21,208,25],[200,27,208,25,"scrollToEnd"],[200,28,208,32],[201,10,208,34,"animated"],[202,8,208,43],[202,9,208,44],[202,12,208,47],[202,13,208,48],[202,14,208,49],[202,19,208,54],[203,10,209,16],[203,16,209,22],[204,12,209,24,"data"],[205,10,209,29],[205,11,209,30],[205,14,209,33,"recyclerViewManager"],[205,33,209,52],[205,34,209,53,"props"],[205,39,209,58],[206,10,210,16],[206,14,210,20,"data"],[206,18,210,24],[206,22,210,28,"data"],[206,26,210,32],[206,27,210,33,"length"],[206,33,210,39],[206,36,210,42],[206,37,210,43],[206,39,210,45],[207,12,211,20],[207,18,211,26,"lastIndex"],[207,27,211,35],[207,30,211,38,"data"],[207,34,211,42],[207,35,211,43,"length"],[207,41,211,49],[207,44,211,52],[207,45,211,53],[208,12,212,20],[208,16,212,24],[208,17,212,25,"recyclerViewManager"],[208,36,212,44],[208,37,212,45,"getEngagedIndices"],[208,54,212,62],[208,55,212,63],[208,56,212,64],[208,57,212,65,"includes"],[208,65,212,73],[208,66,212,74,"lastIndex"],[208,75,212,83],[208,76,212,84],[208,78,212,86],[209,14,213,24],[209,20,213,30,"handlerMethods"],[209,34,213,44],[209,35,213,45,"scrollToIndex"],[209,48,213,58],[209,49,213,59],[210,16,214,28,"index"],[210,21,214,33],[210,23,214,35,"lastIndex"],[210,32,214,44],[211,16,215,28,"animated"],[212,14,216,24],[212,15,216,25],[212,16,216,26],[213,12,217,20],[214,10,218,16],[215,10,219,16,"setTimeout"],[215,20,219,26],[215,21,219,27],[215,27,219,33],[216,12,220,20],[216,16,220,24,"_a"],[216,18,220,26],[217,12,221,20],[217,13,221,21,"_a"],[217,15,221,23],[217,18,221,26,"scrollViewRef"],[217,31,221,39],[217,32,221,40,"current"],[217,39,221,47],[217,45,221,53],[217,49,221,57],[217,53,221,61,"_a"],[217,55,221,63],[217,60,221,68],[217,65,221,73],[217,66,221,74],[217,69,221,77],[217,74,221,82],[217,75,221,83],[217,78,221,86,"_a"],[217,80,221,88],[217,81,221,89,"scrollToEnd"],[217,92,221,100],[217,93,221,101],[218,14,221,103,"animated"],[219,12,221,112],[219,13,221,113],[219,14,221,114],[220,10,222,16],[220,11,222,17],[220,13,222,19],[220,14,222,20],[220,15,222,21],[221,8,223,12],[221,9,223,13],[222,8,224,12],[223,0,225,0],[224,0,226,0],[225,8,227,12,"scrollToTop"],[225,19,227,23],[225,21,227,25,"scrollToTop"],[225,22,227,26],[226,10,227,28,"animated"],[227,8,227,37],[227,9,227,38],[227,12,227,41],[227,13,227,42],[227,14,227,43],[227,19,227,48],[228,10,228,16,"handlerMethods"],[228,24,228,30],[228,25,228,31,"scrollToOffset"],[228,39,228,45],[228,40,228,46],[229,12,229,20,"offset"],[229,18,229,26],[229,20,229,28],[229,21,229,29],[230,12,230,20,"animated"],[231,10,231,16],[231,11,231,17],[231,12,231,18],[232,8,232,12],[232,9,232,13],[233,8,233,12],[234,0,234,0],[235,0,235,0],[236,0,236,0],[237,0,237,0],[238,8,238,12,"scrollToIndex"],[238,21,238,25],[238,23,238,27,"scrollToIndex"],[238,24,238,28],[239,10,238,30,"index"],[239,15,238,35],[240,10,238,37,"animated"],[240,18,238,45],[241,10,238,47,"viewPosition"],[241,22,238,59],[242,10,238,61,"viewOffset"],[243,8,238,73],[243,9,238,74],[243,14,238,79],[244,10,239,16],[244,17,239,23],[244,21,239,27,"Promise"],[244,28,239,34],[244,29,239,36,"resolve"],[244,36,239,43],[244,40,239,48],[245,12,240,20],[245,18,240,26],[246,14,240,28,"horizontal"],[247,12,240,39],[247,13,240,40],[247,16,240,43,"recyclerViewManager"],[247,35,240,62],[247,36,240,63,"props"],[247,41,240,68],[248,12,241,20],[248,16,241,24,"scrollViewRef"],[248,29,241,37],[248,30,241,38,"current"],[248,37,241,45],[248,41,242,24,"index"],[248,46,242,29],[248,50,242,33],[248,51,242,34],[248,55,243,24,"index"],[248,60,243,29],[248,63,243,32,"recyclerViewManager"],[248,82,243,51],[248,83,243,52,"getDataLength"],[248,96,243,65],[248,97,243,66],[248,98,243,67],[248,100,243,69],[249,14,244,24],[250,14,245,24,"pauseOffsetCorrection"],[250,35,245,45],[250,36,245,46,"current"],[250,43,245,53],[250,46,245,56],[250,50,245,60],[251,14,246,24,"recyclerViewManager"],[251,33,246,43],[251,34,246,44,"setOffsetProjectionEnabled"],[251,60,246,70],[251,61,246,71],[251,66,246,76],[251,67,246,77],[252,14,247,24],[252,20,247,30,"getFinalOffset"],[252,34,247,44],[252,37,247,47,"getFinalOffset"],[252,38,247,47],[252,43,247,53],[253,16,248,28],[253,22,248,34,"layout"],[253,28,248,40],[253,31,248,43,"recyclerViewManager"],[253,50,248,62],[253,51,248,63,"getLayout"],[253,60,248,72],[253,61,248,73,"index"],[253,66,248,78],[253,67,248,79],[254,16,249,28],[254,22,249,34,"offset"],[254,28,249,40],[254,31,249,43,"horizontal"],[254,41,249,53],[254,44,249,56,"layout"],[254,50,249,62],[254,51,249,63,"x"],[254,52,249,64],[254,55,249,67,"layout"],[254,61,249,73],[254,62,249,74,"y"],[254,63,249,75],[255,16,250,28],[255,20,250,32,"finalOffset"],[255,31,250,43],[255,34,250,46,"offset"],[255,40,250,52],[256,16,251,28],[257,16,252,28],[257,20,252,32,"viewPosition"],[257,32,252,44],[257,37,252,49,"undefined"],[257,46,252,58],[257,50,252,62,"viewOffset"],[257,60,252,72],[257,65,252,77,"undefined"],[257,74,252,86],[257,76,252,88],[258,18,253,32],[258,24,253,38,"containerSize"],[258,37,253,51],[258,40,253,54,"horizontal"],[258,50,253,64],[258,53,254,38,"recyclerViewManager"],[258,72,254,57],[258,73,254,58,"getWindowSize"],[258,86,254,71],[258,87,254,72],[258,88,254,73],[258,89,254,74,"width"],[258,94,254,79],[258,97,255,38,"recyclerViewManager"],[258,116,255,57],[258,117,255,58,"getWindowSize"],[258,130,255,71],[258,131,255,72],[258,132,255,73],[258,133,255,74,"height"],[258,139,255,80],[259,18,256,32],[259,24,256,38,"itemSize"],[259,32,256,46],[259,35,256,49,"horizontal"],[259,45,256,59],[259,48,256,62,"layout"],[259,54,256,68],[259,55,256,69,"width"],[259,60,256,74],[259,63,256,77,"layout"],[259,69,256,83],[259,70,256,84,"height"],[259,76,256,90],[260,18,257,32],[260,22,257,36,"viewPosition"],[260,34,257,48],[260,39,257,53,"undefined"],[260,48,257,62],[260,50,257,64],[261,20,258,36],[262,20,259,36,"finalOffset"],[262,31,259,47],[262,34,260,40,"offset"],[262,40,260,46],[262,43,260,49],[262,44,260,50,"containerSize"],[262,57,260,63],[262,60,260,66,"itemSize"],[262,68,260,74],[262,72,260,78,"viewPosition"],[262,84,260,90],[263,18,261,32],[264,18,262,32],[264,22,262,36,"viewOffset"],[264,32,262,46],[264,37,262,51,"undefined"],[264,46,262,60],[264,48,262,62],[265,20,263,36,"finalOffset"],[265,31,263,47],[265,35,263,51,"viewOffset"],[265,45,263,61],[266,18,264,32],[267,16,265,28],[268,16,266,28],[268,23,266,35,"finalOffset"],[268,34,266,46],[268,37,266,49,"recyclerViewManager"],[268,56,266,68],[268,57,266,69,"firstItemOffset"],[268,72,266,84],[269,14,267,24],[269,15,267,25],[270,14,268,24],[270,20,268,30,"lastAbsoluteScrollOffset"],[270,44,268,54],[270,47,268,57,"recyclerViewManager"],[270,66,268,76],[270,67,268,77,"getAbsoluteLastScrollOffset"],[270,94,268,104],[270,95,268,105],[270,96,268,106],[271,14,269,24],[271,20,269,30,"bufferForScroll"],[271,35,269,45],[271,38,269,48,"horizontal"],[271,48,269,58],[271,51,270,30,"recyclerViewManager"],[271,70,270,49],[271,71,270,50,"getWindowSize"],[271,84,270,63],[271,85,270,64],[271,86,270,65],[271,87,270,66,"width"],[271,92,270,71],[271,95,271,30,"recyclerViewManager"],[271,114,271,49],[271,115,271,50,"getWindowSize"],[271,128,271,63],[271,129,271,64],[271,130,271,65],[271,131,271,66,"height"],[271,137,271,72],[272,14,272,24],[272,20,272,30,"bufferForCompute"],[272,36,272,46],[272,39,272,49,"bufferForScroll"],[272,54,272,64],[272,57,272,67],[272,58,272,68],[273,14,273,24],[273,20,273,30,"getStartScrollOffset"],[273,40,273,50],[273,43,273,53,"getStartScrollOffset"],[273,44,273,53],[273,49,273,59],[274,16,274,28],[274,20,274,32,"lastScrollOffset"],[274,36,274,48],[274,39,274,51,"lastAbsoluteScrollOffset"],[274,63,274,75],[275,16,275,28],[275,22,275,34,"finalOffset"],[275,33,275,45],[275,36,275,48,"getFinalOffset"],[275,50,275,62],[275,51,275,63],[275,52,275,64],[276,16,276,28],[276,20,276,32,"finalOffset"],[276,31,276,43],[276,34,276,46,"lastScrollOffset"],[276,50,276,62],[276,52,276,64],[277,18,277,32,"lastScrollOffset"],[277,34,277,48],[277,37,277,51,"Math"],[277,41,277,55],[277,42,277,56,"max"],[277,45,277,59],[277,46,277,60,"finalOffset"],[277,57,277,71],[277,60,277,74,"bufferForCompute"],[277,76,277,90],[277,78,277,92,"lastScrollOffset"],[277,94,277,108],[277,95,277,109],[278,18,278,32,"recyclerViewManager"],[278,37,278,51],[278,38,278,52,"setScrollDirection"],[278,56,278,70],[278,57,278,71],[278,66,278,80],[278,67,278,81],[279,16,279,28],[279,17,279,29],[279,23,280,33],[280,18,281,32,"lastScrollOffset"],[280,34,281,48],[280,37,281,51,"Math"],[280,41,281,55],[280,42,281,56,"min"],[280,45,281,59],[280,46,281,60,"finalOffset"],[280,57,281,71],[280,60,281,74,"bufferForCompute"],[280,76,281,90],[280,78,281,92,"lastScrollOffset"],[280,94,281,108],[280,95,281,109],[281,18,282,32,"recyclerViewManager"],[281,37,282,51],[281,38,282,52,"setScrollDirection"],[281,56,282,70],[281,57,282,71],[281,67,282,81],[281,68,282,82],[282,16,283,28],[283,16,284,28],[283,23,284,35,"lastScrollOffset"],[283,39,284,51],[284,14,285,24],[284,15,285,25],[285,14,286,24],[285,18,286,28,"initialTargetOffset"],[285,37,286,47],[285,40,286,50,"getFinalOffset"],[285,54,286,64],[285,55,286,65],[285,56,286,66],[286,14,287,24],[286,18,287,28,"initialStartScrollOffset"],[286,42,287,52],[286,45,287,55,"getStartScrollOffset"],[286,65,287,75],[286,66,287,76],[286,67,287,77],[287,14,288,24],[287,18,288,28,"finalOffset"],[287,29,288,39],[287,32,288,42,"initialTargetOffset"],[287,51,288,61],[288,14,289,24],[288,18,289,28,"startScrollOffset"],[288,35,289,45],[288,38,289,48,"initialStartScrollOffset"],[288,62,289,72],[289,14,290,24],[289,20,290,30,"steps"],[289,25,290,35],[289,28,290,38],[289,29,290,39],[290,14,291,24],[291,0,292,0],[292,0,293,0],[293,0,294,0],[294,0,295,0],[295,0,296,0],[296,14,297,24],[296,20,297,30,"performScrollStep"],[296,37,297,47],[296,40,297,51,"currentStep"],[296,51,297,62],[296,55,297,67],[297,16,298,28],[298,16,299,28],[298,20,299,32,"isUnmounted"],[298,31,299,43],[298,32,299,44,"current"],[298,39,299,51],[298,41,299,53],[299,18,300,32,"resolve"],[299,25,300,39],[299,26,300,40],[299,27,300,41],[300,18,301,32],[301,16,302,28],[301,17,302,29],[301,23,303,33],[301,27,303,37,"currentStep"],[301,38,303,48],[301,42,303,52,"steps"],[301,47,303,57],[301,49,303,59],[302,18,304,32],[303,18,305,32,"finishScrollToIndex"],[303,37,305,51],[303,38,305,52],[303,39,305,53],[304,18,306,32],[305,16,307,28],[306,16,308,28],[307,16,309,28],[308,16,310,28],[309,16,311,28],[309,22,311,34,"nextOffset"],[309,32,311,44],[309,35,311,47,"animated"],[309,43,311,55],[309,46,312,34,"finalOffset"],[309,57,312,45],[309,60,313,36],[309,61,313,37,"startScrollOffset"],[309,78,313,54],[309,81,313,57,"finalOffset"],[309,92,313,68],[309,97,314,41,"currentStep"],[309,108,314,52],[309,112,314,56,"steps"],[309,117,314,61],[309,120,314,64],[309,121,314,65],[309,122,314,66],[309,123,314,67],[309,126,315,34,"startScrollOffset"],[309,143,315,51],[309,146,316,36],[309,147,316,37,"finalOffset"],[309,158,316,48],[309,161,316,51,"startScrollOffset"],[309,178,316,68],[309,183,317,41,"currentStep"],[309,194,317,52],[309,198,317,56,"steps"],[309,203,317,61],[309,206,317,64],[309,207,317,65],[309,208,317,66],[309,209,317,67],[310,16,318,28],[311,16,319,28,"updateScrollOffsetWithCallback"],[311,46,319,58],[311,47,319,59,"nextOffset"],[311,57,319,69],[311,59,319,71],[311,65,319,77],[312,18,320,32],[313,18,321,32],[313,22,321,36,"index"],[313,27,321,41],[313,31,321,45,"recyclerViewManager"],[313,50,321,64],[313,51,321,65,"getDataLength"],[313,64,321,78],[313,65,321,79],[313,66,321,80],[313,68,321,82],[314,20,322,36],[315,20,323,36,"handlerMethods"],[315,34,323,50],[315,35,323,51,"scrollToEnd"],[315,46,323,62],[315,47,323,63],[316,22,323,65,"animated"],[317,20,323,74],[317,21,323,75],[317,22,323,76],[318,20,324,36,"resolve"],[318,27,324,43],[318,28,324,44],[318,29,324,45],[318,30,324,46],[318,31,324,47],[319,20,325,36],[320,18,326,32],[321,18,327,32],[322,18,328,32],[322,24,328,38,"newFinalOffset"],[322,38,328,52],[322,41,328,55,"getFinalOffset"],[322,55,328,69],[322,56,328,70],[322,57,328,71],[323,18,329,32],[323,22,329,37,"newFinalOffset"],[323,36,329,51],[323,39,329,54,"initialTargetOffset"],[323,58,329,73],[323,62,330,36,"newFinalOffset"],[323,76,330,50],[323,79,330,53,"initialStartScrollOffset"],[323,103,330,77],[323,107,331,37,"newFinalOffset"],[323,121,331,51],[323,124,331,54,"initialTargetOffset"],[323,143,331,73],[323,147,332,40,"newFinalOffset"],[323,161,332,54],[323,164,332,57,"initialStartScrollOffset"],[323,188,332,82],[323,190,332,84],[324,20,333,36],[325,20,334,36,"finalOffset"],[325,31,334,47],[325,34,334,50,"newFinalOffset"],[325,48,334,64],[326,20,335,36,"startScrollOffset"],[326,37,335,53],[326,40,335,56,"getStartScrollOffset"],[326,60,335,76],[326,61,335,77],[326,62,335,78],[327,20,336,36,"initialTargetOffset"],[327,39,336,55],[327,42,336,58,"newFinalOffset"],[327,56,336,72],[328,20,337,36,"initialStartScrollOffset"],[328,44,337,60],[328,47,337,63,"startScrollOffset"],[328,64,337,80],[329,20,338,36,"performScrollStep"],[329,37,338,53],[329,38,338,54],[329,39,338,55],[329,40,338,56],[329,41,338,57],[329,42,338,58],[330,18,339,32],[330,19,339,33],[330,25,340,37],[331,20,341,36],[332,20,342,36,"performScrollStep"],[332,37,342,53],[332,38,342,54,"currentStep"],[332,49,342,65],[332,52,342,68],[332,53,342,69],[332,54,342,70],[333,18,343,32],[334,16,344,28],[334,17,344,29],[334,18,344,30],[335,14,345,24],[335,15,345,25],[336,14,346,24],[337,0,347,0],[338,0,348,0],[339,0,349,0],[340,14,350,24],[340,20,350,30,"finishScrollToIndex"],[340,39,350,49],[340,42,350,52,"finishScrollToIndex"],[340,43,350,52],[340,48,350,58],[341,16,351,28,"finalOffset"],[341,27,351,39],[341,30,351,42,"getFinalOffset"],[341,44,351,56],[341,45,351,57],[341,46,351,58],[342,16,352,28],[342,22,352,34,"maxOffset"],[342,31,352,43],[342,34,352,46,"recyclerViewManager"],[342,53,352,65],[342,54,352,66,"getMaxScrollOffset"],[342,72,352,84],[342,73,352,85],[342,74,352,86],[343,16,353,28],[343,20,353,32,"finalOffset"],[343,31,353,43],[343,34,353,46,"maxOffset"],[343,43,353,55],[343,45,353,57],[344,18,354,32,"finalOffset"],[344,29,354,43],[344,32,354,46,"maxOffset"],[344,41,354,55],[345,16,355,28],[346,16,356,28],[346,20,356,32,"animated"],[346,28,356,40],[346,30,356,42],[347,18,357,32],[348,18,358,32],[349,18,359,32,"handlerMethods"],[349,32,359,46],[349,33,359,47,"scrollToOffset"],[349,47,359,61],[349,48,359,62],[350,20,360,36,"offset"],[350,26,360,42],[350,28,360,44,"startScrollOffset"],[350,45,360,61],[351,20,361,36,"animated"],[351,28,361,44],[351,30,361,46],[351,35,361,51],[352,20,362,36,"skipFirstItemOffset"],[352,39,362,55],[352,41,362,57],[353,18,363,32],[353,19,363,33],[353,20,363,34],[354,16,364,28],[355,16,365,28],[356,16,366,28,"handlerMethods"],[356,30,366,42],[356,31,366,43,"scrollToOffset"],[356,45,366,57],[356,46,366,58],[357,18,367,32,"offset"],[357,24,367,38],[357,26,367,40,"finalOffset"],[357,37,367,51],[358,18,368,32,"animated"],[358,26,368,40],[359,18,369,32,"skipFirstItemOffset"],[359,37,369,51],[359,39,369,53],[360,16,370,28],[360,17,370,29],[360,18,370,30],[361,16,371,28],[362,16,372,28],[363,16,373,28,"setTimeout"],[363,26,373,38],[363,27,373,39],[363,33,373,45],[364,18,374,32,"pauseOffsetCorrection"],[364,39,374,53],[364,40,374,54,"current"],[364,47,374,61],[364,50,374,64],[364,55,374,69],[365,18,375,32,"recyclerViewManager"],[365,37,375,51],[365,38,375,52,"setOffsetProjectionEnabled"],[365,64,375,78],[365,65,375,79],[365,69,375,83],[365,70,375,84],[366,18,376,32,"resolve"],[366,25,376,39],[366,26,376,40],[366,27,376,41],[366,28,376,42],[366,29,376,43],[367,16,377,28],[367,17,377,29],[367,19,377,31,"animated"],[367,27,377,39],[367,30,377,42],[367,33,377,45],[367,36,377,48],[367,39,377,51],[367,40,377,52],[368,14,378,24],[368,15,378,25],[369,14,379,24],[370,14,380,24,"performScrollStep"],[370,31,380,41],[370,32,380,42],[370,33,380,43],[370,34,380,44],[371,12,381,20],[371,13,381,21],[371,19,382,25],[372,14,383,24],[373,14,384,24,"resolve"],[373,21,384,31],[373,22,384,32],[373,23,384,33],[374,12,385,20],[375,10,386,16],[375,11,386,17],[375,12,386,18],[376,8,387,12],[376,9,387,13],[377,8,388,12],[378,0,389,0],[379,0,390,0],[380,0,391,0],[381,8,392,12,"scrollToItem"],[381,20,392,24],[381,22,392,26,"scrollToItem"],[381,23,392,27],[382,10,392,29,"item"],[382,14,392,33],[383,10,392,35,"animated"],[383,18,392,43],[384,10,392,45,"viewPosition"],[384,22,392,57],[385,10,392,59,"viewOffset"],[386,8,392,71],[386,9,392,72],[386,14,392,77],[387,10,393,16],[387,16,393,22],[388,12,393,24,"data"],[389,10,393,29],[389,11,393,30],[389,14,393,33,"recyclerViewManager"],[389,33,393,52],[389,34,393,53,"props"],[389,39,393,58],[390,10,394,16],[390,14,394,20,"scrollViewRef"],[390,27,394,33],[390,28,394,34,"current"],[390,35,394,41],[390,39,394,45,"data"],[390,43,394,49],[390,45,394,51],[391,12,395,20],[392,12,396,20],[392,18,396,26,"index"],[392,23,396,31],[392,26,396,34,"data"],[392,30,396,38],[392,31,396,39,"findIndex"],[392,40,396,48],[392,41,396,50,"dataItem"],[392,49,396,58],[392,53,396,63,"dataItem"],[392,61,396,71],[392,66,396,76,"item"],[392,70,396,80],[392,71,396,81],[393,12,397,20],[393,16,397,24,"index"],[393,21,397,29],[393,25,397,33],[393,26,397,34],[393,28,397,36],[394,14,398,24,"handlerMethods"],[394,28,398,38],[394,29,398,39,"scrollToIndex"],[394,42,398,52],[394,43,398,53],[395,16,399,28,"index"],[395,21,399,33],[396,16,400,28,"animated"],[396,24,400,36],[397,16,401,28,"viewPosition"],[397,28,401,40],[398,16,402,28,"viewOffset"],[399,14,403,24],[399,15,403,25],[399,16,403,26],[400,12,404,20],[401,10,405,16],[402,8,406,12],[402,9,406,13],[403,8,407,12],[404,8,408,12,"getFirstItemOffset"],[404,26,408,30],[404,28,408,32,"getFirstItemOffset"],[404,29,408,32],[404,34,408,38],[405,10,409,16],[405,17,409,23,"recyclerViewManager"],[405,36,409,42],[405,37,409,43,"firstItemOffset"],[405,52,409,58],[406,8,410,12],[406,9,410,13],[407,8,411,12,"getWindowSize"],[407,21,411,25],[407,23,411,27,"getWindowSize"],[407,24,411,27],[407,29,411,33],[408,10,412,16],[408,17,412,23,"recyclerViewManager"],[408,36,412,42],[408,37,412,43,"getWindowSize"],[408,50,412,56],[408,51,412,57],[408,52,412,58],[409,8,413,12],[409,9,413,13],[410,8,414,12,"getLayout"],[410,17,414,21],[410,19,414,24,"index"],[410,24,414,29],[410,28,414,34],[411,10,415,16],[411,17,415,23,"recyclerViewManager"],[411,36,415,42],[411,37,415,43,"tryGetLayout"],[411,49,415,55],[411,50,415,56,"index"],[411,55,415,61],[411,56,415,62],[412,8,416,12],[412,9,416,13],[413,8,417,12,"getAbsoluteLastScrollOffset"],[413,35,417,39],[413,37,417,41,"getAbsoluteLastScrollOffset"],[413,38,417,41],[413,43,417,47],[414,10,418,16],[414,17,418,23,"recyclerViewManager"],[414,36,418,42],[414,37,418,43,"getAbsoluteLastScrollOffset"],[414,64,418,70],[414,65,418,71],[414,66,418,72],[415,8,419,12],[415,9,419,13],[416,8,420,12,"getChildContainerDimensions"],[416,35,420,39],[416,37,420,41,"getChildContainerDimensions"],[416,38,420,41],[416,43,420,47],[417,10,421,16],[417,17,421,23,"recyclerViewManager"],[417,36,421,42],[417,37,421,43,"getChildContainerDimensions"],[417,64,421,70],[417,65,421,71],[417,66,421,72],[418,8,422,12],[418,9,422,13],[419,8,423,12,"recordInteraction"],[419,25,423,29],[419,27,423,31,"recordInteraction"],[419,28,423,31],[419,33,423,37],[420,10,424,16,"recyclerViewManager"],[420,29,424,35],[420,30,424,36,"recordInteraction"],[420,47,424,53],[420,48,424,54],[420,49,424,55],[421,8,425,12],[421,9,425,13],[422,8,426,12,"computeVisibleIndices"],[422,29,426,33],[422,31,426,35,"computeVisibleIndices"],[422,32,426,35],[422,37,426,41],[423,10,427,16],[423,17,427,23,"recyclerViewManager"],[423,36,427,42],[423,37,427,43,"computeVisibleIndices"],[423,58,427,64],[423,59,427,65],[423,60,427,66],[424,8,428,12],[424,9,428,13],[425,8,429,12,"getFirstVisibleIndex"],[425,28,429,32],[425,30,429,34,"getFirstVisibleIndex"],[425,31,429,34],[425,36,429,40],[426,10,430,16],[426,17,430,23,"recyclerViewManager"],[426,36,430,42],[426,37,430,43,"computeVisibleIndices"],[426,58,430,64],[426,59,430,65],[426,60,430,66],[426,61,430,67,"startIndex"],[426,71,430,77],[427,8,431,12],[427,9,431,13],[428,8,432,12,"recomputeViewableItems"],[428,30,432,34],[428,32,432,36,"recomputeViewableItems"],[428,33,432,36],[428,38,432,42],[429,10,433,16,"recyclerViewManager"],[429,29,433,35],[429,30,433,36,"recomputeViewableItems"],[429,52,433,58],[429,53,433,59],[429,54,433,60],[430,8,434,12],[430,9,434,13],[431,8,435,12],[432,0,436,0],[433,0,437,0],[434,8,438,12,"prepareForLayoutAnimationRender"],[434,39,438,43],[434,41,438,45,"prepareForLayoutAnimationRender"],[434,42,438,45],[434,47,438,51],[435,10,439,16],[435,14,439,20],[435,15,439,21,"recyclerViewManager"],[435,34,439,40],[435,35,439,41,"props"],[435,40,439,46],[435,41,439,47,"keyExtractor"],[435,53,439,59],[435,55,439,61],[436,12,440,20,"console"],[436,19,440,27],[436,20,440,28,"warn"],[436,24,440,32],[436,25,440,33,"WarningMessages"],[436,47,440,48],[436,48,440,48,"WarningMessages"],[436,63,440,48],[436,64,440,49,"keyExtractorNotDefinedForAnimation"],[436,98,440,83],[436,99,440,84],[437,10,441,16],[438,10,442,16,"recyclerViewManager"],[438,29,442,35],[438,30,442,36,"animationOptimizationsEnabled"],[438,59,442,65],[438,62,442,68],[438,66,442,72],[439,8,443,12],[440,6,444,8],[440,7,444,9],[441,4,445,4],[441,5,445,5],[441,7,445,7],[441,8,446,8,"recyclerViewManager"],[441,27,446,27],[441,29,447,8,"scrollViewRef"],[441,42,447,21],[441,44,448,8,"setTimeout"],[441,54,448,18],[441,56,449,8,"isUnmounted"],[441,67,449,19],[441,69,450,8,"updateScrollOffsetWithCallback"],[441,99,450,38],[441,100,451,5],[441,101,451,6],[442,4,452,4],[442,10,452,10,"applyInitialScrollIndex"],[442,33,452,33],[442,36,452,36],[442,40,452,36,"useCallback"],[442,46,452,47],[442,47,452,47,"useCallback"],[442,58,452,47],[442,60,452,48],[442,66,452,54],[443,6,453,8],[443,10,453,12,"_a"],[443,12,453,14],[443,14,453,16,"_b"],[443,16,453,18],[443,18,453,20,"_c"],[443,20,453,22],[444,6,454,8],[444,12,454,14],[445,8,454,16,"horizontal"],[445,18,454,26],[446,8,454,28,"data"],[446,12,454,32],[447,8,454,34,"initialScrollIndexParams"],[448,6,454,59],[448,7,454,60],[448,10,454,63,"recyclerViewManager"],[448,29,454,82],[448,30,454,83,"props"],[448,35,454,88],[449,6,455,8],[449,12,455,14,"initialScrollIndex"],[449,30,455,32],[449,33,455,35],[449,34,455,36,"_a"],[449,36,455,38],[449,39,455,41,"recyclerViewManager"],[449,58,455,60],[449,59,455,61,"getInitialScrollIndex"],[449,80,455,82],[449,81,455,83],[449,82,455,84],[449,88,455,90],[449,92,455,94],[449,96,455,98,"_a"],[449,98,455,100],[449,103,455,105],[449,108,455,110],[449,109,455,111],[449,112,455,114,"_a"],[449,114,455,116],[449,117,455,119],[449,118,455,120],[449,119,455,121],[450,6,456,8],[450,12,456,14,"dataLength"],[450,22,456,24],[450,25,456,27],[450,26,456,28,"_b"],[450,28,456,30],[450,31,456,33,"data"],[450,35,456,37],[450,40,456,42],[450,44,456,46],[450,48,456,50,"data"],[450,52,456,54],[450,57,456,59],[450,62,456,64],[450,63,456,65],[450,66,456,68],[450,71,456,73],[450,72,456,74],[450,75,456,77,"data"],[450,79,456,81],[450,80,456,82,"length"],[450,86,456,88],[450,92,456,94],[450,96,456,98],[450,100,456,102,"_b"],[450,102,456,104],[450,107,456,109],[450,112,456,114],[450,113,456,115],[450,116,456,118,"_b"],[450,118,456,120],[450,121,456,123],[450,122,456,124],[451,6,457,8],[451,10,457,12,"initialScrollIndex"],[451,28,457,30],[451,32,457,34],[451,33,457,35],[451,37,458,12,"initialScrollIndex"],[451,55,458,30],[451,58,458,33,"dataLength"],[451,68,458,43],[451,72,459,12],[451,73,459,13,"initialScrollCompletedRef"],[451,98,459,38],[451,99,459,39,"current"],[451,106,459,46],[451,110,460,12,"recyclerViewManager"],[451,129,460,31],[451,130,460,32,"getIsFirstLayoutComplete"],[451,154,460,56],[451,155,460,57],[451,156,460,58],[451,158,460,60],[452,8,461,12],[453,8,462,12,"setTimeout"],[453,18,462,22],[453,19,462,23],[453,25,462,29],[454,10,463,16,"initialScrollCompletedRef"],[454,35,463,41],[454,36,463,42,"current"],[454,43,463,49],[454,46,463,52],[454,50,463,56],[455,10,464,16,"pauseOffsetCorrection"],[455,31,464,37],[455,32,464,38,"current"],[455,39,464,45],[455,42,464,48],[455,47,464,53],[456,8,465,12],[456,9,465,13],[456,11,465,15],[456,14,465,18],[456,15,465,19],[457,8,466,12,"pauseOffsetCorrection"],[457,29,466,33],[457,30,466,34,"current"],[457,37,466,41],[457,40,466,44],[457,44,466,48],[458,8,467,12],[458,14,467,18,"additionalOffset"],[458,30,467,34],[458,33,467,37],[458,34,467,38,"_c"],[458,36,467,40],[458,39,467,43,"initialScrollIndexParams"],[458,63,467,67],[458,68,467,72],[458,72,467,76],[458,76,467,80,"initialScrollIndexParams"],[458,100,467,104],[458,105,467,109],[458,110,467,114],[458,111,467,115],[458,114,467,118],[458,119,467,123],[458,120,467,124],[458,123,467,127,"initialScrollIndexParams"],[458,147,467,151],[458,148,467,152,"viewOffset"],[458,158,467,162],[458,164,467,168],[458,168,467,172],[458,172,467,176,"_c"],[458,174,467,178],[458,179,467,183],[458,184,467,188],[458,185,467,189],[458,188,467,192,"_c"],[458,190,467,194],[458,193,467,197],[458,194,467,198],[459,8,468,12],[459,14,468,18,"offset"],[459,20,468,24],[459,23,468,27,"horizontal"],[459,33,468,37],[459,36,469,18,"recyclerViewManager"],[459,55,469,37],[459,56,469,38,"getLayout"],[459,65,469,47],[459,66,469,48,"initialScrollIndex"],[459,84,469,66],[459,85,469,67],[459,86,469,68,"x"],[459,87,469,69],[459,90,469,72,"additionalOffset"],[459,106,469,88],[459,109,470,18,"recyclerViewManager"],[459,128,470,37],[459,129,470,38,"getLayout"],[459,138,470,47],[459,139,470,48,"initialScrollIndex"],[459,157,470,66],[459,158,470,67],[459,159,470,68,"y"],[459,160,470,69],[459,163,471,20,"additionalOffset"],[459,179,471,36],[460,8,472,12,"handlerMethods"],[460,22,472,26],[460,23,472,27,"scrollToOffset"],[460,37,472,41],[460,38,472,42],[461,10,473,16,"offset"],[461,16,473,22],[462,10,474,16,"animated"],[462,18,474,24],[462,20,474,26],[462,25,474,31],[463,10,475,16,"skipFirstItemOffset"],[463,29,475,35],[463,31,475,37],[464,8,476,12],[464,9,476,13],[464,10,476,14],[465,8,477,12,"setTimeout"],[465,18,477,22],[465,19,477,23],[465,25,477,29],[466,10,478,16,"handlerMethods"],[466,24,478,30],[466,25,478,31,"scrollToOffset"],[466,39,478,45],[466,40,478,46],[467,12,479,20,"offset"],[467,18,479,26],[468,12,480,20,"animated"],[468,20,480,28],[468,22,480,30],[468,27,480,35],[469,12,481,20,"skipFirstItemOffset"],[469,31,481,39],[469,33,481,41],[470,10,482,16],[470,11,482,17],[470,12,482,18],[471,8,483,12],[471,9,483,13],[471,11,483,15],[471,12,483,16],[471,13,483,17],[472,6,484,8],[473,4,485,4],[473,5,485,5],[473,7,485,7],[473,8,485,8,"handlerMethods"],[473,22,485,22],[473,24,485,24,"recyclerViewManager"],[473,43,485,43],[473,45,485,45,"setTimeout"],[473,55,485,55],[473,56,485,56],[473,57,485,57],[474,4,486,4],[475,4,487,4],[475,8,487,4,"useImperativeHandle"],[475,14,487,23],[475,15,487,23,"useImperativeHandle"],[475,34,487,23],[475,36,487,24,"ref"],[475,39,487,27],[475,41,487,29],[475,47,487,35],[476,6,488,8],[476,12,488,14,"imperativeApi"],[476,25,488,27],[476,28,488,30],[477,8,488,32],[477,11,488,35,"scrollViewRef"],[477,24,488,48],[477,25,488,49,"current"],[477,32,488,56],[478,8,488,58],[478,11,488,61,"handlerMethods"],[479,6,488,76],[479,7,488,77],[480,6,489,8],[481,6,490,8],[482,6,491,8,"Object"],[482,12,491,14],[482,13,491,15,"defineProperty"],[482,27,491,29],[482,28,491,30,"imperativeApi"],[482,41,491,43],[482,43,491,45],[482,50,491,52],[482,52,491,54],[483,8,492,12,"get"],[483,11,492,15,"get"],[483,12,492,15],[483,14,492,18],[484,10,493,16],[484,17,493,23,"recyclerViewManager"],[484,36,493,42],[484,37,493,43,"props"],[484,42,493,48],[485,8,494,12],[485,9,494,13],[486,8,495,12,"enumerable"],[486,18,495,22],[486,20,495,24],[486,24,495,28],[487,8,496,12,"configurable"],[487,20,496,24],[487,22,496,26],[488,6,497,8],[488,7,497,9],[488,8,497,10],[489,6,498,8],[489,13,498,15,"imperativeApi"],[489,26,498,28],[490,4,499,4],[490,5,499,5],[490,7,499,7],[490,8,499,8,"handlerMethods"],[490,22,499,22],[490,24,499,24,"scrollViewRef"],[490,37,499,37],[490,39,499,39,"recyclerViewManager"],[490,58,499,58],[490,59,499,59],[490,60,499,60],[491,4,500,4],[491,11,500,11],[492,6,501,8,"applyOffsetCorrection"],[492,27,501,29],[493,6,502,8,"computeFirstVisibleIndexForOffsetCorrection"],[493,49,502,51],[494,6,503,8,"applyInitialScrollIndex"],[494,29,503,31],[495,6,504,8,"handlerMethods"],[496,4,505,4],[496,5,505,5],[497,2,506,0],[498,0,506,1],[498,3]],"functionMap":{"names":["<global>","useRecyclerViewController","updateScrollOffsetWithCallback","setRenderId$argument_0","computeFirstVisibleIndexForOffsetCorrection","applyOffsetCorrection","callbacks.forEach$argument_0","recyclerViewManager.getEngagedIndices.findValue$argument_0","data.findIndex$argument_0","updateScrollOffsetWithCallback$argument_1","setTimeout$argument_0","useMemo$argument_0","get__props","scrollToOffset","clearLayoutCacheOnUpdate","flashScrollIndicators","getNativeScrollRef","getScrollResponder","getScrollableNode","scrollToEnd","scrollToTop","scrollToIndex","Promise$argument_0","getFinalOffset","getStartScrollOffset","performScrollStep","finishScrollToIndex","scrollToItem","getFirstItemOffset","getWindowSize","getLayout","getAbsoluteLastScrollOffset","getChildContainerDimensions","recordInteraction","computeVisibleIndices","getFirstVisibleIndex","recomputeViewableItems","prepareForLayoutAnimationRender","applyInitialScrollIndex","useImperativeHandle$argument_1","Object.defineProperty$argument_2.get"],"mappings":"AAA;OCuB;uDCsB;wBCO,kBD;KDM;oEGC;KHe;8CIM;0BCO,wBD;+BEW;+CFC;iFGC;mDHC;qHIkC,SJ;uCKE;6BLE;KJQ;mCUQ;YCE;aDE;4BEK;aFuB;sCGC;aHE;mCIE;aJE;gCKC;aLE;gCMC;aNE;+BOC;aPE;yBQI;2BTW;iBSG;aRC;yBSI;aTK;2BUM;mCCC;+CCQ;yBDoB;qDEM;yBFY;kDGY;uEhBsB;6BgByB;yBHC;oDIK;uChBuB;6BgBI;yBJC;iBDQ;aVC;0BgBK;iDnBI,+BmB;ahBU;gCiBE;ajBE;2BkBC;alBE;uBmBC;anBE;yCoBC;apBE;yCqBC;arBE;+BsBC;atBE;mCuBC;avBE;kCwBC;axBE;oCyBC;azBE;6C0BI;a1BK;KVE;gDqCO;uB5BU;a4BG;uB5BY;a4BM;KrCE;6BsCE;YCK;aDE;KtCK;CDO"},"hasCjsExports":false},"type":"js/module"}]}