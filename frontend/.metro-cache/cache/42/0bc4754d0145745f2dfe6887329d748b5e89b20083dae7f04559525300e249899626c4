{"dependencies":[{"name":"./version-check","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":21,"index":21},"end":{"line":1,"column":47,"index":47}}],"key":"KsD14V0r68dUrO4yG/0Qjl3HIGU=","exportNames":["*"],"imports":1}},{"name":"./regex","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":14,"index":62},"end":{"line":2,"column":32,"index":80}}],"key":"XzRBw0s1ks2ZpbqcA5eFQQ2z9QU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const VersionCheck = require(_dependencyMap[0], \"./version-check\");\n  const Regex = require(_dependencyMap[1], \"./regex\");\n\n  /**\n   * Numeric mode encodes data from the decimal digit set (0 - 9)\n   * (byte values 30HEX to 39HEX).\n   * Normally, 3 data characters are represented by 10 bits.\n   *\n   * @type {Object}\n   */\n  exports.NUMERIC = {\n    id: 'Numeric',\n    bit: 1 << 0,\n    ccBits: [10, 12, 14]\n  };\n\n  /**\n   * Alphanumeric mode encodes data from a set of 45 characters,\n   * i.e. 10 numeric digits (0 - 9),\n   *      26 alphabetic characters (A - Z),\n   *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n   * Normally, two input characters are represented by 11 bits.\n   *\n   * @type {Object}\n   */\n  exports.ALPHANUMERIC = {\n    id: 'Alphanumeric',\n    bit: 1 << 1,\n    ccBits: [9, 11, 13]\n  };\n\n  /**\n   * In byte mode, data is encoded at 8 bits per character.\n   *\n   * @type {Object}\n   */\n  exports.BYTE = {\n    id: 'Byte',\n    bit: 1 << 2,\n    ccBits: [8, 16, 16]\n  };\n\n  /**\n   * The Kanji mode efficiently encodes Kanji characters in accordance with\n   * the Shift JIS system based on JIS X 0208.\n   * The Shift JIS values are shifted from the JIS X 0208 values.\n   * JIS X 0208 gives details of the shift coded representation.\n   * Each two-byte character value is compacted to a 13-bit binary codeword.\n   *\n   * @type {Object}\n   */\n  exports.KANJI = {\n    id: 'Kanji',\n    bit: 1 << 3,\n    ccBits: [8, 10, 12]\n  };\n\n  /**\n   * Mixed mode will contain a sequences of data in a combination of any of\n   * the modes described above\n   *\n   * @type {Object}\n   */\n  exports.MIXED = {\n    bit: -1\n  };\n\n  /**\n   * Returns the number of bits needed to store the data length\n   * according to QR Code specifications.\n   *\n   * @param  {Mode}   mode    Data mode\n   * @param  {Number} version QR Code version\n   * @return {Number}         Number of bits\n   */\n  exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n    if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);\n    if (!VersionCheck.isValid(version)) {\n      throw new Error('Invalid version: ' + version);\n    }\n    if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];\n    return mode.ccBits[2];\n  };\n\n  /**\n   * Returns the most efficient mode to store the specified data\n   *\n   * @param  {String} dataStr Input data string\n   * @return {Mode}           Best mode\n   */\n  exports.getBestModeForData = function getBestModeForData(dataStr) {\n    if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;\n  };\n\n  /**\n   * Return mode name as string\n   *\n   * @param {Mode} mode Mode object\n   * @returns {String}  Mode name\n   */\n  exports.toString = function toString(mode) {\n    if (mode && mode.id) return mode.id;\n    throw new Error('Invalid mode');\n  };\n\n  /**\n   * Check if input param is a valid mode object\n   *\n   * @param   {Mode}    mode Mode object\n   * @returns {Boolean} True if valid mode, false otherwise\n   */\n  exports.isValid = function isValid(mode) {\n    return mode && mode.bit && mode.ccBits;\n  };\n\n  /**\n   * Get mode object from its name\n   *\n   * @param   {String} string Mode name\n   * @returns {Mode}          Mode object\n   */\n  function fromString(string) {\n    if (typeof string !== 'string') {\n      throw new Error('Param is not a string');\n    }\n    const lcStr = string.toLowerCase();\n    switch (lcStr) {\n      case 'numeric':\n        return exports.NUMERIC;\n      case 'alphanumeric':\n        return exports.ALPHANUMERIC;\n      case 'kanji':\n        return exports.KANJI;\n      case 'byte':\n        return exports.BYTE;\n      default:\n        throw new Error('Unknown mode: ' + string);\n    }\n  }\n\n  /**\n   * Returns mode from a value.\n   * If value is not a valid mode, returns defaultValue\n   *\n   * @param  {Mode|String} value        Encoding mode\n   * @param  {Mode}        defaultValue Fallback value\n   * @return {Mode}                     Encoding mode\n   */\n  exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n      return value;\n    }\n    try {\n      return fromString(value);\n    } catch (e) {\n      return defaultValue;\n    }\n  };\n});","lineCount":160,"map":[[2,2,1,0],[2,8,1,6,"VersionCheck"],[2,20,1,18],[2,23,1,21,"require"],[2,30,1,28],[2,31,1,28,"_dependencyMap"],[2,45,1,28],[2,67,1,46],[2,68,1,47],[3,2,2,0],[3,8,2,6,"Regex"],[3,13,2,11],[3,16,2,14,"require"],[3,23,2,21],[3,24,2,21,"_dependencyMap"],[3,38,2,21],[3,52,2,31],[3,53,2,32],[5,2,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"NUMERIC"],[12,17,11,15],[12,20,11,18],[13,4,12,2,"id"],[13,6,12,4],[13,8,12,6],[13,17,12,15],[14,4,13,2,"bit"],[14,7,13,5],[14,9,13,7],[14,10,13,8],[14,14,13,12],[14,15,13,13],[15,4,14,2,"ccBits"],[15,10,14,8],[15,12,14,10],[15,13,14,11],[15,15,14,13],[15,17,14,15],[15,19,14,17],[15,21,14,19],[15,23,14,21],[16,2,15,0],[16,3,15,1],[18,2,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"ALPHANUMERIC"],[27,22,26,20],[27,25,26,23],[28,4,27,2,"id"],[28,6,27,4],[28,8,27,6],[28,22,27,20],[29,4,28,2,"bit"],[29,7,28,5],[29,9,28,7],[29,10,28,8],[29,14,28,12],[29,15,28,13],[30,4,29,2,"ccBits"],[30,10,29,8],[30,12,29,10],[30,13,29,11],[30,14,29,12],[30,16,29,14],[30,18,29,16],[30,20,29,18],[30,22,29,20],[31,2,30,0],[31,3,30,1],[33,2,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,2,37,0,"exports"],[38,9,37,7],[38,10,37,8,"BYTE"],[38,14,37,12],[38,17,37,15],[39,4,38,2,"id"],[39,6,38,4],[39,8,38,6],[39,14,38,12],[40,4,39,2,"bit"],[40,7,39,5],[40,9,39,7],[40,10,39,8],[40,14,39,12],[40,15,39,13],[41,4,40,2,"ccBits"],[41,10,40,8],[41,12,40,10],[41,13,40,11],[41,14,40,12],[41,16,40,14],[41,18,40,16],[41,20,40,18],[41,22,40,20],[42,2,41,0],[42,3,41,1],[44,2,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,2,52,0,"exports"],[53,9,52,7],[53,10,52,8,"KANJI"],[53,15,52,13],[53,18,52,16],[54,4,53,2,"id"],[54,6,53,4],[54,8,53,6],[54,15,53,13],[55,4,54,2,"bit"],[55,7,54,5],[55,9,54,7],[55,10,54,8],[55,14,54,12],[55,15,54,13],[56,4,55,2,"ccBits"],[56,10,55,8],[56,12,55,10],[56,13,55,11],[56,14,55,12],[56,16,55,14],[56,18,55,16],[56,20,55,18],[56,22,55,20],[57,2,56,0],[57,3,56,1],[59,2,58,0],[60,0,59,0],[61,0,60,0],[62,0,61,0],[63,0,62,0],[64,0,63,0],[65,2,64,0,"exports"],[65,9,64,7],[65,10,64,8,"MIXED"],[65,15,64,13],[65,18,64,16],[66,4,65,2,"bit"],[66,7,65,5],[66,9,65,7],[66,10,65,8],[67,2,66,0],[67,3,66,1],[69,2,68,0],[70,0,69,0],[71,0,70,0],[72,0,71,0],[73,0,72,0],[74,0,73,0],[75,0,74,0],[76,0,75,0],[77,2,76,0,"exports"],[77,9,76,7],[77,10,76,8,"getCharCountIndicator"],[77,31,76,29],[77,34,76,32],[77,43,76,41,"getCharCountIndicator"],[77,64,76,62,"getCharCountIndicator"],[77,65,76,64,"mode"],[77,69,76,68],[77,71,76,70,"version"],[77,78,76,77],[77,80,76,79],[78,4,77,2],[78,8,77,6],[78,9,77,7,"mode"],[78,13,77,11],[78,14,77,12,"ccBits"],[78,20,77,18],[78,22,77,20],[78,28,77,26],[78,32,77,30,"Error"],[78,37,77,35],[78,38,77,36],[78,54,77,52],[78,57,77,55,"mode"],[78,61,77,59],[78,62,77,60],[79,4,79,2],[79,8,79,6],[79,9,79,7,"VersionCheck"],[79,21,79,19],[79,22,79,20,"isValid"],[79,29,79,27],[79,30,79,28,"version"],[79,37,79,35],[79,38,79,36],[79,40,79,38],[80,6,80,4],[80,12,80,10],[80,16,80,14,"Error"],[80,21,80,19],[80,22,80,20],[80,41,80,39],[80,44,80,42,"version"],[80,51,80,49],[80,52,80,50],[81,4,81,2],[82,4,83,2],[82,8,83,6,"version"],[82,15,83,13],[82,19,83,17],[82,20,83,18],[82,24,83,22,"version"],[82,31,83,29],[82,34,83,32],[82,36,83,34],[82,38,83,36],[82,45,83,43,"mode"],[82,49,83,47],[82,50,83,48,"ccBits"],[82,56,83,54],[82,57,83,55],[82,58,83,56],[82,59,83,57],[82,65,84,7],[82,69,84,11,"version"],[82,76,84,18],[82,79,84,21],[82,81,84,23],[82,83,84,25],[82,90,84,32,"mode"],[82,94,84,36],[82,95,84,37,"ccBits"],[82,101,84,43],[82,102,84,44],[82,103,84,45],[82,104,84,46],[83,4,85,2],[83,11,85,9,"mode"],[83,15,85,13],[83,16,85,14,"ccBits"],[83,22,85,20],[83,23,85,21],[83,24,85,22],[83,25,85,23],[84,2,86,0],[84,3,86,1],[86,2,88,0],[87,0,89,0],[88,0,90,0],[89,0,91,0],[90,0,92,0],[91,0,93,0],[92,2,94,0,"exports"],[92,9,94,7],[92,10,94,8,"getBestModeForData"],[92,28,94,26],[92,31,94,29],[92,40,94,38,"getBestModeForData"],[92,58,94,56,"getBestModeForData"],[92,59,94,58,"dataStr"],[92,66,94,65],[92,68,94,67],[93,4,95,2],[93,8,95,6,"Regex"],[93,13,95,11],[93,14,95,12,"testNumeric"],[93,25,95,23],[93,26,95,24,"dataStr"],[93,33,95,31],[93,34,95,32],[93,36,95,34],[93,43,95,41,"exports"],[93,50,95,48],[93,51,95,49,"NUMERIC"],[93,58,95,56],[93,64,96,7],[93,68,96,11,"Regex"],[93,73,96,16],[93,74,96,17,"testAlphanumeric"],[93,90,96,33],[93,91,96,34,"dataStr"],[93,98,96,41],[93,99,96,42],[93,101,96,44],[93,108,96,51,"exports"],[93,115,96,58],[93,116,96,59,"ALPHANUMERIC"],[93,128,96,71],[93,134,97,7],[93,138,97,11,"Regex"],[93,143,97,16],[93,144,97,17,"testKanji"],[93,153,97,26],[93,154,97,27,"dataStr"],[93,161,97,34],[93,162,97,35],[93,164,97,37],[93,171,97,44,"exports"],[93,178,97,51],[93,179,97,52,"KANJI"],[93,184,97,57],[93,190,98,7],[93,197,98,14,"exports"],[93,204,98,21],[93,205,98,22,"BYTE"],[93,209,98,26],[94,2,99,0],[94,3,99,1],[96,2,101,0],[97,0,102,0],[98,0,103,0],[99,0,104,0],[100,0,105,0],[101,0,106,0],[102,2,107,0,"exports"],[102,9,107,7],[102,10,107,8,"toString"],[102,18,107,16],[102,21,107,19],[102,30,107,28,"toString"],[102,38,107,36,"toString"],[102,39,107,38,"mode"],[102,43,107,42],[102,45,107,44],[103,4,108,2],[103,8,108,6,"mode"],[103,12,108,10],[103,16,108,14,"mode"],[103,20,108,18],[103,21,108,19,"id"],[103,23,108,21],[103,25,108,23],[103,32,108,30,"mode"],[103,36,108,34],[103,37,108,35,"id"],[103,39,108,37],[104,4,109,2],[104,10,109,8],[104,14,109,12,"Error"],[104,19,109,17],[104,20,109,18],[104,34,109,32],[104,35,109,33],[105,2,110,0],[105,3,110,1],[107,2,112,0],[108,0,113,0],[109,0,114,0],[110,0,115,0],[111,0,116,0],[112,0,117,0],[113,2,118,0,"exports"],[113,9,118,7],[113,10,118,8,"isValid"],[113,17,118,15],[113,20,118,18],[113,29,118,27,"isValid"],[113,36,118,34,"isValid"],[113,37,118,36,"mode"],[113,41,118,40],[113,43,118,42],[114,4,119,2],[114,11,119,9,"mode"],[114,15,119,13],[114,19,119,17,"mode"],[114,23,119,21],[114,24,119,22,"bit"],[114,27,119,25],[114,31,119,29,"mode"],[114,35,119,33],[114,36,119,34,"ccBits"],[114,42,119,40],[115,2,120,0],[115,3,120,1],[117,2,122,0],[118,0,123,0],[119,0,124,0],[120,0,125,0],[121,0,126,0],[122,0,127,0],[123,2,128,0],[123,11,128,9,"fromString"],[123,21,128,19,"fromString"],[123,22,128,21,"string"],[123,28,128,27],[123,30,128,29],[124,4,129,2],[124,8,129,6],[124,15,129,13,"string"],[124,21,129,19],[124,26,129,24],[124,34,129,32],[124,36,129,34],[125,6,130,4],[125,12,130,10],[125,16,130,14,"Error"],[125,21,130,19],[125,22,130,20],[125,45,130,43],[125,46,130,44],[126,4,131,2],[127,4,133,2],[127,10,133,8,"lcStr"],[127,15,133,13],[127,18,133,16,"string"],[127,24,133,22],[127,25,133,23,"toLowerCase"],[127,36,133,34],[127,37,133,35],[127,38,133,36],[128,4,135,2],[128,12,135,10,"lcStr"],[128,17,135,15],[129,6,136,4],[129,11,136,9],[129,20,136,18],[130,8,137,6],[130,15,137,13,"exports"],[130,22,137,20],[130,23,137,21,"NUMERIC"],[130,30,137,28],[131,6,138,4],[131,11,138,9],[131,25,138,23],[132,8,139,6],[132,15,139,13,"exports"],[132,22,139,20],[132,23,139,21,"ALPHANUMERIC"],[132,35,139,33],[133,6,140,4],[133,11,140,9],[133,18,140,16],[134,8,141,6],[134,15,141,13,"exports"],[134,22,141,20],[134,23,141,21,"KANJI"],[134,28,141,26],[135,6,142,4],[135,11,142,9],[135,17,142,15],[136,8,143,6],[136,15,143,13,"exports"],[136,22,143,20],[136,23,143,21,"BYTE"],[136,27,143,25],[137,6,144,4],[138,8,145,6],[138,14,145,12],[138,18,145,16,"Error"],[138,23,145,21],[138,24,145,22],[138,40,145,38],[138,43,145,41,"string"],[138,49,145,47],[138,50,145,48],[139,4,146,2],[140,2,147,0],[142,2,149,0],[143,0,150,0],[144,0,151,0],[145,0,152,0],[146,0,153,0],[147,0,154,0],[148,0,155,0],[149,0,156,0],[150,2,157,0,"exports"],[150,9,157,7],[150,10,157,8,"from"],[150,14,157,12],[150,17,157,15],[150,26,157,24,"from"],[150,30,157,28,"from"],[150,31,157,30,"value"],[150,36,157,35],[150,38,157,37,"defaultValue"],[150,50,157,49],[150,52,157,51],[151,4,158,2],[151,8,158,6,"exports"],[151,15,158,13],[151,16,158,14,"isValid"],[151,23,158,21],[151,24,158,22,"value"],[151,29,158,27],[151,30,158,28],[151,32,158,30],[152,6,159,4],[152,13,159,11,"value"],[152,18,159,16],[153,4,160,2],[154,4,162,2],[154,8,162,6],[155,6,163,4],[155,13,163,11,"fromString"],[155,23,163,21],[155,24,163,22,"value"],[155,29,163,27],[155,30,163,28],[156,4,164,2],[156,5,164,3],[156,6,164,4],[156,13,164,11,"e"],[156,14,164,12],[156,16,164,14],[157,6,165,4],[157,13,165,11,"defaultValue"],[157,25,165,23],[158,4,166,2],[159,2,167,0],[159,3,167,1],[160,0,167,1],[160,3]],"functionMap":{"names":["<global>","getCharCountIndicator","getBestModeForData","toString","isValid","fromString","from"],"mappings":"AAA;gCC2E;CDU;6BEQ;CFK;mBGQ;CHG;kBIQ;CJE;AKQ;CLmB;eMU;CNU"},"hasCjsExports":true},"type":"js/module"}]}