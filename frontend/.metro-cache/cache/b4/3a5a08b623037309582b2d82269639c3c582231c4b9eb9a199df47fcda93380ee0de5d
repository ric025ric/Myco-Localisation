{"dependencies":[{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":31},"end":{"line":3,"column":38,"index":53}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  let constants = require(_dependencyMap[0], \"./constants\");\n  module.exports = function (dataIn, width, height, options) {\n    let outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;\n    if (options.colorType === options.inputColorType) {\n      let bigEndian = function () {\n        let buffer = new ArrayBuffer(2);\n        new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n        // Int16Array uses the platform's endianness.\n        return new Int16Array(buffer)[0] !== 256;\n      }();\n      // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n      if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n        return dataIn;\n      }\n    }\n\n    // map to a UInt16 array if data is 16bit, fix endianness below\n    let data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n    let maxValue = 255;\n    let inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n    if (inBpp === 4 && !options.inputHasAlpha) {\n      inBpp = 3;\n    }\n    let outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n    if (options.bitDepth === 16) {\n      maxValue = 65535;\n      outBpp *= 2;\n    }\n    let outData = Buffer.alloc(width * height * outBpp);\n    let inIndex = 0;\n    let outIndex = 0;\n    let bgColor = options.bgColor || {};\n    if (bgColor.red === undefined) {\n      bgColor.red = maxValue;\n    }\n    if (bgColor.green === undefined) {\n      bgColor.green = maxValue;\n    }\n    if (bgColor.blue === undefined) {\n      bgColor.blue = maxValue;\n    }\n    function getRGBA() {\n      let red;\n      let green;\n      let blue;\n      let alpha = maxValue;\n      switch (options.inputColorType) {\n        case constants.COLORTYPE_COLOR_ALPHA:\n          alpha = data[inIndex + 3];\n          red = data[inIndex];\n          green = data[inIndex + 1];\n          blue = data[inIndex + 2];\n          break;\n        case constants.COLORTYPE_COLOR:\n          red = data[inIndex];\n          green = data[inIndex + 1];\n          blue = data[inIndex + 2];\n          break;\n        case constants.COLORTYPE_ALPHA:\n          alpha = data[inIndex + 1];\n          red = data[inIndex];\n          green = red;\n          blue = red;\n          break;\n        case constants.COLORTYPE_GRAYSCALE:\n          red = data[inIndex];\n          green = red;\n          blue = red;\n          break;\n        default:\n          throw new Error(\"input color type:\" + options.inputColorType + \" is not supported at present\");\n      }\n      if (options.inputHasAlpha) {\n        if (!outHasAlpha) {\n          alpha /= maxValue;\n          red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n          green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n          blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n        }\n      }\n      return {\n        red: red,\n        green: green,\n        blue: blue,\n        alpha: alpha\n      };\n    }\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        let rgba = getRGBA(data, inIndex);\n        switch (options.colorType) {\n          case constants.COLORTYPE_COLOR_ALPHA:\n          case constants.COLORTYPE_COLOR:\n            if (options.bitDepth === 8) {\n              outData[outIndex] = rgba.red;\n              outData[outIndex + 1] = rgba.green;\n              outData[outIndex + 2] = rgba.blue;\n              if (outHasAlpha) {\n                outData[outIndex + 3] = rgba.alpha;\n              }\n            } else {\n              outData.writeUInt16BE(rgba.red, outIndex);\n              outData.writeUInt16BE(rgba.green, outIndex + 2);\n              outData.writeUInt16BE(rgba.blue, outIndex + 4);\n              if (outHasAlpha) {\n                outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n              }\n            }\n            break;\n          case constants.COLORTYPE_ALPHA:\n          case constants.COLORTYPE_GRAYSCALE:\n            {\n              // Convert to grayscale and alpha\n              let grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n              if (options.bitDepth === 8) {\n                outData[outIndex] = grayscale;\n                if (outHasAlpha) {\n                  outData[outIndex + 1] = rgba.alpha;\n                }\n              } else {\n                outData.writeUInt16BE(grayscale, outIndex);\n                if (outHasAlpha) {\n                  outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n                }\n              }\n              break;\n            }\n          default:\n            throw new Error(\"unrecognised color Type \" + options.colorType);\n        }\n        inIndex += inBpp;\n        outIndex += outBpp;\n      }\n    }\n    return outData;\n  };\n});","lineCount":140,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"constants"],[4,15,3,13],[4,18,3,16,"require"],[4,25,3,23],[4,26,3,23,"_dependencyMap"],[4,40,3,23],[4,58,3,37],[4,59,3,38],[5,2,5,0,"module"],[5,8,5,6],[5,9,5,7,"exports"],[5,16,5,14],[5,19,5,17],[5,29,5,27,"dataIn"],[5,35,5,33],[5,37,5,35,"width"],[5,42,5,40],[5,44,5,42,"height"],[5,50,5,48],[5,52,5,50,"options"],[5,59,5,57],[5,61,5,59],[6,4,6,2],[6,8,6,6,"outHasAlpha"],[6,19,6,17],[6,22,7,4],[6,23,7,5,"constants"],[6,32,7,14],[6,33,7,15,"COLORTYPE_COLOR_ALPHA"],[6,54,7,36],[6,56,7,38,"constants"],[6,65,7,47],[6,66,7,48,"COLORTYPE_ALPHA"],[6,81,7,63],[6,82,7,64],[6,83,7,65,"indexOf"],[6,90,7,72],[6,91,8,6,"options"],[6,98,8,13],[6,99,8,14,"colorType"],[6,108,9,4],[6,109,9,5],[6,114,9,10],[6,115,9,11],[6,116,9,12],[7,4,10,2],[7,8,10,6,"options"],[7,15,10,13],[7,16,10,14,"colorType"],[7,25,10,23],[7,30,10,28,"options"],[7,37,10,35],[7,38,10,36,"inputColorType"],[7,52,10,50],[7,54,10,52],[8,6,11,4],[8,10,11,8,"bigEndian"],[8,19,11,17],[8,22,11,21],[8,34,11,33],[9,8,12,6],[9,12,12,10,"buffer"],[9,18,12,16],[9,21,12,19],[9,25,12,23,"ArrayBuffer"],[9,36,12,34],[9,37,12,35],[9,38,12,36],[9,39,12,37],[10,8,13,6],[10,12,13,10,"DataView"],[10,20,13,18],[10,21,13,19,"buffer"],[10,27,13,25],[10,28,13,26],[10,29,13,27,"setInt16"],[10,37,13,35],[10,38,13,36],[10,39,13,37],[10,41,13,39],[10,44,13,42],[10,46,13,44],[10,50,13,48],[10,51,13,49],[10,69,13,67],[10,70,13,68],[11,8,14,6],[12,8,15,6],[12,15,15,13],[12,19,15,17,"Int16Array"],[12,29,15,27],[12,30,15,28,"buffer"],[12,36,15,34],[12,37,15,35],[12,38,15,36],[12,39,15,37],[12,40,15,38],[12,45,15,43],[12,48,15,46],[13,6,16,4],[13,7,16,5],[13,8,16,7],[13,9,16,8],[14,6,17,4],[15,6,18,4],[15,10,18,8,"options"],[15,17,18,15],[15,18,18,16,"bitDepth"],[15,26,18,24],[15,31,18,29],[15,32,18,30],[15,36,18,35,"options"],[15,43,18,42],[15,44,18,43,"bitDepth"],[15,52,18,51],[15,57,18,56],[15,59,18,58],[15,63,18,62,"bigEndian"],[15,72,18,72],[15,74,18,74],[16,8,19,6],[16,15,19,13,"dataIn"],[16,21,19,19],[17,6,20,4],[18,4,21,2],[20,4,23,2],[21,4,24,2],[21,8,24,6,"data"],[21,12,24,10],[21,15,24,13,"options"],[21,22,24,20],[21,23,24,21,"bitDepth"],[21,31,24,29],[21,36,24,34],[21,38,24,36],[21,41,24,39,"dataIn"],[21,47,24,45],[21,50,24,48],[21,54,24,52,"Uint16Array"],[21,65,24,63],[21,66,24,64,"dataIn"],[21,72,24,70],[21,73,24,71,"buffer"],[21,79,24,77],[21,80,24,78],[22,4,26,2],[22,8,26,6,"maxValue"],[22,16,26,14],[22,19,26,17],[22,22,26,20],[23,4,27,2],[23,8,27,6,"inBpp"],[23,13,27,11],[23,16,27,14,"constants"],[23,25,27,23],[23,26,27,24,"COLORTYPE_TO_BPP_MAP"],[23,46,27,44],[23,47,27,45,"options"],[23,54,27,52],[23,55,27,53,"inputColorType"],[23,69,27,67],[23,70,27,68],[24,4,28,2],[24,8,28,6,"inBpp"],[24,13,28,11],[24,18,28,16],[24,19,28,17],[24,23,28,21],[24,24,28,22,"options"],[24,31,28,29],[24,32,28,30,"inputHasAlpha"],[24,45,28,43],[24,47,28,45],[25,6,29,4,"inBpp"],[25,11,29,9],[25,14,29,12],[25,15,29,13],[26,4,30,2],[27,4,31,2],[27,8,31,6,"outBpp"],[27,14,31,12],[27,17,31,15,"constants"],[27,26,31,24],[27,27,31,25,"COLORTYPE_TO_BPP_MAP"],[27,47,31,45],[27,48,31,46,"options"],[27,55,31,53],[27,56,31,54,"colorType"],[27,65,31,63],[27,66,31,64],[28,4,32,2],[28,8,32,6,"options"],[28,15,32,13],[28,16,32,14,"bitDepth"],[28,24,32,22],[28,29,32,27],[28,31,32,29],[28,33,32,31],[29,6,33,4,"maxValue"],[29,14,33,12],[29,17,33,15],[29,22,33,20],[30,6,34,4,"outBpp"],[30,12,34,10],[30,16,34,14],[30,17,34,15],[31,4,35,2],[32,4,36,2],[32,8,36,6,"outData"],[32,15,36,13],[32,18,36,16,"Buffer"],[32,24,36,22],[32,25,36,23,"alloc"],[32,30,36,28],[32,31,36,29,"width"],[32,36,36,34],[32,39,36,37,"height"],[32,45,36,43],[32,48,36,46,"outBpp"],[32,54,36,52],[32,55,36,53],[33,4,38,2],[33,8,38,6,"inIndex"],[33,15,38,13],[33,18,38,16],[33,19,38,17],[34,4,39,2],[34,8,39,6,"outIndex"],[34,16,39,14],[34,19,39,17],[34,20,39,18],[35,4,41,2],[35,8,41,6,"bgColor"],[35,15,41,13],[35,18,41,16,"options"],[35,25,41,23],[35,26,41,24,"bgColor"],[35,33,41,31],[35,37,41,35],[35,38,41,36],[35,39,41,37],[36,4,42,2],[36,8,42,6,"bgColor"],[36,15,42,13],[36,16,42,14,"red"],[36,19,42,17],[36,24,42,22,"undefined"],[36,33,42,31],[36,35,42,33],[37,6,43,4,"bgColor"],[37,13,43,11],[37,14,43,12,"red"],[37,17,43,15],[37,20,43,18,"maxValue"],[37,28,43,26],[38,4,44,2],[39,4,45,2],[39,8,45,6,"bgColor"],[39,15,45,13],[39,16,45,14,"green"],[39,21,45,19],[39,26,45,24,"undefined"],[39,35,45,33],[39,37,45,35],[40,6,46,4,"bgColor"],[40,13,46,11],[40,14,46,12,"green"],[40,19,46,17],[40,22,46,20,"maxValue"],[40,30,46,28],[41,4,47,2],[42,4,48,2],[42,8,48,6,"bgColor"],[42,15,48,13],[42,16,48,14,"blue"],[42,20,48,18],[42,25,48,23,"undefined"],[42,34,48,32],[42,36,48,34],[43,6,49,4,"bgColor"],[43,13,49,11],[43,14,49,12,"blue"],[43,18,49,16],[43,21,49,19,"maxValue"],[43,29,49,27],[44,4,50,2],[45,4,52,2],[45,13,52,11,"getRGBA"],[45,20,52,18,"getRGBA"],[45,21,52,18],[45,23,52,21],[46,6,53,4],[46,10,53,8,"red"],[46,13,53,11],[47,6,54,4],[47,10,54,8,"green"],[47,15,54,13],[48,6,55,4],[48,10,55,8,"blue"],[48,14,55,12],[49,6,56,4],[49,10,56,8,"alpha"],[49,15,56,13],[49,18,56,16,"maxValue"],[49,26,56,24],[50,6,57,4],[50,14,57,12,"options"],[50,21,57,19],[50,22,57,20,"inputColorType"],[50,36,57,34],[51,8,58,6],[51,13,58,11,"constants"],[51,22,58,20],[51,23,58,21,"COLORTYPE_COLOR_ALPHA"],[51,44,58,42],[52,10,59,8,"alpha"],[52,15,59,13],[52,18,59,16,"data"],[52,22,59,20],[52,23,59,21,"inIndex"],[52,30,59,28],[52,33,59,31],[52,34,59,32],[52,35,59,33],[53,10,60,8,"red"],[53,13,60,11],[53,16,60,14,"data"],[53,20,60,18],[53,21,60,19,"inIndex"],[53,28,60,26],[53,29,60,27],[54,10,61,8,"green"],[54,15,61,13],[54,18,61,16,"data"],[54,22,61,20],[54,23,61,21,"inIndex"],[54,30,61,28],[54,33,61,31],[54,34,61,32],[54,35,61,33],[55,10,62,8,"blue"],[55,14,62,12],[55,17,62,15,"data"],[55,21,62,19],[55,22,62,20,"inIndex"],[55,29,62,27],[55,32,62,30],[55,33,62,31],[55,34,62,32],[56,10,63,8],[57,8,64,6],[57,13,64,11,"constants"],[57,22,64,20],[57,23,64,21,"COLORTYPE_COLOR"],[57,38,64,36],[58,10,65,8,"red"],[58,13,65,11],[58,16,65,14,"data"],[58,20,65,18],[58,21,65,19,"inIndex"],[58,28,65,26],[58,29,65,27],[59,10,66,8,"green"],[59,15,66,13],[59,18,66,16,"data"],[59,22,66,20],[59,23,66,21,"inIndex"],[59,30,66,28],[59,33,66,31],[59,34,66,32],[59,35,66,33],[60,10,67,8,"blue"],[60,14,67,12],[60,17,67,15,"data"],[60,21,67,19],[60,22,67,20,"inIndex"],[60,29,67,27],[60,32,67,30],[60,33,67,31],[60,34,67,32],[61,10,68,8],[62,8,69,6],[62,13,69,11,"constants"],[62,22,69,20],[62,23,69,21,"COLORTYPE_ALPHA"],[62,38,69,36],[63,10,70,8,"alpha"],[63,15,70,13],[63,18,70,16,"data"],[63,22,70,20],[63,23,70,21,"inIndex"],[63,30,70,28],[63,33,70,31],[63,34,70,32],[63,35,70,33],[64,10,71,8,"red"],[64,13,71,11],[64,16,71,14,"data"],[64,20,71,18],[64,21,71,19,"inIndex"],[64,28,71,26],[64,29,71,27],[65,10,72,8,"green"],[65,15,72,13],[65,18,72,16,"red"],[65,21,72,19],[66,10,73,8,"blue"],[66,14,73,12],[66,17,73,15,"red"],[66,20,73,18],[67,10,74,8],[68,8,75,6],[68,13,75,11,"constants"],[68,22,75,20],[68,23,75,21,"COLORTYPE_GRAYSCALE"],[68,42,75,40],[69,10,76,8,"red"],[69,13,76,11],[69,16,76,14,"data"],[69,20,76,18],[69,21,76,19,"inIndex"],[69,28,76,26],[69,29,76,27],[70,10,77,8,"green"],[70,15,77,13],[70,18,77,16,"red"],[70,21,77,19],[71,10,78,8,"blue"],[71,14,78,12],[71,17,78,15,"red"],[71,20,78,18],[72,10,79,8],[73,8,80,6],[74,10,81,8],[74,16,81,14],[74,20,81,18,"Error"],[74,25,81,23],[74,26,82,10],[74,45,82,29],[74,48,83,12,"options"],[74,55,83,19],[74,56,83,20,"inputColorType"],[74,70,83,34],[74,73,84,12],[74,103,85,8],[74,104,85,9],[75,6,86,4],[76,6,88,4],[76,10,88,8,"options"],[76,17,88,15],[76,18,88,16,"inputHasAlpha"],[76,31,88,29],[76,33,88,31],[77,8,89,6],[77,12,89,10],[77,13,89,11,"outHasAlpha"],[77,24,89,22],[77,26,89,24],[78,10,90,8,"alpha"],[78,15,90,13],[78,19,90,17,"maxValue"],[78,27,90,25],[79,10,91,8,"red"],[79,13,91,11],[79,16,91,14,"Math"],[79,20,91,18],[79,21,91,19,"min"],[79,24,91,22],[79,25,92,10,"Math"],[79,29,92,14],[79,30,92,15,"max"],[79,33,92,18],[79,34,92,19,"Math"],[79,38,92,23],[79,39,92,24,"round"],[79,44,92,29],[79,45,92,30],[79,46,92,31],[79,47,92,32],[79,50,92,35,"alpha"],[79,55,92,40],[79,59,92,44,"bgColor"],[79,66,92,51],[79,67,92,52,"red"],[79,70,92,55],[79,73,92,58,"alpha"],[79,78,92,63],[79,81,92,66,"red"],[79,84,92,69],[79,85,92,70],[79,87,92,72],[79,88,92,73],[79,89,92,74],[79,91,93,10,"maxValue"],[79,99,94,8],[79,100,94,9],[80,10,95,8,"green"],[80,15,95,13],[80,18,95,16,"Math"],[80,22,95,20],[80,23,95,21,"min"],[80,26,95,24],[80,27,96,10,"Math"],[80,31,96,14],[80,32,96,15,"max"],[80,35,96,18],[80,36,96,19,"Math"],[80,40,96,23],[80,41,96,24,"round"],[80,46,96,29],[80,47,96,30],[80,48,96,31],[80,49,96,32],[80,52,96,35,"alpha"],[80,57,96,40],[80,61,96,44,"bgColor"],[80,68,96,51],[80,69,96,52,"green"],[80,74,96,57],[80,77,96,60,"alpha"],[80,82,96,65],[80,85,96,68,"green"],[80,90,96,73],[80,91,96,74],[80,93,96,76],[80,94,96,77],[80,95,96,78],[80,97,97,10,"maxValue"],[80,105,98,8],[80,106,98,9],[81,10,99,8,"blue"],[81,14,99,12],[81,17,99,15,"Math"],[81,21,99,19],[81,22,99,20,"min"],[81,25,99,23],[81,26,100,10,"Math"],[81,30,100,14],[81,31,100,15,"max"],[81,34,100,18],[81,35,100,19,"Math"],[81,39,100,23],[81,40,100,24,"round"],[81,45,100,29],[81,46,100,30],[81,47,100,31],[81,48,100,32],[81,51,100,35,"alpha"],[81,56,100,40],[81,60,100,44,"bgColor"],[81,67,100,51],[81,68,100,52,"blue"],[81,72,100,56],[81,75,100,59,"alpha"],[81,80,100,64],[81,83,100,67,"blue"],[81,87,100,71],[81,88,100,72],[81,90,100,74],[81,91,100,75],[81,92,100,76],[81,94,101,10,"maxValue"],[81,102,102,8],[81,103,102,9],[82,8,103,6],[83,6,104,4],[84,6,105,4],[84,13,105,11],[85,8,105,13,"red"],[85,11,105,16],[85,13,105,18,"red"],[85,16,105,21],[86,8,105,23,"green"],[86,13,105,28],[86,15,105,30,"green"],[86,20,105,35],[87,8,105,37,"blue"],[87,12,105,41],[87,14,105,43,"blue"],[87,18,105,47],[88,8,105,49,"alpha"],[88,13,105,54],[88,15,105,56,"alpha"],[89,6,105,62],[89,7,105,63],[90,4,106,2],[91,4,108,2],[91,9,108,7],[91,13,108,11,"y"],[91,14,108,12],[91,17,108,15],[91,18,108,16],[91,20,108,18,"y"],[91,21,108,19],[91,24,108,22,"height"],[91,30,108,28],[91,32,108,30,"y"],[91,33,108,31],[91,35,108,33],[91,37,108,35],[92,6,109,4],[92,11,109,9],[92,15,109,13,"x"],[92,16,109,14],[92,19,109,17],[92,20,109,18],[92,22,109,20,"x"],[92,23,109,21],[92,26,109,24,"width"],[92,31,109,29],[92,33,109,31,"x"],[92,34,109,32],[92,36,109,34],[92,38,109,36],[93,8,110,6],[93,12,110,10,"rgba"],[93,16,110,14],[93,19,110,17,"getRGBA"],[93,26,110,24],[93,27,110,25,"data"],[93,31,110,29],[93,33,110,31,"inIndex"],[93,40,110,38],[93,41,110,39],[94,8,112,6],[94,16,112,14,"options"],[94,23,112,21],[94,24,112,22,"colorType"],[94,33,112,31],[95,10,113,8],[95,15,113,13,"constants"],[95,24,113,22],[95,25,113,23,"COLORTYPE_COLOR_ALPHA"],[95,46,113,44],[96,10,114,8],[96,15,114,13,"constants"],[96,24,114,22],[96,25,114,23,"COLORTYPE_COLOR"],[96,40,114,38],[97,12,115,10],[97,16,115,14,"options"],[97,23,115,21],[97,24,115,22,"bitDepth"],[97,32,115,30],[97,37,115,35],[97,38,115,36],[97,40,115,38],[98,14,116,12,"outData"],[98,21,116,19],[98,22,116,20,"outIndex"],[98,30,116,28],[98,31,116,29],[98,34,116,32,"rgba"],[98,38,116,36],[98,39,116,37,"red"],[98,42,116,40],[99,14,117,12,"outData"],[99,21,117,19],[99,22,117,20,"outIndex"],[99,30,117,28],[99,33,117,31],[99,34,117,32],[99,35,117,33],[99,38,117,36,"rgba"],[99,42,117,40],[99,43,117,41,"green"],[99,48,117,46],[100,14,118,12,"outData"],[100,21,118,19],[100,22,118,20,"outIndex"],[100,30,118,28],[100,33,118,31],[100,34,118,32],[100,35,118,33],[100,38,118,36,"rgba"],[100,42,118,40],[100,43,118,41,"blue"],[100,47,118,45],[101,14,119,12],[101,18,119,16,"outHasAlpha"],[101,29,119,27],[101,31,119,29],[102,16,120,14,"outData"],[102,23,120,21],[102,24,120,22,"outIndex"],[102,32,120,30],[102,35,120,33],[102,36,120,34],[102,37,120,35],[102,40,120,38,"rgba"],[102,44,120,42],[102,45,120,43,"alpha"],[102,50,120,48],[103,14,121,12],[104,12,122,10],[104,13,122,11],[104,19,122,17],[105,14,123,12,"outData"],[105,21,123,19],[105,22,123,20,"writeUInt16BE"],[105,35,123,33],[105,36,123,34,"rgba"],[105,40,123,38],[105,41,123,39,"red"],[105,44,123,42],[105,46,123,44,"outIndex"],[105,54,123,52],[105,55,123,53],[106,14,124,12,"outData"],[106,21,124,19],[106,22,124,20,"writeUInt16BE"],[106,35,124,33],[106,36,124,34,"rgba"],[106,40,124,38],[106,41,124,39,"green"],[106,46,124,44],[106,48,124,46,"outIndex"],[106,56,124,54],[106,59,124,57],[106,60,124,58],[106,61,124,59],[107,14,125,12,"outData"],[107,21,125,19],[107,22,125,20,"writeUInt16BE"],[107,35,125,33],[107,36,125,34,"rgba"],[107,40,125,38],[107,41,125,39,"blue"],[107,45,125,43],[107,47,125,45,"outIndex"],[107,55,125,53],[107,58,125,56],[107,59,125,57],[107,60,125,58],[108,14,126,12],[108,18,126,16,"outHasAlpha"],[108,29,126,27],[108,31,126,29],[109,16,127,14,"outData"],[109,23,127,21],[109,24,127,22,"writeUInt16BE"],[109,37,127,35],[109,38,127,36,"rgba"],[109,42,127,40],[109,43,127,41,"alpha"],[109,48,127,46],[109,50,127,48,"outIndex"],[109,58,127,56],[109,61,127,59],[109,62,127,60],[109,63,127,61],[110,14,128,12],[111,12,129,10],[112,12,130,10],[113,10,131,8],[113,15,131,13,"constants"],[113,24,131,22],[113,25,131,23,"COLORTYPE_ALPHA"],[113,40,131,38],[114,10,132,8],[114,15,132,13,"constants"],[114,24,132,22],[114,25,132,23,"COLORTYPE_GRAYSCALE"],[114,44,132,42],[115,12,132,44],[116,14,133,10],[117,14,134,10],[117,18,134,14,"grayscale"],[117,27,134,23],[117,30,134,26],[117,31,134,27,"rgba"],[117,35,134,31],[117,36,134,32,"red"],[117,39,134,35],[117,42,134,38,"rgba"],[117,46,134,42],[117,47,134,43,"green"],[117,52,134,48],[117,55,134,51,"rgba"],[117,59,134,55],[117,60,134,56,"blue"],[117,64,134,60],[117,68,134,64],[117,69,134,65],[118,14,135,10],[118,18,135,14,"options"],[118,25,135,21],[118,26,135,22,"bitDepth"],[118,34,135,30],[118,39,135,35],[118,40,135,36],[118,42,135,38],[119,16,136,12,"outData"],[119,23,136,19],[119,24,136,20,"outIndex"],[119,32,136,28],[119,33,136,29],[119,36,136,32,"grayscale"],[119,45,136,41],[120,16,137,12],[120,20,137,16,"outHasAlpha"],[120,31,137,27],[120,33,137,29],[121,18,138,14,"outData"],[121,25,138,21],[121,26,138,22,"outIndex"],[121,34,138,30],[121,37,138,33],[121,38,138,34],[121,39,138,35],[121,42,138,38,"rgba"],[121,46,138,42],[121,47,138,43,"alpha"],[121,52,138,48],[122,16,139,12],[123,14,140,10],[123,15,140,11],[123,21,140,17],[124,16,141,12,"outData"],[124,23,141,19],[124,24,141,20,"writeUInt16BE"],[124,37,141,33],[124,38,141,34,"grayscale"],[124,47,141,43],[124,49,141,45,"outIndex"],[124,57,141,53],[124,58,141,54],[125,16,142,12],[125,20,142,16,"outHasAlpha"],[125,31,142,27],[125,33,142,29],[126,18,143,14,"outData"],[126,25,143,21],[126,26,143,22,"writeUInt16BE"],[126,39,143,35],[126,40,143,36,"rgba"],[126,44,143,40],[126,45,143,41,"alpha"],[126,50,143,46],[126,52,143,48,"outIndex"],[126,60,143,56],[126,63,143,59],[126,64,143,60],[126,65,143,61],[127,16,144,12],[128,14,145,10],[129,14,146,10],[130,12,147,8],[131,10,148,8],[132,12,149,10],[132,18,149,16],[132,22,149,20,"Error"],[132,27,149,25],[132,28,149,26],[132,54,149,52],[132,57,149,55,"options"],[132,64,149,62],[132,65,149,63,"colorType"],[132,74,149,72],[132,75,149,73],[133,8,150,6],[134,8,152,6,"inIndex"],[134,15,152,13],[134,19,152,17,"inBpp"],[134,24,152,22],[135,8,153,6,"outIndex"],[135,16,153,14],[135,20,153,18,"outBpp"],[135,26,153,24],[136,6,154,4],[137,4,155,2],[138,4,157,2],[138,11,157,9,"outData"],[138,18,157,16],[139,2,158,0],[139,3,158,1],[140,0,158,2],[140,3]],"functionMap":{"names":["<global>","module.exports","<anonymous>","getRGBA"],"mappings":"AAA;iBCI;qBCM;KDK;EEoC;GFsD;CDoD"},"hasCjsExports":true},"type":"js/module"}]}