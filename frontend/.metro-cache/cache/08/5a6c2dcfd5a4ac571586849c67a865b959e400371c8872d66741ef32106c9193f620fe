{"dependencies":[{"name":"react-native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":21,"index":394},"end":{"line":9,"column":44,"index":417}}],"key":"lGv6jwyWtmgghjjYvCX5yhM2Jt0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.areDimensionsNotEqual = areDimensionsNotEqual;\n  exports.areDimensionsEqual = areDimensionsEqual;\n  exports.roundOffPixel = roundOffPixel;\n  exports.measureParentSize = measureParentSize;\n  exports.measureFirstChildLayout = measureFirstChildLayout;\n  exports.measureItemLayout = measureItemLayout;\n  var react_native_1 = require(_dependencyMap[0], \"react-native\");\n  /**\n   * Measures the layout of a view relative to itselft.\n   * Using measure wasn't returing accurate values but this workaround does.\n   * Returns the x, y coordinates and dimensions of the view.\n   *\n   * @param view - The React Native View component to measure\n   * @returns An object containing x, y, width, and height measurements\n   */\n  function measureLayout(view, oldLayout) {\n    // const layout = view.unstable_getBoundingClientRect();\n    // layout.width = roundOffPixel(layout.width);\n    // layout.height = roundOffPixel(layout.height);\n    // return layout;\n    return measureLayoutRelative(view, view, oldLayout);\n  }\n  /**\n   * Measures the layout of a view relative to another view.\n   * Useful for measuring positions relative to a specific reference view.\n   *\n   * @param view - The React Native View component to measure\n   * @param relativeTo - The reference view to measure against\n   * @returns An object containing x, y, width, and height measurements\n   */\n  function measureLayoutRelative(view, relativeTo, oldLayout) {\n    var layout = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    view.measureLayout(relativeTo, function (x, y, width, height) {\n      layout.x = x;\n      layout.y = y;\n      layout.width = roundOffPixel(width);\n      layout.height = roundOffPixel(height);\n    });\n    if (oldLayout) {\n      if (areDimensionsEqual(layout.width, oldLayout.width)) {\n        layout.width = oldLayout.width;\n      }\n      if (areDimensionsEqual(layout.height, oldLayout.height)) {\n        layout.height = oldLayout.height;\n      }\n    }\n    return layout;\n  }\n  /**\n   * Checks if two dimension values are not equal, with a small tolerance.\n   * Used to handle floating-point precision issues in layout measurements.\n   *\n   * @param value1 - First dimension value to compare\n   * @param value2 - Second dimension value to compare\n   * @returns true if the values are significantly different, false otherwise\n   */\n  function areDimensionsNotEqual(value1, value2) {\n    return !areDimensionsEqual(value1, value2);\n  }\n  /**\n   * Checks if two dimension values are equal, with a small tolerance.\n   * Used to handle floating-point precision issues in layout measurements.\n   *\n   * @param value1 - First dimension value to compare\n   * @param value2 - Second dimension value to compare\n   * @returns true if the values are approximately equal, false otherwise\n   */\n  function areDimensionsEqual(value1, value2) {\n    return Math.abs(react_native_1.PixelRatio.getPixelSizeForLayoutSize(value1) - react_native_1.PixelRatio.getPixelSizeForLayoutSize(value2)) <= 1;\n  }\n  function roundOffPixel(value) {\n    return react_native_1.PixelRatio.roundToNearestPixel(value);\n  }\n  /**\n   * Specific method for easier mocking\n   * Measures the layout of parent of RecyclerView\n   * Returns the x, y coordinates and dimensions of the view.\n   * @param view - The React Native View component to measure\n   * @returns An object containing x, y, width, and height measurements\n   */\n  function measureParentSize(view) {\n    return measureLayout(view, undefined);\n  }\n  /**\n   * Specific method for easier mocking\n   * Measures the layout of child container of RecyclerView\n   * @param childContainerView\n   * @param parentView\n   * @returns\n   */\n  function measureFirstChildLayout(childContainerView, parentView) {\n    return measureLayoutRelative(childContainerView, parentView, undefined);\n  }\n  /**\n   * Specific method for easier mocking\n   * Measures the layout of items of RecyclerView\n   * @param item\n   * @param oldLayout\n   * @returns\n   */\n  function measureItemLayout(item, oldLayout) {\n    return measureLayout(item, oldLayout);\n  }\n});","lineCount":115,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"areDimensionsNotEqual"],[7,31,3,29],[7,34,3,32,"areDimensionsNotEqual"],[7,55,3,53],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"areDimensionsEqual"],[8,28,4,26],[8,31,4,29,"areDimensionsEqual"],[8,49,4,47],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"roundOffPixel"],[9,23,5,21],[9,26,5,24,"roundOffPixel"],[9,39,5,37],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"measureParentSize"],[10,27,6,25],[10,30,6,28,"measureParentSize"],[10,47,6,45],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"measureFirstChildLayout"],[11,33,7,31],[11,36,7,34,"measureFirstChildLayout"],[11,59,7,57],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"measureItemLayout"],[12,27,8,25],[12,30,8,28,"measureItemLayout"],[12,47,8,45],[13,2,9,0],[13,6,9,4,"react_native_1"],[13,20,9,18],[13,23,9,21,"require"],[13,30,9,28],[13,31,9,28,"_dependencyMap"],[13,45,9,28],[13,64,9,43],[13,65,9,44],[14,2,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,2,18,0],[22,11,18,9,"measureLayout"],[22,24,18,22,"measureLayout"],[22,25,18,23,"view"],[22,29,18,27],[22,31,18,29,"oldLayout"],[22,40,18,38],[22,42,18,40],[23,4,19,4],[24,4,20,4],[25,4,21,4],[26,4,22,4],[27,4,23,4],[27,11,23,11,"measureLayoutRelative"],[27,32,23,32],[27,33,23,33,"view"],[27,37,23,37],[27,39,23,39,"view"],[27,43,23,43],[27,45,23,45,"oldLayout"],[27,54,23,54],[27,55,23,55],[28,2,24,0],[29,2,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,2,33,0],[37,11,33,9,"measureLayoutRelative"],[37,32,33,30,"measureLayoutRelative"],[37,33,33,31,"view"],[37,37,33,35],[37,39,33,37,"relativeTo"],[37,49,33,47],[37,51,33,49,"oldLayout"],[37,60,33,58],[37,62,33,60],[38,4,34,4],[38,8,34,8,"layout"],[38,14,34,14],[38,17,34,17],[39,6,34,19,"x"],[39,7,34,20],[39,9,34,22],[39,10,34,23],[40,6,34,25,"y"],[40,7,34,26],[40,9,34,28],[40,10,34,29],[41,6,34,31,"width"],[41,11,34,36],[41,13,34,38],[41,14,34,39],[42,6,34,41,"height"],[42,12,34,47],[42,14,34,49],[43,4,34,51],[43,5,34,52],[44,4,35,4,"view"],[44,8,35,8],[44,9,35,9,"measureLayout"],[44,22,35,22],[44,23,35,23,"relativeTo"],[44,33,35,33],[44,35,35,35],[44,45,35,45,"x"],[44,46,35,46],[44,48,35,48,"y"],[44,49,35,49],[44,51,35,51,"width"],[44,56,35,56],[44,58,35,58,"height"],[44,64,35,64],[44,66,35,66],[45,6,36,8,"layout"],[45,12,36,14],[45,13,36,15,"x"],[45,14,36,16],[45,17,36,19,"x"],[45,18,36,20],[46,6,37,8,"layout"],[46,12,37,14],[46,13,37,15,"y"],[46,14,37,16],[46,17,37,19,"y"],[46,18,37,20],[47,6,38,8,"layout"],[47,12,38,14],[47,13,38,15,"width"],[47,18,38,20],[47,21,38,23,"roundOffPixel"],[47,34,38,36],[47,35,38,37,"width"],[47,40,38,42],[47,41,38,43],[48,6,39,8,"layout"],[48,12,39,14],[48,13,39,15,"height"],[48,19,39,21],[48,22,39,24,"roundOffPixel"],[48,35,39,37],[48,36,39,38,"height"],[48,42,39,44],[48,43,39,45],[49,4,40,4],[49,5,40,5],[49,6,40,6],[50,4,41,4],[50,8,41,8,"oldLayout"],[50,17,41,17],[50,19,41,19],[51,6,42,8],[51,10,42,12,"areDimensionsEqual"],[51,28,42,30],[51,29,42,31,"layout"],[51,35,42,37],[51,36,42,38,"width"],[51,41,42,43],[51,43,42,45,"oldLayout"],[51,52,42,54],[51,53,42,55,"width"],[51,58,42,60],[51,59,42,61],[51,61,42,63],[52,8,43,12,"layout"],[52,14,43,18],[52,15,43,19,"width"],[52,20,43,24],[52,23,43,27,"oldLayout"],[52,32,43,36],[52,33,43,37,"width"],[52,38,43,42],[53,6,44,8],[54,6,45,8],[54,10,45,12,"areDimensionsEqual"],[54,28,45,30],[54,29,45,31,"layout"],[54,35,45,37],[54,36,45,38,"height"],[54,42,45,44],[54,44,45,46,"oldLayout"],[54,53,45,55],[54,54,45,56,"height"],[54,60,45,62],[54,61,45,63],[54,63,45,65],[55,8,46,12,"layout"],[55,14,46,18],[55,15,46,19,"height"],[55,21,46,25],[55,24,46,28,"oldLayout"],[55,33,46,37],[55,34,46,38,"height"],[55,40,46,44],[56,6,47,8],[57,4,48,4],[58,4,49,4],[58,11,49,11,"layout"],[58,17,49,17],[59,2,50,0],[60,2,51,0],[61,0,52,0],[62,0,53,0],[63,0,54,0],[64,0,55,0],[65,0,56,0],[66,0,57,0],[67,0,58,0],[68,2,59,0],[68,11,59,9,"areDimensionsNotEqual"],[68,32,59,30,"areDimensionsNotEqual"],[68,33,59,31,"value1"],[68,39,59,37],[68,41,59,39,"value2"],[68,47,59,45],[68,49,59,47],[69,4,60,4],[69,11,60,11],[69,12,60,12,"areDimensionsEqual"],[69,30,60,30],[69,31,60,31,"value1"],[69,37,60,37],[69,39,60,39,"value2"],[69,45,60,45],[69,46,60,46],[70,2,61,0],[71,2,62,0],[72,0,63,0],[73,0,64,0],[74,0,65,0],[75,0,66,0],[76,0,67,0],[77,0,68,0],[78,0,69,0],[79,2,70,0],[79,11,70,9,"areDimensionsEqual"],[79,29,70,27,"areDimensionsEqual"],[79,30,70,28,"value1"],[79,36,70,34],[79,38,70,36,"value2"],[79,44,70,42],[79,46,70,44],[80,4,71,4],[80,11,71,12,"Math"],[80,15,71,16],[80,16,71,17,"abs"],[80,19,71,20],[80,20,71,21,"react_native_1"],[80,34,71,35],[80,35,71,36,"PixelRatio"],[80,45,71,46],[80,46,71,47,"getPixelSizeForLayoutSize"],[80,71,71,72],[80,72,71,73,"value1"],[80,78,71,79],[80,79,71,80],[80,82,72,8,"react_native_1"],[80,96,72,22],[80,97,72,23,"PixelRatio"],[80,107,72,33],[80,108,72,34,"getPixelSizeForLayoutSize"],[80,133,72,59],[80,134,72,60,"value2"],[80,140,72,66],[80,141,72,67],[80,142,72,68],[80,146,72,72],[80,147,72,73],[81,2,73,0],[82,2,74,0],[82,11,74,9,"roundOffPixel"],[82,24,74,22,"roundOffPixel"],[82,25,74,23,"value"],[82,30,74,28],[82,32,74,30],[83,4,75,4],[83,11,75,11,"react_native_1"],[83,25,75,25],[83,26,75,26,"PixelRatio"],[83,36,75,36],[83,37,75,37,"roundToNearestPixel"],[83,56,75,56],[83,57,75,57,"value"],[83,62,75,62],[83,63,75,63],[84,2,76,0],[85,2,77,0],[86,0,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,0,83,0],[92,2,84,0],[92,11,84,9,"measureParentSize"],[92,28,84,26,"measureParentSize"],[92,29,84,27,"view"],[92,33,84,31],[92,35,84,33],[93,4,85,4],[93,11,85,11,"measureLayout"],[93,24,85,24],[93,25,85,25,"view"],[93,29,85,29],[93,31,85,31,"undefined"],[93,40,85,40],[93,41,85,41],[94,2,86,0],[95,2,87,0],[96,0,88,0],[97,0,89,0],[98,0,90,0],[99,0,91,0],[100,0,92,0],[101,0,93,0],[102,2,94,0],[102,11,94,9,"measureFirstChildLayout"],[102,34,94,32,"measureFirstChildLayout"],[102,35,94,33,"childContainerView"],[102,53,94,51],[102,55,94,53,"parentView"],[102,65,94,63],[102,67,94,65],[103,4,95,4],[103,11,95,11,"measureLayoutRelative"],[103,32,95,32],[103,33,95,33,"childContainerView"],[103,51,95,51],[103,53,95,53,"parentView"],[103,63,95,63],[103,65,95,65,"undefined"],[103,74,95,74],[103,75,95,75],[104,2,96,0],[105,2,97,0],[106,0,98,0],[107,0,99,0],[108,0,100,0],[109,0,101,0],[110,0,102,0],[111,0,103,0],[112,2,104,0],[112,11,104,9,"measureItemLayout"],[112,28,104,26,"measureItemLayout"],[112,29,104,27,"item"],[112,33,104,31],[112,35,104,33,"oldLayout"],[112,44,104,42],[112,46,104,44],[113,4,105,4],[113,11,105,11,"measureLayout"],[113,24,105,24],[113,25,105,25,"item"],[113,29,105,29],[113,31,105,31,"oldLayout"],[113,40,105,40],[113,41,105,41],[114,2,106,0],[115,0,106,1],[115,3]],"functionMap":{"names":["<global>","measureLayout","measureLayoutRelative","view.measureLayout$argument_1","areDimensionsNotEqual","areDimensionsEqual","roundOffPixel","measureParentSize","measureFirstChildLayout","measureItemLayout"],"mappings":"AAA;ACiB;CDM;AES;mCCE;KDK;CFU;AIS;CJE;AKS;CLG;AMC;CNE;AOQ;CPE;AQQ;CRE;ASQ;CTE"},"hasCjsExports":true},"type":"js/module"}]}