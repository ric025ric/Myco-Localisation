{"dependencies":[{"name":"../../utils/AverageWindow","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":67,"index":118}}],"key":"SQ3dfDx/WV1Y1RzFg/JLZPMOTE0=","exportNames":["*"],"imports":1}},{"name":"../helpers/ConsecutiveNumbers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":67,"index":186}}],"key":"cw6KVs8kayN8q9jdmkBPMsl8V5I=","exportNames":["*"],"imports":1}},{"name":"../utils/findVisibleIndex","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":187},"end":{"line":4,"column":89,"index":276}}],"key":"KF1H7lNXclcNhWWhVoaVosY9bks=","exportNames":["*"],"imports":1}},{"name":"../utils/measureLayout","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":63,"index":340}}],"key":"hpvDiGKRYRB2EuXEMVVHwVt3//0=","exportNames":["*"],"imports":1}},{"name":"../../errors/ErrorMessages","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":341},"end":{"line":6,"column":59,"index":400}}],"key":"dcb4K7pqb6gN/GPdKjYu35YRe0w=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"RVLayoutManager\", {\n    enumerable: true,\n    get: function () {\n      return RVLayoutManager;\n    }\n  });\n  var _utilsAverageWindow = require(_dependencyMap[0], \"../../utils/AverageWindow\");\n  var _helpersConsecutiveNumbers = require(_dependencyMap[1], \"../helpers/ConsecutiveNumbers\");\n  var _utilsFindVisibleIndex = require(_dependencyMap[2], \"../utils/findVisibleIndex\");\n  var _utilsMeasureLayout = require(_dependencyMap[3], \"../utils/measureLayout\");\n  var _errorsErrorMessages = require(_dependencyMap[4], \"../../errors/ErrorMessages\");\n  // Interface of layout manager for app's listviews\n\n  /**\n   * Base abstract class for layout managers in the recycler view system.\n   * Provides common functionality for managing item layouts and dimensions.\n   * Supports both horizontal and vertical layouts with dynamic item sizing.\n   */\n  class RVLayoutManager {\n    constructor(params, previousLayoutManager) {\n      var _a, _b;\n      /** Flag indicating if the layout requires repainting */\n      this.requiresRepaint = false;\n      /** Maximum number of items to process in a single layout pass */\n      this.maxItemsToProcess = 250;\n      /** Information about item spans and sizes */\n      this.spanSizeInfo = {};\n      /** Span tracker for each item */\n      this.spanTracker = [];\n      /** Current max index with changed layout */\n      this.currentMaxIndexWithChangedLayout = -1;\n      /**\n       * Last index that was skipped during layout computation.\n       * Used to determine if a layout needs to be recomputed.\n       */\n      this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n      this.heightAverageWindow = new _utilsAverageWindow.MultiTypeAverageWindow(5, 200);\n      this.widthAverageWindow = new _utilsAverageWindow.MultiTypeAverageWindow(5, 200);\n      this.getItemType = params.getItemType;\n      this.overrideItemLayout = params.overrideItemLayout;\n      this.layouts = (_a = previousLayoutManager === null || previousLayoutManager === void 0 ? void 0 : previousLayoutManager.layouts) !== null && _a !== void 0 ? _a : [];\n      if (previousLayoutManager) {\n        this.updateLayoutParams(params);\n      } else {\n        this.horizontal = Boolean(params.horizontal);\n        this.windowSize = params.windowSize;\n        this.maxColumns = (_b = params.maxColumns) !== null && _b !== void 0 ? _b : 1;\n      }\n    }\n    /**\n     * Gets the estimated width for an item based on its type.\n     * @param index Index of the item\n     * @returns Estimated width\n     */\n    getEstimatedWidth(index) {\n      return this.widthAverageWindow.getCurrentValue(this.getItemType(index));\n    }\n    /**\n     * Gets the estimated height for an item based on its type.\n     * @param index Index of the item\n     * @returns Estimated height\n     */\n    getEstimatedHeight(index) {\n      return this.heightAverageWindow.getCurrentValue(this.getItemType(index));\n    }\n    /**\n     * Checks if the layout is horizontal.\n     * @returns True if horizontal, false if vertical\n     */\n    isHorizontal() {\n      return this.horizontal;\n    }\n    /**\n     * Gets the dimensions of the visible window.\n     * @returns Window dimensions\n     */\n    getWindowsSize() {\n      return this.windowSize;\n    }\n    /**\n     * Gets indices of items currently visible in the viewport.\n     * Uses binary search for efficient lookup.\n     * @param unboundDimensionStart Start position of viewport (start X or start Y)\n     * @param unboundDimensionEnd End position of viewport (end X or end Y)\n     * @returns ConsecutiveNumbers containing visible indices\n     */\n    getVisibleLayouts(unboundDimensionStart, unboundDimensionEnd) {\n      // Find the first visible index\n      const firstVisibleIndex = (0, _utilsFindVisibleIndex.findFirstVisibleIndex)(this.layouts, unboundDimensionStart, this.horizontal);\n      // Find the last visible index\n      const lastVisibleIndex = (0, _utilsFindVisibleIndex.findLastVisibleIndex)(this.layouts, unboundDimensionEnd, this.horizontal);\n      // Collect the indices in the range\n      if (firstVisibleIndex !== -1 && lastVisibleIndex !== -1) {\n        return new _helpersConsecutiveNumbers.ConsecutiveNumbers(firstVisibleIndex, lastVisibleIndex);\n      }\n      return _helpersConsecutiveNumbers.ConsecutiveNumbers.EMPTY;\n    }\n    /**\n     * Removes layout information for specified indices and recomputes layout.\n     * @param indices Array of indices to remove\n     */\n    deleteLayout(indices) {\n      // Sort indices in descending order\n      indices.sort((num1, num2) => num2 - num1);\n      // Remove elements from the array\n      for (const index of indices) {\n        this.layouts.splice(index, 1);\n      }\n      const startIndex = Math.min(...indices);\n      // Recompute layouts starting from the smallest index in the original indices array\n      this._recomputeLayouts(this.getMinRecomputeIndex(startIndex), this.getMaxRecomputeIndex(startIndex));\n    }\n    /**\n     * Updates layout information for items and recomputes layout if necessary.\n     * @param layoutInfo Array of layout information for items (real measurements)\n     * @param totalItemCount Total number of items in the list\n     */\n    modifyLayout(layoutInfo, totalItemCount) {\n      var _a;\n      this.maxItemsToProcess = Math.max(this.maxItemsToProcess, layoutInfo.length * 10);\n      let minRecomputeIndex = Number.MAX_VALUE;\n      if (this.layouts.length > totalItemCount) {\n        this.layouts.length = totalItemCount;\n        this.spanTracker.length = totalItemCount;\n        minRecomputeIndex = totalItemCount - 1; // <0 gets skipped so it's safe to set to totalItemCount - 1\n      }\n      // update average windows\n      minRecomputeIndex = Math.min(minRecomputeIndex, this.computeEstimatesAndMinMaxChangedLayout(layoutInfo));\n      if (this.layouts.length < totalItemCount && totalItemCount > 0) {\n        const startIndex = this.layouts.length;\n        this.layouts.length = totalItemCount;\n        this.spanTracker.length = totalItemCount;\n        for (let i = startIndex; i < totalItemCount; i++) {\n          this.getLayout(i);\n          this.getSpan(i);\n        }\n        this.recomputeLayouts(startIndex, totalItemCount - 1);\n      }\n      // compute minRecomputeIndex\n      minRecomputeIndex = Math.min(minRecomputeIndex, this.lastSkippedLayoutIndex, this.computeMinIndexWithChangedSpan(layoutInfo), (_a = this.processLayoutInfo(layoutInfo, totalItemCount)) !== null && _a !== void 0 ? _a : minRecomputeIndex, this.computeEstimatesAndMinMaxChangedLayout(layoutInfo));\n      if (minRecomputeIndex >= 0 && minRecomputeIndex < totalItemCount) {\n        const maxRecomputeIndex = this.getMaxRecomputeIndex(minRecomputeIndex);\n        this._recomputeLayouts(minRecomputeIndex, maxRecomputeIndex);\n      }\n      this.currentMaxIndexWithChangedLayout = -1;\n    }\n    /**\n     * Gets layout information for an item at the given index.\n     * Creates and initializes a new layout if one doesn't exist.\n     * @param index Index of the item\n     * @returns Layout information for the item\n     */\n    getLayout(index) {\n      if (index >= this.layouts.length) {\n        throw new Error(_errorsErrorMessages.ErrorMessages.indexOutOfBounds);\n      }\n      let layout = this.layouts[index];\n      if (!layout) {\n        // Create new layout with estimated dimensions\n        layout = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n        this.layouts[index] = layout;\n      }\n      if (!layout.isWidthMeasured || !layout.isHeightMeasured) {\n        this.estimateLayout(index);\n      }\n      return layout;\n    }\n    /**\n     * Updates layout parameters and triggers recomputation if necessary.\n     * @param params New layout parameters\n     */\n    updateLayoutParams(params) {\n      var _a, _b, _c;\n      this.windowSize = params.windowSize;\n      this.horizontal = (_a = params.horizontal) !== null && _a !== void 0 ? _a : this.horizontal;\n      this.maxColumns = (_b = params.maxColumns) !== null && _b !== void 0 ? _b : this.maxColumns;\n      this.optimizeItemArrangement = (_c = params.optimizeItemArrangement) !== null && _c !== void 0 ? _c : this.optimizeItemArrangement;\n    }\n    getLayoutCount() {\n      return this.layouts.length;\n    }\n    /**\n     * Gets span for an item, applying any overrides.\n     * This is intended to be called during a relayout call. The value is tracked and used to determine if a span change has occurred.\n     * If skipTracking is true, the operation is not tracked. Can be useful if span is required outside of a relayout call.\n     * The tracker is used to call handleSpanChange if a span change has occurred before relayout call.\n     * // TODO: improve this contract.\n     * @param index Index of the item\n     * @returns Span for the item\n     */\n    getSpan(index, skipTracking = false) {\n      var _a;\n      this.spanSizeInfo.span = undefined;\n      this.overrideItemLayout(index, this.spanSizeInfo);\n      const span = Math.min((_a = this.spanSizeInfo.span) !== null && _a !== void 0 ? _a : 1, this.maxColumns);\n      if (!skipTracking) {\n        this.spanTracker[index] = span;\n      }\n      return span;\n    }\n    /**\n     * Method to handle span change for an item. Can be overridden by subclasses.\n     * @param index Index of the item\n     */\n    handleSpanChange(index) {}\n    /**\n     * Gets the maximum index to process in a single layout pass.\n     * @param startIndex Starting index\n     * @returns Maximum index to process\n     */\n    getMaxRecomputeIndex(startIndex) {\n      return Math.min(Math.max(startIndex, this.currentMaxIndexWithChangedLayout) + this.maxItemsToProcess, this.layouts.length - 1);\n    }\n    /**\n     * Gets the minimum index to process in a single layout pass.\n     * @param startIndex Starting index\n     * @returns Minimum index to process\n     */\n    getMinRecomputeIndex(startIndex) {\n      return startIndex;\n    }\n    _recomputeLayouts(startIndex, endIndex) {\n      this.recomputeLayouts(startIndex, endIndex);\n      if (this.lastSkippedLayoutIndex >= startIndex && this.lastSkippedLayoutIndex <= endIndex) {\n        this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n      }\n      if (endIndex + 1 < this.layouts.length) {\n        this.lastSkippedLayoutIndex = Math.min(endIndex + 1, this.lastSkippedLayoutIndex);\n        const lastIndex = this.layouts.length - 1;\n        // Since layout managers derive height from last indices we need to make\n        // sure they're not too much out of sync.\n        if (this.layouts[lastIndex].y < this.layouts[endIndex].y) {\n          this.recomputeLayouts(this.lastSkippedLayoutIndex, lastIndex);\n          this.lastSkippedLayoutIndex = Number.MAX_VALUE;\n        }\n      }\n    }\n    /**\n     * Computes size estimates and finds the minimum recompute index.\n     * @param layoutInfo Array of layout information for items\n     * @returns Minimum index that needs recomputation\n     */\n    computeEstimatesAndMinMaxChangedLayout(layoutInfo) {\n      let minRecomputeIndex = Number.MAX_VALUE;\n      for (const info of layoutInfo) {\n        const {\n          index,\n          dimensions\n        } = info;\n        const storedLayout = this.layouts[index];\n        if (index >= this.lastSkippedLayoutIndex || !storedLayout || !storedLayout.isHeightMeasured || !storedLayout.isWidthMeasured || (0, _utilsMeasureLayout.areDimensionsNotEqual)(storedLayout.height, dimensions.height) || (0, _utilsMeasureLayout.areDimensionsNotEqual)(storedLayout.width, dimensions.width)) {\n          minRecomputeIndex = Math.min(minRecomputeIndex, index);\n          this.currentMaxIndexWithChangedLayout = Math.max(this.currentMaxIndexWithChangedLayout, index);\n        }\n        this.heightAverageWindow.addValue(dimensions.height, this.getItemType(index));\n        this.widthAverageWindow.addValue(dimensions.width, this.getItemType(index));\n      }\n      return minRecomputeIndex;\n    }\n    computeMinIndexWithChangedSpan(layoutInfo) {\n      let minIndexWithChangedSpan = Number.MAX_VALUE;\n      for (const info of layoutInfo) {\n        const {\n          index\n        } = info;\n        const span = this.getSpan(index, true);\n        const storedSpan = this.spanTracker[index];\n        if (span !== storedSpan) {\n          this.spanTracker[index] = span;\n          this.handleSpanChange(index);\n          minIndexWithChangedSpan = Math.min(minIndexWithChangedSpan, index);\n        }\n      }\n      return minIndexWithChangedSpan;\n    }\n  }\n});","lineCount":288,"map":[[7,2,12,0,"Object"],[7,8,12,0],[7,9,12,0,"defineProperty"],[7,23,12,0],[7,24,12,0,"exports"],[7,31,12,0],[8,4,12,0,"enumerable"],[8,14,12,0],[9,4,12,0,"get"],[9,7,12,0],[9,18,12,0,"get"],[9,19,12,0],[10,6,12,0],[10,13,12,0,"RVLayoutManager"],[10,28,12,0],[11,4,12,0],[12,2,12,0],[13,2,2,0],[13,6,2,0,"_utilsAverageWindow"],[13,25,2,0],[13,28,2,0,"require"],[13,35,2,0],[13,36,2,0,"_dependencyMap"],[13,50,2,0],[14,2,3,0],[14,6,3,0,"_helpersConsecutiveNumbers"],[14,32,3,0],[14,35,3,0,"require"],[14,42,3,0],[14,43,3,0,"_dependencyMap"],[14,57,3,0],[15,2,4,0],[15,6,4,0,"_utilsFindVisibleIndex"],[15,28,4,0],[15,31,4,0,"require"],[15,38,4,0],[15,39,4,0,"_dependencyMap"],[15,53,4,0],[16,2,5,0],[16,6,5,0,"_utilsMeasureLayout"],[16,25,5,0],[16,28,5,0,"require"],[16,35,5,0],[16,36,5,0,"_dependencyMap"],[16,50,5,0],[17,2,6,0],[17,6,6,0,"_errorsErrorMessages"],[17,26,6,0],[17,29,6,0,"require"],[17,36,6,0],[17,37,6,0,"_dependencyMap"],[17,51,6,0],[18,2,1,0],[20,2,7,0],[21,0,8,0],[22,0,9,0],[23,0,10,0],[24,0,11,0],[25,2,12,7],[25,8,12,13,"RVLayoutManager"],[25,23,12,28],[25,24,12,29],[26,4,13,4,"constructor"],[26,15,13,15,"constructor"],[26,16,13,16,"params"],[26,22,13,22],[26,24,13,24,"previousLayoutManager"],[26,45,13,45],[26,47,13,47],[27,6,14,8],[27,10,14,12,"_a"],[27,12,14,14],[27,14,14,16,"_b"],[27,16,14,18],[28,6,15,8],[29,6,16,8],[29,10,16,12],[29,11,16,13,"requiresRepaint"],[29,26,16,28],[29,29,16,31],[29,34,16,36],[30,6,17,8],[31,6,18,8],[31,10,18,12],[31,11,18,13,"maxItemsToProcess"],[31,28,18,30],[31,31,18,33],[31,34,18,36],[32,6,19,8],[33,6,20,8],[33,10,20,12],[33,11,20,13,"spanSizeInfo"],[33,23,20,25],[33,26,20,28],[33,27,20,29],[33,28,20,30],[34,6,21,8],[35,6,22,8],[35,10,22,12],[35,11,22,13,"spanTracker"],[35,22,22,24],[35,25,22,27],[35,27,22,29],[36,6,23,8],[37,6,24,8],[37,10,24,12],[37,11,24,13,"currentMaxIndexWithChangedLayout"],[37,43,24,45],[37,46,24,48],[37,47,24,49],[37,48,24,50],[38,6,25,8],[39,0,26,0],[40,0,27,0],[41,0,28,0],[42,6,29,8],[42,10,29,12],[42,11,29,13,"lastSkippedLayoutIndex"],[42,33,29,35],[42,36,29,38,"Number"],[42,42,29,44],[42,43,29,45,"MAX_VALUE"],[42,52,29,54],[43,6,30,8],[43,10,30,12],[43,11,30,13,"heightAverageWindow"],[43,30,30,32],[43,33,30,35],[43,37,30,39,"MultiTypeAverageWindow"],[43,56,30,61],[43,57,30,61,"MultiTypeAverageWindow"],[43,79,30,61],[43,80,30,62],[43,81,30,63],[43,83,30,65],[43,86,30,68],[43,87,30,69],[44,6,31,8],[44,10,31,12],[44,11,31,13,"widthAverageWindow"],[44,29,31,31],[44,32,31,34],[44,36,31,38,"MultiTypeAverageWindow"],[44,55,31,60],[44,56,31,60,"MultiTypeAverageWindow"],[44,78,31,60],[44,79,31,61],[44,80,31,62],[44,82,31,64],[44,85,31,67],[44,86,31,68],[45,6,32,8],[45,10,32,12],[45,11,32,13,"getItemType"],[45,22,32,24],[45,25,32,27,"params"],[45,31,32,33],[45,32,32,34,"getItemType"],[45,43,32,45],[46,6,33,8],[46,10,33,12],[46,11,33,13,"overrideItemLayout"],[46,29,33,31],[46,32,33,34,"params"],[46,38,33,40],[46,39,33,41,"overrideItemLayout"],[46,57,33,59],[47,6,34,8],[47,10,34,12],[47,11,34,13,"layouts"],[47,18,34,20],[47,21,34,23],[47,22,34,24,"_a"],[47,24,34,26],[47,27,34,29,"previousLayoutManager"],[47,48,34,50],[47,53,34,55],[47,57,34,59],[47,61,34,63,"previousLayoutManager"],[47,82,34,84],[47,87,34,89],[47,92,34,94],[47,93,34,95],[47,96,34,98],[47,101,34,103],[47,102,34,104],[47,105,34,107,"previousLayoutManager"],[47,126,34,128],[47,127,34,129,"layouts"],[47,134,34,136],[47,140,34,142],[47,144,34,146],[47,148,34,150,"_a"],[47,150,34,152],[47,155,34,157],[47,160,34,162],[47,161,34,163],[47,164,34,166,"_a"],[47,166,34,168],[47,169,34,171],[47,171,34,173],[48,6,35,8],[48,10,35,12,"previousLayoutManager"],[48,31,35,33],[48,33,35,35],[49,8,36,12],[49,12,36,16],[49,13,36,17,"updateLayoutParams"],[49,31,36,35],[49,32,36,36,"params"],[49,38,36,42],[49,39,36,43],[50,6,37,8],[50,7,37,9],[50,13,38,13],[51,8,39,12],[51,12,39,16],[51,13,39,17,"horizontal"],[51,23,39,27],[51,26,39,30,"Boolean"],[51,33,39,37],[51,34,39,38,"params"],[51,40,39,44],[51,41,39,45,"horizontal"],[51,51,39,55],[51,52,39,56],[52,8,40,12],[52,12,40,16],[52,13,40,17,"windowSize"],[52,23,40,27],[52,26,40,30,"params"],[52,32,40,36],[52,33,40,37,"windowSize"],[52,43,40,47],[53,8,41,12],[53,12,41,16],[53,13,41,17,"maxColumns"],[53,23,41,27],[53,26,41,30],[53,27,41,31,"_b"],[53,29,41,33],[53,32,41,36,"params"],[53,38,41,42],[53,39,41,43,"maxColumns"],[53,49,41,53],[53,55,41,59],[53,59,41,63],[53,63,41,67,"_b"],[53,65,41,69],[53,70,41,74],[53,75,41,79],[53,76,41,80],[53,79,41,83,"_b"],[53,81,41,85],[53,84,41,88],[53,85,41,89],[54,6,42,8],[55,4,43,4],[56,4,44,4],[57,0,45,0],[58,0,46,0],[59,0,47,0],[60,0,48,0],[61,4,49,4,"getEstimatedWidth"],[61,21,49,21,"getEstimatedWidth"],[61,22,49,22,"index"],[61,27,49,27],[61,29,49,29],[62,6,50,8],[62,13,50,15],[62,17,50,19],[62,18,50,20,"widthAverageWindow"],[62,36,50,38],[62,37,50,39,"getCurrentValue"],[62,52,50,54],[62,53,50,55],[62,57,50,59],[62,58,50,60,"getItemType"],[62,69,50,71],[62,70,50,72,"index"],[62,75,50,77],[62,76,50,78],[62,77,50,79],[63,4,51,4],[64,4,52,4],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,0,56,0],[69,4,57,4,"getEstimatedHeight"],[69,22,57,22,"getEstimatedHeight"],[69,23,57,23,"index"],[69,28,57,28],[69,30,57,30],[70,6,58,8],[70,13,58,15],[70,17,58,19],[70,18,58,20,"heightAverageWindow"],[70,37,58,39],[70,38,58,40,"getCurrentValue"],[70,53,58,55],[70,54,58,56],[70,58,58,60],[70,59,58,61,"getItemType"],[70,70,58,72],[70,71,58,73,"index"],[70,76,58,78],[70,77,58,79],[70,78,58,80],[71,4,59,4],[72,4,60,4],[73,0,61,0],[74,0,62,0],[75,0,63,0],[76,4,64,4,"isHorizontal"],[76,16,64,16,"isHorizontal"],[76,17,64,16],[76,19,64,19],[77,6,65,8],[77,13,65,15],[77,17,65,19],[77,18,65,20,"horizontal"],[77,28,65,30],[78,4,66,4],[79,4,67,4],[80,0,68,0],[81,0,69,0],[82,0,70,0],[83,4,71,4,"getWindowsSize"],[83,18,71,18,"getWindowsSize"],[83,19,71,18],[83,21,71,21],[84,6,72,8],[84,13,72,15],[84,17,72,19],[84,18,72,20,"windowSize"],[84,28,72,30],[85,4,73,4],[86,4,74,4],[87,0,75,0],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,4,81,4,"getVisibleLayouts"],[93,21,81,21,"getVisibleLayouts"],[93,22,81,22,"unboundDimensionStart"],[93,43,81,43],[93,45,81,45,"unboundDimensionEnd"],[93,64,81,64],[93,66,81,66],[94,6,82,8],[95,6,83,8],[95,12,83,14,"firstVisibleIndex"],[95,29,83,31],[95,32,83,34],[95,36,83,34,"findFirstVisibleIndex"],[95,58,83,55],[95,59,83,55,"findFirstVisibleIndex"],[95,80,83,55],[95,82,83,56],[95,86,83,60],[95,87,83,61,"layouts"],[95,94,83,68],[95,96,83,70,"unboundDimensionStart"],[95,117,83,91],[95,119,83,93],[95,123,83,97],[95,124,83,98,"horizontal"],[95,134,83,108],[95,135,83,109],[96,6,84,8],[97,6,85,8],[97,12,85,14,"lastVisibleIndex"],[97,28,85,30],[97,31,85,33],[97,35,85,33,"findLastVisibleIndex"],[97,57,85,53],[97,58,85,53,"findLastVisibleIndex"],[97,78,85,53],[97,80,85,54],[97,84,85,58],[97,85,85,59,"layouts"],[97,92,85,66],[97,94,85,68,"unboundDimensionEnd"],[97,113,85,87],[97,115,85,89],[97,119,85,93],[97,120,85,94,"horizontal"],[97,130,85,104],[97,131,85,105],[98,6,86,8],[99,6,87,8],[99,10,87,12,"firstVisibleIndex"],[99,27,87,29],[99,32,87,34],[99,33,87,35],[99,34,87,36],[99,38,87,40,"lastVisibleIndex"],[99,54,87,56],[99,59,87,61],[99,60,87,62],[99,61,87,63],[99,63,87,65],[100,8,88,12],[100,15,88,19],[100,19,88,23,"ConsecutiveNumbers"],[100,45,88,41],[100,46,88,41,"ConsecutiveNumbers"],[100,64,88,41],[100,65,88,42,"firstVisibleIndex"],[100,82,88,59],[100,84,88,61,"lastVisibleIndex"],[100,100,88,77],[100,101,88,78],[101,6,89,8],[102,6,90,8],[102,13,90,15,"ConsecutiveNumbers"],[102,39,90,33],[102,40,90,33,"ConsecutiveNumbers"],[102,58,90,33],[102,59,90,34,"EMPTY"],[102,64,90,39],[103,4,91,4],[104,4,92,4],[105,0,93,0],[106,0,94,0],[107,0,95,0],[108,4,96,4,"deleteLayout"],[108,16,96,16,"deleteLayout"],[108,17,96,17,"indices"],[108,24,96,24],[108,26,96,26],[109,6,97,8],[110,6,98,8,"indices"],[110,13,98,15],[110,14,98,16,"sort"],[110,18,98,20],[110,19,98,21],[110,20,98,22,"num1"],[110,24,98,26],[110,26,98,28,"num2"],[110,30,98,32],[110,35,98,37,"num2"],[110,39,98,41],[110,42,98,44,"num1"],[110,46,98,48],[110,47,98,49],[111,6,99,8],[112,6,100,8],[112,11,100,13],[112,17,100,19,"index"],[112,22,100,24],[112,26,100,28,"indices"],[112,33,100,35],[112,35,100,37],[113,8,101,12],[113,12,101,16],[113,13,101,17,"layouts"],[113,20,101,24],[113,21,101,25,"splice"],[113,27,101,31],[113,28,101,32,"index"],[113,33,101,37],[113,35,101,39],[113,36,101,40],[113,37,101,41],[114,6,102,8],[115,6,103,8],[115,12,103,14,"startIndex"],[115,22,103,24],[115,25,103,27,"Math"],[115,29,103,31],[115,30,103,32,"min"],[115,33,103,35],[115,34,103,36],[115,37,103,39,"indices"],[115,44,103,46],[115,45,103,47],[116,6,104,8],[117,6,105,8],[117,10,105,12],[117,11,105,13,"_recomputeLayouts"],[117,28,105,30],[117,29,105,31],[117,33,105,35],[117,34,105,36,"getMinRecomputeIndex"],[117,54,105,56],[117,55,105,57,"startIndex"],[117,65,105,67],[117,66,105,68],[117,68,105,70],[117,72,105,74],[117,73,105,75,"getMaxRecomputeIndex"],[117,93,105,95],[117,94,105,96,"startIndex"],[117,104,105,106],[117,105,105,107],[117,106,105,108],[118,4,106,4],[119,4,107,4],[120,0,108,0],[121,0,109,0],[122,0,110,0],[123,0,111,0],[124,4,112,4,"modifyLayout"],[124,16,112,16,"modifyLayout"],[124,17,112,17,"layoutInfo"],[124,27,112,27],[124,29,112,29,"totalItemCount"],[124,43,112,43],[124,45,112,45],[125,6,113,8],[125,10,113,12,"_a"],[125,12,113,14],[126,6,114,8],[126,10,114,12],[126,11,114,13,"maxItemsToProcess"],[126,28,114,30],[126,31,114,33,"Math"],[126,35,114,37],[126,36,114,38,"max"],[126,39,114,41],[126,40,114,42],[126,44,114,46],[126,45,114,47,"maxItemsToProcess"],[126,62,114,64],[126,64,114,66,"layoutInfo"],[126,74,114,76],[126,75,114,77,"length"],[126,81,114,83],[126,84,114,86],[126,86,114,88],[126,87,114,89],[127,6,115,8],[127,10,115,12,"minRecomputeIndex"],[127,27,115,29],[127,30,115,32,"Number"],[127,36,115,38],[127,37,115,39,"MAX_VALUE"],[127,46,115,48],[128,6,116,8],[128,10,116,12],[128,14,116,16],[128,15,116,17,"layouts"],[128,22,116,24],[128,23,116,25,"length"],[128,29,116,31],[128,32,116,34,"totalItemCount"],[128,46,116,48],[128,48,116,50],[129,8,117,12],[129,12,117,16],[129,13,117,17,"layouts"],[129,20,117,24],[129,21,117,25,"length"],[129,27,117,31],[129,30,117,34,"totalItemCount"],[129,44,117,48],[130,8,118,12],[130,12,118,16],[130,13,118,17,"spanTracker"],[130,24,118,28],[130,25,118,29,"length"],[130,31,118,35],[130,34,118,38,"totalItemCount"],[130,48,118,52],[131,8,119,12,"minRecomputeIndex"],[131,25,119,29],[131,28,119,32,"totalItemCount"],[131,42,119,46],[131,45,119,49],[131,46,119,50],[131,47,119,51],[131,48,119,52],[132,6,120,8],[133,6,121,8],[134,6,122,8,"minRecomputeIndex"],[134,23,122,25],[134,26,122,28,"Math"],[134,30,122,32],[134,31,122,33,"min"],[134,34,122,36],[134,35,122,37,"minRecomputeIndex"],[134,52,122,54],[134,54,122,56],[134,58,122,60],[134,59,122,61,"computeEstimatesAndMinMaxChangedLayout"],[134,97,122,99],[134,98,122,100,"layoutInfo"],[134,108,122,110],[134,109,122,111],[134,110,122,112],[135,6,123,8],[135,10,123,12],[135,14,123,16],[135,15,123,17,"layouts"],[135,22,123,24],[135,23,123,25,"length"],[135,29,123,31],[135,32,123,34,"totalItemCount"],[135,46,123,48],[135,50,123,52,"totalItemCount"],[135,64,123,66],[135,67,123,69],[135,68,123,70],[135,70,123,72],[136,8,124,12],[136,14,124,18,"startIndex"],[136,24,124,28],[136,27,124,31],[136,31,124,35],[136,32,124,36,"layouts"],[136,39,124,43],[136,40,124,44,"length"],[136,46,124,50],[137,8,125,12],[137,12,125,16],[137,13,125,17,"layouts"],[137,20,125,24],[137,21,125,25,"length"],[137,27,125,31],[137,30,125,34,"totalItemCount"],[137,44,125,48],[138,8,126,12],[138,12,126,16],[138,13,126,17,"spanTracker"],[138,24,126,28],[138,25,126,29,"length"],[138,31,126,35],[138,34,126,38,"totalItemCount"],[138,48,126,52],[139,8,127,12],[139,13,127,17],[139,17,127,21,"i"],[139,18,127,22],[139,21,127,25,"startIndex"],[139,31,127,35],[139,33,127,37,"i"],[139,34,127,38],[139,37,127,41,"totalItemCount"],[139,51,127,55],[139,53,127,57,"i"],[139,54,127,58],[139,56,127,60],[139,58,127,62],[140,10,128,16],[140,14,128,20],[140,15,128,21,"getLayout"],[140,24,128,30],[140,25,128,31,"i"],[140,26,128,32],[140,27,128,33],[141,10,129,16],[141,14,129,20],[141,15,129,21,"getSpan"],[141,22,129,28],[141,23,129,29,"i"],[141,24,129,30],[141,25,129,31],[142,8,130,12],[143,8,131,12],[143,12,131,16],[143,13,131,17,"recomputeLayouts"],[143,29,131,33],[143,30,131,34,"startIndex"],[143,40,131,44],[143,42,131,46,"totalItemCount"],[143,56,131,60],[143,59,131,63],[143,60,131,64],[143,61,131,65],[144,6,132,8],[145,6,133,8],[146,6,134,8,"minRecomputeIndex"],[146,23,134,25],[146,26,134,28,"Math"],[146,30,134,32],[146,31,134,33,"min"],[146,34,134,36],[146,35,134,37,"minRecomputeIndex"],[146,52,134,54],[146,54,134,56],[146,58,134,60],[146,59,134,61,"lastSkippedLayoutIndex"],[146,81,134,83],[146,83,134,85],[146,87,134,89],[146,88,134,90,"computeMinIndexWithChangedSpan"],[146,118,134,120],[146,119,134,121,"layoutInfo"],[146,129,134,131],[146,130,134,132],[146,132,134,134],[146,133,134,135,"_a"],[146,135,134,137],[146,138,134,140],[146,142,134,144],[146,143,134,145,"processLayoutInfo"],[146,160,134,162],[146,161,134,163,"layoutInfo"],[146,171,134,173],[146,173,134,175,"totalItemCount"],[146,187,134,189],[146,188,134,190],[146,194,134,196],[146,198,134,200],[146,202,134,204,"_a"],[146,204,134,206],[146,209,134,211],[146,214,134,216],[146,215,134,217],[146,218,134,220,"_a"],[146,220,134,222],[146,223,134,225,"minRecomputeIndex"],[146,240,134,242],[146,242,134,244],[146,246,134,248],[146,247,134,249,"computeEstimatesAndMinMaxChangedLayout"],[146,285,134,287],[146,286,134,288,"layoutInfo"],[146,296,134,298],[146,297,134,299],[146,298,134,300],[147,6,135,8],[147,10,135,12,"minRecomputeIndex"],[147,27,135,29],[147,31,135,33],[147,32,135,34],[147,36,135,38,"minRecomputeIndex"],[147,53,135,55],[147,56,135,58,"totalItemCount"],[147,70,135,72],[147,72,135,74],[148,8,136,12],[148,14,136,18,"maxRecomputeIndex"],[148,31,136,35],[148,34,136,38],[148,38,136,42],[148,39,136,43,"getMaxRecomputeIndex"],[148,59,136,63],[148,60,136,64,"minRecomputeIndex"],[148,77,136,81],[148,78,136,82],[149,8,137,12],[149,12,137,16],[149,13,137,17,"_recomputeLayouts"],[149,30,137,34],[149,31,137,35,"minRecomputeIndex"],[149,48,137,52],[149,50,137,54,"maxRecomputeIndex"],[149,67,137,71],[149,68,137,72],[150,6,138,8],[151,6,139,8],[151,10,139,12],[151,11,139,13,"currentMaxIndexWithChangedLayout"],[151,43,139,45],[151,46,139,48],[151,47,139,49],[151,48,139,50],[152,4,140,4],[153,4,141,4],[154,0,142,0],[155,0,143,0],[156,0,144,0],[157,0,145,0],[158,0,146,0],[159,4,147,4,"getLayout"],[159,13,147,13,"getLayout"],[159,14,147,14,"index"],[159,19,147,19],[159,21,147,21],[160,6,148,8],[160,10,148,12,"index"],[160,15,148,17],[160,19,148,21],[160,23,148,25],[160,24,148,26,"layouts"],[160,31,148,33],[160,32,148,34,"length"],[160,38,148,40],[160,40,148,42],[161,8,149,12],[161,14,149,18],[161,18,149,22,"Error"],[161,23,149,27],[161,24,149,28,"ErrorMessages"],[161,44,149,41],[161,45,149,41,"ErrorMessages"],[161,58,149,41],[161,59,149,42,"indexOutOfBounds"],[161,75,149,58],[161,76,149,59],[162,6,150,8],[163,6,151,8],[163,10,151,12,"layout"],[163,16,151,18],[163,19,151,21],[163,23,151,25],[163,24,151,26,"layouts"],[163,31,151,33],[163,32,151,34,"index"],[163,37,151,39],[163,38,151,40],[164,6,152,8],[164,10,152,12],[164,11,152,13,"layout"],[164,17,152,19],[164,19,152,21],[165,8,153,12],[166,8,154,12,"layout"],[166,14,154,18],[166,17,154,21],[167,10,155,16,"x"],[167,11,155,17],[167,13,155,19],[167,14,155,20],[168,10,156,16,"y"],[168,11,156,17],[168,13,156,19],[168,14,156,20],[169,10,157,16,"width"],[169,15,157,21],[169,17,157,23],[169,18,157,24],[170,10,158,16,"height"],[170,16,158,22],[170,18,158,24],[171,8,159,12],[171,9,159,13],[172,8,160,12],[172,12,160,16],[172,13,160,17,"layouts"],[172,20,160,24],[172,21,160,25,"index"],[172,26,160,30],[172,27,160,31],[172,30,160,34,"layout"],[172,36,160,40],[173,6,161,8],[174,6,162,8],[174,10,162,12],[174,11,162,13,"layout"],[174,17,162,19],[174,18,162,20,"isWidthMeasured"],[174,33,162,35],[174,37,162,39],[174,38,162,40,"layout"],[174,44,162,46],[174,45,162,47,"isHeightMeasured"],[174,61,162,63],[174,63,162,65],[175,8,163,12],[175,12,163,16],[175,13,163,17,"estimateLayout"],[175,27,163,31],[175,28,163,32,"index"],[175,33,163,37],[175,34,163,38],[176,6,164,8],[177,6,165,8],[177,13,165,15,"layout"],[177,19,165,21],[178,4,166,4],[179,4,167,4],[180,0,168,0],[181,0,169,0],[182,0,170,0],[183,4,171,4,"updateLayoutParams"],[183,22,171,22,"updateLayoutParams"],[183,23,171,23,"params"],[183,29,171,29],[183,31,171,31],[184,6,172,8],[184,10,172,12,"_a"],[184,12,172,14],[184,14,172,16,"_b"],[184,16,172,18],[184,18,172,20,"_c"],[184,20,172,22],[185,6,173,8],[185,10,173,12],[185,11,173,13,"windowSize"],[185,21,173,23],[185,24,173,26,"params"],[185,30,173,32],[185,31,173,33,"windowSize"],[185,41,173,43],[186,6,174,8],[186,10,174,12],[186,11,174,13,"horizontal"],[186,21,174,23],[186,24,174,26],[186,25,174,27,"_a"],[186,27,174,29],[186,30,174,32,"params"],[186,36,174,38],[186,37,174,39,"horizontal"],[186,47,174,49],[186,53,174,55],[186,57,174,59],[186,61,174,63,"_a"],[186,63,174,65],[186,68,174,70],[186,73,174,75],[186,74,174,76],[186,77,174,79,"_a"],[186,79,174,81],[186,82,174,84],[186,86,174,88],[186,87,174,89,"horizontal"],[186,97,174,99],[187,6,175,8],[187,10,175,12],[187,11,175,13,"maxColumns"],[187,21,175,23],[187,24,175,26],[187,25,175,27,"_b"],[187,27,175,29],[187,30,175,32,"params"],[187,36,175,38],[187,37,175,39,"maxColumns"],[187,47,175,49],[187,53,175,55],[187,57,175,59],[187,61,175,63,"_b"],[187,63,175,65],[187,68,175,70],[187,73,175,75],[187,74,175,76],[187,77,175,79,"_b"],[187,79,175,81],[187,82,175,84],[187,86,175,88],[187,87,175,89,"maxColumns"],[187,97,175,99],[188,6,176,8],[188,10,176,12],[188,11,176,13,"optimizeItemArrangement"],[188,34,176,36],[188,37,177,12],[188,38,177,13,"_c"],[188,40,177,15],[188,43,177,18,"params"],[188,49,177,24],[188,50,177,25,"optimizeItemArrangement"],[188,73,177,48],[188,79,177,54],[188,83,177,58],[188,87,177,62,"_c"],[188,89,177,64],[188,94,177,69],[188,99,177,74],[188,100,177,75],[188,103,177,78,"_c"],[188,105,177,80],[188,108,177,83],[188,112,177,87],[188,113,177,88,"optimizeItemArrangement"],[188,136,177,111],[189,4,178,4],[190,4,179,4,"getLayoutCount"],[190,18,179,18,"getLayoutCount"],[190,19,179,18],[190,21,179,21],[191,6,180,8],[191,13,180,15],[191,17,180,19],[191,18,180,20,"layouts"],[191,25,180,27],[191,26,180,28,"length"],[191,32,180,34],[192,4,181,4],[193,4,182,4],[194,0,183,0],[195,0,184,0],[196,0,185,0],[197,0,186,0],[198,0,187,0],[199,0,188,0],[200,0,189,0],[201,0,190,0],[202,4,191,4,"getSpan"],[202,11,191,11,"getSpan"],[202,12,191,12,"index"],[202,17,191,17],[202,19,191,19,"skipTracking"],[202,31,191,31],[202,34,191,34],[202,39,191,39],[202,41,191,41],[203,6,192,8],[203,10,192,12,"_a"],[203,12,192,14],[204,6,193,8],[204,10,193,12],[204,11,193,13,"spanSizeInfo"],[204,23,193,25],[204,24,193,26,"span"],[204,28,193,30],[204,31,193,33,"undefined"],[204,40,193,42],[205,6,194,8],[205,10,194,12],[205,11,194,13,"overrideItemLayout"],[205,29,194,31],[205,30,194,32,"index"],[205,35,194,37],[205,37,194,39],[205,41,194,43],[205,42,194,44,"spanSizeInfo"],[205,54,194,56],[205,55,194,57],[206,6,195,8],[206,12,195,14,"span"],[206,16,195,18],[206,19,195,21,"Math"],[206,23,195,25],[206,24,195,26,"min"],[206,27,195,29],[206,28,195,30],[206,29,195,31,"_a"],[206,31,195,33],[206,34,195,36],[206,38,195,40],[206,39,195,41,"spanSizeInfo"],[206,51,195,53],[206,52,195,54,"span"],[206,56,195,58],[206,62,195,64],[206,66,195,68],[206,70,195,72,"_a"],[206,72,195,74],[206,77,195,79],[206,82,195,84],[206,83,195,85],[206,86,195,88,"_a"],[206,88,195,90],[206,91,195,93],[206,92,195,94],[206,94,195,96],[206,98,195,100],[206,99,195,101,"maxColumns"],[206,109,195,111],[206,110,195,112],[207,6,196,8],[207,10,196,12],[207,11,196,13,"skipTracking"],[207,23,196,25],[207,25,196,27],[208,8,197,12],[208,12,197,16],[208,13,197,17,"spanTracker"],[208,24,197,28],[208,25,197,29,"index"],[208,30,197,34],[208,31,197,35],[208,34,197,38,"span"],[208,38,197,42],[209,6,198,8],[210,6,199,8],[210,13,199,15,"span"],[210,17,199,19],[211,4,200,4],[212,4,201,4],[213,0,202,0],[214,0,203,0],[215,0,204,0],[216,4,205,4,"handleSpanChange"],[216,20,205,20,"handleSpanChange"],[216,21,205,21,"index"],[216,26,205,26],[216,28,205,28],[216,29,205,30],[217,4,206,4],[218,0,207,0],[219,0,208,0],[220,0,209,0],[221,0,210,0],[222,4,211,4,"getMaxRecomputeIndex"],[222,24,211,24,"getMaxRecomputeIndex"],[222,25,211,25,"startIndex"],[222,35,211,35],[222,37,211,37],[223,6,212,8],[223,13,212,15,"Math"],[223,17,212,19],[223,18,212,20,"min"],[223,21,212,23],[223,22,212,24,"Math"],[223,26,212,28],[223,27,212,29,"max"],[223,30,212,32],[223,31,212,33,"startIndex"],[223,41,212,43],[223,43,212,45],[223,47,212,49],[223,48,212,50,"currentMaxIndexWithChangedLayout"],[223,80,212,82],[223,81,212,83],[223,84,213,12],[223,88,213,16],[223,89,213,17,"maxItemsToProcess"],[223,106,213,34],[223,108,213,36],[223,112,213,40],[223,113,213,41,"layouts"],[223,120,213,48],[223,121,213,49,"length"],[223,127,213,55],[223,130,213,58],[223,131,213,59],[223,132,213,60],[224,4,214,4],[225,4,215,4],[226,0,216,0],[227,0,217,0],[228,0,218,0],[229,0,219,0],[230,4,220,4,"getMinRecomputeIndex"],[230,24,220,24,"getMinRecomputeIndex"],[230,25,220,25,"startIndex"],[230,35,220,35],[230,37,220,37],[231,6,221,8],[231,13,221,15,"startIndex"],[231,23,221,25],[232,4,222,4],[233,4,223,4,"_recomputeLayouts"],[233,21,223,21,"_recomputeLayouts"],[233,22,223,22,"startIndex"],[233,32,223,32],[233,34,223,34,"endIndex"],[233,42,223,42],[233,44,223,44],[234,6,224,8],[234,10,224,12],[234,11,224,13,"recomputeLayouts"],[234,27,224,29],[234,28,224,30,"startIndex"],[234,38,224,40],[234,40,224,42,"endIndex"],[234,48,224,50],[234,49,224,51],[235,6,225,8],[235,10,225,12],[235,14,225,16],[235,15,225,17,"lastSkippedLayoutIndex"],[235,37,225,39],[235,41,225,43,"startIndex"],[235,51,225,53],[235,55,226,12],[235,59,226,16],[235,60,226,17,"lastSkippedLayoutIndex"],[235,82,226,39],[235,86,226,43,"endIndex"],[235,94,226,51],[235,96,226,53],[236,8,227,12],[236,12,227,16],[236,13,227,17,"lastSkippedLayoutIndex"],[236,35,227,39],[236,38,227,42,"Number"],[236,44,227,48],[236,45,227,49,"MAX_VALUE"],[236,54,227,58],[237,6,228,8],[238,6,229,8],[238,10,229,12,"endIndex"],[238,18,229,20],[238,21,229,23],[238,22,229,24],[238,25,229,27],[238,29,229,31],[238,30,229,32,"layouts"],[238,37,229,39],[238,38,229,40,"length"],[238,44,229,46],[238,46,229,48],[239,8,230,12],[239,12,230,16],[239,13,230,17,"lastSkippedLayoutIndex"],[239,35,230,39],[239,38,230,42,"Math"],[239,42,230,46],[239,43,230,47,"min"],[239,46,230,50],[239,47,230,51,"endIndex"],[239,55,230,59],[239,58,230,62],[239,59,230,63],[239,61,230,65],[239,65,230,69],[239,66,230,70,"lastSkippedLayoutIndex"],[239,88,230,92],[239,89,230,93],[240,8,231,12],[240,14,231,18,"lastIndex"],[240,23,231,27],[240,26,231,30],[240,30,231,34],[240,31,231,35,"layouts"],[240,38,231,42],[240,39,231,43,"length"],[240,45,231,49],[240,48,231,52],[240,49,231,53],[241,8,232,12],[242,8,233,12],[243,8,234,12],[243,12,234,16],[243,16,234,20],[243,17,234,21,"layouts"],[243,24,234,28],[243,25,234,29,"lastIndex"],[243,34,234,38],[243,35,234,39],[243,36,234,40,"y"],[243,37,234,41],[243,40,234,44],[243,44,234,48],[243,45,234,49,"layouts"],[243,52,234,56],[243,53,234,57,"endIndex"],[243,61,234,65],[243,62,234,66],[243,63,234,67,"y"],[243,64,234,68],[243,66,234,70],[244,10,235,16],[244,14,235,20],[244,15,235,21,"recomputeLayouts"],[244,31,235,37],[244,32,235,38],[244,36,235,42],[244,37,235,43,"lastSkippedLayoutIndex"],[244,59,235,65],[244,61,235,67,"lastIndex"],[244,70,235,76],[244,71,235,77],[245,10,236,16],[245,14,236,20],[245,15,236,21,"lastSkippedLayoutIndex"],[245,37,236,43],[245,40,236,46,"Number"],[245,46,236,52],[245,47,236,53,"MAX_VALUE"],[245,56,236,62],[246,8,237,12],[247,6,238,8],[248,4,239,4],[249,4,240,4],[250,0,241,0],[251,0,242,0],[252,0,243,0],[253,0,244,0],[254,4,245,4,"computeEstimatesAndMinMaxChangedLayout"],[254,42,245,42,"computeEstimatesAndMinMaxChangedLayout"],[254,43,245,43,"layoutInfo"],[254,53,245,53],[254,55,245,55],[255,6,246,8],[255,10,246,12,"minRecomputeIndex"],[255,27,246,29],[255,30,246,32,"Number"],[255,36,246,38],[255,37,246,39,"MAX_VALUE"],[255,46,246,48],[256,6,247,8],[256,11,247,13],[256,17,247,19,"info"],[256,21,247,23],[256,25,247,27,"layoutInfo"],[256,35,247,37],[256,37,247,39],[257,8,248,12],[257,14,248,18],[258,10,248,20,"index"],[258,15,248,25],[259,10,248,27,"dimensions"],[260,8,248,38],[260,9,248,39],[260,12,248,42,"info"],[260,16,248,46],[261,8,249,12],[261,14,249,18,"storedLayout"],[261,26,249,30],[261,29,249,33],[261,33,249,37],[261,34,249,38,"layouts"],[261,41,249,45],[261,42,249,46,"index"],[261,47,249,51],[261,48,249,52],[262,8,250,12],[262,12,250,16,"index"],[262,17,250,21],[262,21,250,25],[262,25,250,29],[262,26,250,30,"lastSkippedLayoutIndex"],[262,48,250,52],[262,52,251,16],[262,53,251,17,"storedLayout"],[262,65,251,29],[262,69,252,16],[262,70,252,17,"storedLayout"],[262,82,252,29],[262,83,252,30,"isHeightMeasured"],[262,99,252,46],[262,103,253,16],[262,104,253,17,"storedLayout"],[262,116,253,29],[262,117,253,30,"isWidthMeasured"],[262,132,253,45],[262,136,254,16],[262,140,254,16,"areDimensionsNotEqual"],[262,159,254,37],[262,160,254,37,"areDimensionsNotEqual"],[262,181,254,37],[262,183,254,38,"storedLayout"],[262,195,254,50],[262,196,254,51,"height"],[262,202,254,57],[262,204,254,59,"dimensions"],[262,214,254,69],[262,215,254,70,"height"],[262,221,254,76],[262,222,254,77],[262,226,255,16],[262,230,255,16,"areDimensionsNotEqual"],[262,249,255,37],[262,250,255,37,"areDimensionsNotEqual"],[262,271,255,37],[262,273,255,38,"storedLayout"],[262,285,255,50],[262,286,255,51,"width"],[262,291,255,56],[262,293,255,58,"dimensions"],[262,303,255,68],[262,304,255,69,"width"],[262,309,255,74],[262,310,255,75],[262,312,255,77],[263,10,256,16,"minRecomputeIndex"],[263,27,256,33],[263,30,256,36,"Math"],[263,34,256,40],[263,35,256,41,"min"],[263,38,256,44],[263,39,256,45,"minRecomputeIndex"],[263,56,256,62],[263,58,256,64,"index"],[263,63,256,69],[263,64,256,70],[264,10,257,16],[264,14,257,20],[264,15,257,21,"currentMaxIndexWithChangedLayout"],[264,47,257,53],[264,50,257,56,"Math"],[264,54,257,60],[264,55,257,61,"max"],[264,58,257,64],[264,59,257,65],[264,63,257,69],[264,64,257,70,"currentMaxIndexWithChangedLayout"],[264,96,257,102],[264,98,257,104,"index"],[264,103,257,109],[264,104,257,110],[265,8,258,12],[266,8,259,12],[266,12,259,16],[266,13,259,17,"heightAverageWindow"],[266,32,259,36],[266,33,259,37,"addValue"],[266,41,259,45],[266,42,259,46,"dimensions"],[266,52,259,56],[266,53,259,57,"height"],[266,59,259,63],[266,61,259,65],[266,65,259,69],[266,66,259,70,"getItemType"],[266,77,259,81],[266,78,259,82,"index"],[266,83,259,87],[266,84,259,88],[266,85,259,89],[267,8,260,12],[267,12,260,16],[267,13,260,17,"widthAverageWindow"],[267,31,260,35],[267,32,260,36,"addValue"],[267,40,260,44],[267,41,260,45,"dimensions"],[267,51,260,55],[267,52,260,56,"width"],[267,57,260,61],[267,59,260,63],[267,63,260,67],[267,64,260,68,"getItemType"],[267,75,260,79],[267,76,260,80,"index"],[267,81,260,85],[267,82,260,86],[267,83,260,87],[268,6,261,8],[269,6,262,8],[269,13,262,15,"minRecomputeIndex"],[269,30,262,32],[270,4,263,4],[271,4,264,4,"computeMinIndexWithChangedSpan"],[271,34,264,34,"computeMinIndexWithChangedSpan"],[271,35,264,35,"layoutInfo"],[271,45,264,45],[271,47,264,47],[272,6,265,8],[272,10,265,12,"minIndexWithChangedSpan"],[272,33,265,35],[272,36,265,38,"Number"],[272,42,265,44],[272,43,265,45,"MAX_VALUE"],[272,52,265,54],[273,6,266,8],[273,11,266,13],[273,17,266,19,"info"],[273,21,266,23],[273,25,266,27,"layoutInfo"],[273,35,266,37],[273,37,266,39],[274,8,267,12],[274,14,267,18],[275,10,267,20,"index"],[276,8,267,26],[276,9,267,27],[276,12,267,30,"info"],[276,16,267,34],[277,8,268,12],[277,14,268,18,"span"],[277,18,268,22],[277,21,268,25],[277,25,268,29],[277,26,268,30,"getSpan"],[277,33,268,37],[277,34,268,38,"index"],[277,39,268,43],[277,41,268,45],[277,45,268,49],[277,46,268,50],[278,8,269,12],[278,14,269,18,"storedSpan"],[278,24,269,28],[278,27,269,31],[278,31,269,35],[278,32,269,36,"spanTracker"],[278,43,269,47],[278,44,269,48,"index"],[278,49,269,53],[278,50,269,54],[279,8,270,12],[279,12,270,16,"span"],[279,16,270,20],[279,21,270,25,"storedSpan"],[279,31,270,35],[279,33,270,37],[280,10,271,16],[280,14,271,20],[280,15,271,21,"spanTracker"],[280,26,271,32],[280,27,271,33,"index"],[280,32,271,38],[280,33,271,39],[280,36,271,42,"span"],[280,40,271,46],[281,10,272,16],[281,14,272,20],[281,15,272,21,"handleSpanChange"],[281,31,272,37],[281,32,272,38,"index"],[281,37,272,43],[281,38,272,44],[282,10,273,16,"minIndexWithChangedSpan"],[282,33,273,39],[282,36,273,42,"Math"],[282,40,273,46],[282,41,273,47,"min"],[282,44,273,50],[282,45,273,51,"minIndexWithChangedSpan"],[282,68,273,74],[282,70,273,76,"index"],[282,75,273,81],[282,76,273,82],[283,8,274,12],[284,6,275,8],[285,6,276,8],[285,13,276,15,"minIndexWithChangedSpan"],[285,36,276,38],[286,4,277,4],[287,2,278,0],[288,0,278,1],[288,3]],"functionMap":{"names":["<global>","RVLayoutManager","RVLayoutManager#constructor","RVLayoutManager#getEstimatedWidth","RVLayoutManager#getEstimatedHeight","RVLayoutManager#isHorizontal","RVLayoutManager#getWindowsSize","RVLayoutManager#getVisibleLayouts","RVLayoutManager#deleteLayout","indices.sort$argument_0","RVLayoutManager#modifyLayout","RVLayoutManager#getLayout","RVLayoutManager#updateLayoutParams","RVLayoutManager#getLayoutCount","RVLayoutManager#getSpan","RVLayoutManager#handleSpanChange","RVLayoutManager#getMaxRecomputeIndex","RVLayoutManager#getMinRecomputeIndex","RVLayoutManager#_recomputeLayouts","RVLayoutManager#computeEstimatesAndMinMaxChangedLayout","RVLayoutManager#computeMinIndexWithChangedSpan"],"mappings":"AAA;OCW;ICC;KD8B;IEM;KFE;IGM;KHE;IIK;KJE;IKK;KLE;IMQ;KNU;IOK;qBCE,2BD;KPQ;ISM;KT4B;IUO;KVmB;IWK;KXO;IYC;KZE;IaU;KbS;IcK,2Bd;IeM;KfG;IgBM;KhBE;IiBC;KjBgB;IkBM;KlBkB;ImBC;KnBa;CDC"},"hasCjsExports":false},"type":"js/module"}]}