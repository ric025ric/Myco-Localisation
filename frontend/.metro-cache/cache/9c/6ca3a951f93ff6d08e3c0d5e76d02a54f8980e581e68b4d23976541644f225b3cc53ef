{"dependencies":[{"name":"./mode","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"kP3UoMWYBHY2j1qDa+F4rCzyVl0=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":14,"index":45},"end":{"line":2,"column":32,"index":63}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  const Mode = require(_dependencyMap[0], \"./mode\");\n  const Utils = require(_dependencyMap[1], \"./utils\");\n  function KanjiData(data) {\n    this.mode = Mode.KANJI;\n    this.data = data;\n  }\n  KanjiData.getBitsLength = function getBitsLength(length) {\n    return length * 13;\n  };\n  KanjiData.prototype.getLength = function getLength() {\n    return this.data.length;\n  };\n  KanjiData.prototype.getBitsLength = function getBitsLength() {\n    return KanjiData.getBitsLength(this.data.length);\n  };\n  KanjiData.prototype.write = function (bitBuffer) {\n    let i;\n\n    // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n    // These byte values are shifted from the JIS X 0208 values.\n    // JIS X 0208 gives details of the shift coded representation.\n    for (i = 0; i < this.data.length; i++) {\n      let value = Utils.toSJIS(this.data[i]);\n\n      // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n      if (value >= 0x8140 && value <= 0x9FFC) {\n        // Subtract 0x8140 from Shift JIS value\n        value -= 0x8140;\n\n        // For characters with Shift JIS values from 0xE040 to 0xEBBF\n      } else if (value >= 0xE040 && value <= 0xEBBF) {\n        // Subtract 0xC140 from Shift JIS value\n        value -= 0xC140;\n      } else {\n        throw new Error('Invalid SJIS character: ' + this.data[i] + '\\n' + 'Make sure your charset is UTF-8');\n      }\n\n      // Multiply most significant byte of result by 0xC0\n      // and add least significant byte to product\n      value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);\n\n      // Convert result to a 13-bit binary string\n      bitBuffer.put(value, 13);\n    }\n  };\n  module.exports = KanjiData;\n});","lineCount":48,"map":[[2,2,1,0],[2,8,1,6,"Mode"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,50,1,29],[2,51,1,30],[3,2,2,0],[3,8,2,6,"Utils"],[3,13,2,11],[3,16,2,14,"require"],[3,23,2,21],[3,24,2,21,"_dependencyMap"],[3,38,2,21],[3,52,2,31],[3,53,2,32],[4,2,4,0],[4,11,4,9,"KanjiData"],[4,20,4,18,"KanjiData"],[4,21,4,20,"data"],[4,25,4,24],[4,27,4,26],[5,4,5,2],[5,8,5,6],[5,9,5,7,"mode"],[5,13,5,11],[5,16,5,14,"Mode"],[5,20,5,18],[5,21,5,19,"KANJI"],[5,26,5,24],[6,4,6,2],[6,8,6,6],[6,9,6,7,"data"],[6,13,6,11],[6,16,6,14,"data"],[6,20,6,18],[7,2,7,0],[8,2,9,0,"KanjiData"],[8,11,9,9],[8,12,9,10,"getBitsLength"],[8,25,9,23],[8,28,9,26],[8,37,9,35,"getBitsLength"],[8,50,9,48,"getBitsLength"],[8,51,9,50,"length"],[8,57,9,56],[8,59,9,58],[9,4,10,2],[9,11,10,9,"length"],[9,17,10,15],[9,20,10,18],[9,22,10,20],[10,2,11,0],[10,3,11,1],[11,2,13,0,"KanjiData"],[11,11,13,9],[11,12,13,10,"prototype"],[11,21,13,19],[11,22,13,20,"getLength"],[11,31,13,29],[11,34,13,32],[11,43,13,41,"getLength"],[11,52,13,50,"getLength"],[11,53,13,50],[11,55,13,54],[12,4,14,2],[12,11,14,9],[12,15,14,13],[12,16,14,14,"data"],[12,20,14,18],[12,21,14,19,"length"],[12,27,14,25],[13,2,15,0],[13,3,15,1],[14,2,17,0,"KanjiData"],[14,11,17,9],[14,12,17,10,"prototype"],[14,21,17,19],[14,22,17,20,"getBitsLength"],[14,35,17,33],[14,38,17,36],[14,47,17,45,"getBitsLength"],[14,60,17,58,"getBitsLength"],[14,61,17,58],[14,63,17,62],[15,4,18,2],[15,11,18,9,"KanjiData"],[15,20,18,18],[15,21,18,19,"getBitsLength"],[15,34,18,32],[15,35,18,33],[15,39,18,37],[15,40,18,38,"data"],[15,44,18,42],[15,45,18,43,"length"],[15,51,18,49],[15,52,18,50],[16,2,19,0],[16,3,19,1],[17,2,21,0,"KanjiData"],[17,11,21,9],[17,12,21,10,"prototype"],[17,21,21,19],[17,22,21,20,"write"],[17,27,21,25],[17,30,21,28],[17,40,21,38,"bitBuffer"],[17,49,21,47],[17,51,21,49],[18,4,22,2],[18,8,22,6,"i"],[18,9,22,7],[20,4,24,2],[21,4,25,2],[22,4,26,2],[23,4,27,2],[23,9,27,7,"i"],[23,10,27,8],[23,13,27,11],[23,14,27,12],[23,16,27,14,"i"],[23,17,27,15],[23,20,27,18],[23,24,27,22],[23,25,27,23,"data"],[23,29,27,27],[23,30,27,28,"length"],[23,36,27,34],[23,38,27,36,"i"],[23,39,27,37],[23,41,27,39],[23,43,27,41],[24,6,28,4],[24,10,28,8,"value"],[24,15,28,13],[24,18,28,16,"Utils"],[24,23,28,21],[24,24,28,22,"toSJIS"],[24,30,28,28],[24,31,28,29],[24,35,28,33],[24,36,28,34,"data"],[24,40,28,38],[24,41,28,39,"i"],[24,42,28,40],[24,43,28,41],[24,44,28,42],[26,6,30,4],[27,6,31,4],[27,10,31,8,"value"],[27,15,31,13],[27,19,31,17],[27,25,31,23],[27,29,31,27,"value"],[27,34,31,32],[27,38,31,36],[27,44,31,42],[27,46,31,44],[28,8,32,6],[29,8,33,6,"value"],[29,13,33,11],[29,17,33,15],[29,23,33,21],[31,8,35,4],[32,6,36,4],[32,7,36,5],[32,13,36,11],[32,17,36,15,"value"],[32,22,36,20],[32,26,36,24],[32,32,36,30],[32,36,36,34,"value"],[32,41,36,39],[32,45,36,43],[32,51,36,49],[32,53,36,51],[33,8,37,6],[34,8,38,6,"value"],[34,13,38,11],[34,17,38,15],[34,23,38,21],[35,6,39,4],[35,7,39,5],[35,13,39,11],[36,8,40,6],[36,14,40,12],[36,18,40,16,"Error"],[36,23,40,21],[36,24,41,8],[36,50,41,34],[36,53,41,37],[36,57,41,41],[36,58,41,42,"data"],[36,62,41,46],[36,63,41,47,"i"],[36,64,41,48],[36,65,41,49],[36,68,41,52],[36,72,41,56],[36,75,42,8],[36,108,42,41],[36,109,42,42],[37,6,43,4],[39,6,45,4],[40,6,46,4],[41,6,47,4,"value"],[41,11,47,9],[41,14,47,13],[41,15,47,15,"value"],[41,20,47,20],[41,25,47,25],[41,26,47,26],[41,29,47,30],[41,33,47,34],[41,37,47,38],[41,41,47,42],[41,45,47,47,"value"],[41,50,47,52],[41,53,47,55],[41,57,47,59],[41,58,47,60],[43,6,49,4],[44,6,50,4,"bitBuffer"],[44,15,50,13],[44,16,50,14,"put"],[44,19,50,17],[44,20,50,18,"value"],[44,25,50,23],[44,27,50,25],[44,29,50,27],[44,30,50,28],[45,4,51,2],[46,2,52,0],[46,3,52,1],[47,2,54,0,"module"],[47,8,54,6],[47,9,54,7,"exports"],[47,16,54,14],[47,19,54,17,"KanjiData"],[47,28,54,26],[48,0,54,26],[48,3]],"functionMap":{"names":["<global>","KanjiData","getBitsLength","getLength","KanjiData.prototype.write"],"mappings":"AAA;ACG;CDG;0BEE;CFE;gCGE;CHE;oCEE;CFE;4BIE;CJ+B"},"hasCjsExports":true},"type":"js/module"}]}